diff --git a/.cargo/config.in b/.cargo/config.in
index 67bc719d5dd7..2a31561089a8 100644
--- a/.cargo/config.in
+++ b/.cargo/config.in
@@ -97,7 +97,7 @@ replace-with = "vendored-sources"
 
 [source."https://github.com/mozilla/mp4parse-rust"]
 git = "https://github.com/mozilla/mp4parse-rust"
-rev = "3bfc47d9a571d0842676043ba60716318e946c06"
+rev = "eb0b625bd7e888d05ebcfc7685e2501b34c3b374"
 replace-with = "vendored-sources"
 
 [source."https://github.com/mozilla/neqo"]
diff --git a/Cargo.lock b/Cargo.lock
index 19042562cd63..6f8bd332be5c 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -71,7 +71,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b5e9dd62f37dea550caf48c77591dc50bd1a378ce08855be1a0c42a97b7550fb"
 dependencies = [
  "android_log-sys",
- "env_logger 0.9.3",
+ "env_logger",
  "log",
  "once_cell",
 ]
@@ -1568,13 +1568,6 @@ dependencies = [
  "syn",
 ]
 
-[[package]]
-name = "env_logger"
-version = "0.8.999"
-dependencies = [
- "env_logger 0.9.3",
-]
-
 [[package]]
 name = "env_logger"
 version = "0.9.3"
@@ -1584,7 +1577,6 @@ dependencies = [
  "atty",
  "humantime",
  "log",
- "regex",
  "termcolor",
 ]
 
@@ -2072,7 +2064,7 @@ name = "gecko_logger"
 version = "0.1.0"
 dependencies = [
  "app_services_logger",
- "env_logger 0.9.3",
+ "env_logger",
  "lazy_static",
  "log",
 ]
@@ -2328,7 +2320,7 @@ dependencies = [
  "bincode",
  "chrono",
  "crossbeam-channel",
- "env_logger 0.9.3",
+ "env_logger",
  "flate2",
  "log",
  "once_cell",
@@ -3600,12 +3592,11 @@ dependencies = [
 
 [[package]]
 name = "mp4parse"
-version = "0.13.0"
-source = "git+https://github.com/mozilla/mp4parse-rust?rev=3bfc47d9a571d0842676043ba60716318e946c06#3bfc47d9a571d0842676043ba60716318e946c06"
+version = "0.16.0"
+source = "git+https://github.com/mozilla/mp4parse-rust?rev=eb0b625bd7e888d05ebcfc7685e2501b34c3b374#eb0b625bd7e888d05ebcfc7685e2501b34c3b374"
 dependencies = [
  "bitreader",
  "byteorder",
- "env_logger 0.8.999",
  "fallible_collections",
  "log",
  "num-traits",
@@ -3618,8 +3609,8 @@ version = "0.1.0"
 
 [[package]]
 name = "mp4parse_capi"
-version = "0.13.0"
-source = "git+https://github.com/mozilla/mp4parse-rust?rev=3bfc47d9a571d0842676043ba60716318e946c06#3bfc47d9a571d0842676043ba60716318e946c06"
+version = "0.16.0"
+source = "git+https://github.com/mozilla/mp4parse-rust?rev=eb0b625bd7e888d05ebcfc7685e2501b34c3b374#eb0b625bd7e888d05ebcfc7685e2501b34c3b374"
 dependencies = [
  "byteorder",
  "fallible_collections",
@@ -3660,7 +3651,7 @@ version = "0.6.3"
 source = "git+https://github.com/mozilla/neqo?tag=v0.6.3#4fe628bb911e4437169d974baa628c159e96f879"
 dependencies = [
  "chrono",
- "env_logger 0.9.3",
+ "env_logger",
  "lazy_static",
  "log",
  "qlog",
@@ -4001,7 +3992,7 @@ version = "0.1.4"
 dependencies = [
  "byteorder",
  "core-foundation",
- "env_logger 0.9.3",
+ "env_logger",
  "lazy_static",
  "libloading",
  "log",
@@ -5019,7 +5010,7 @@ name = "smoosh"
 version = "0.1.0"
 dependencies = [
  "bumpalo",
- "env_logger 0.9.3",
+ "env_logger",
  "jsparagus",
  "log",
 ]
diff --git a/Cargo.toml b/Cargo.toml
index 70aff6435858..31b80ff31ebe 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -104,9 +104,6 @@ memmap2 = { path = "build/rust/memmap2" }
 # Patch getrandom 0.7 to 0.8
 rand = { path = "build/rust/rand" }
 
-# Patch env_logger 0.8 to 0.9
-env_logger = { path = "build/rust/env_logger" }
-
 # Patch parking_lot 0.12 down to 0.11, which is compatible for most crates that use it, to avoid
 # dependencies on windows-sys.
 parking_lot = { path = "build/rust/parking_lot" }
diff --git a/dom/media/gtest/mp4_demuxer/TestMP4.cpp b/dom/media/gtest/mp4_demuxer/TestMP4.cpp
index 5bacf43a7198..df58ec42e202 100644
--- a/dom/media/gtest/mp4_demuxer/TestMP4.cpp
+++ b/dom/media/gtest/mp4_demuxer/TestMP4.cpp
@@ -92,12 +92,12 @@ TEST(rust, MP4MetadataEmpty)
   io = {vector_reader, &buf};
   rv = mp4parse_new(&io, &parser);
   ASSERT_EQ(parser, nullptr);
-  EXPECT_EQ(rv, MP4PARSE_STATUS_NO_MOOV);
+  EXPECT_EQ(rv, MP4PARSE_STATUS_MOOV_MISSING);
 
   buf.buffer.reserve(4097);
   rv = mp4parse_new(&io, &parser);
   ASSERT_EQ(parser, nullptr);
-  EXPECT_EQ(rv, MP4PARSE_STATUS_NO_MOOV);
+  EXPECT_EQ(rv, MP4PARSE_STATUS_MOOV_MISSING);
 
   // Empty buffers should fail.
   buf.buffer.resize(4097, 0);
diff --git a/dom/media/gtest/mp4_demuxer/TestParser.cpp b/dom/media/gtest/mp4_demuxer/TestParser.cpp
index ae1c6cec7944..de90b339a282 100644
--- a/dom/media/gtest/mp4_demuxer/TestParser.cpp
+++ b/dom/media/gtest/mp4_demuxer/TestParser.cpp
@@ -316,7 +316,7 @@ TEST(MP4Metadata, test_case_mp4)
           << tests[test].mFilename;
       if (tests[test].mHasVideoIndice) {
         for (size_t i = 0; i < indices.Ref()->Length(); i++) {
-          Index::Indice data;
+          MP4SampleIndex::Indice data;
           EXPECT_TRUE(indices.Ref()->GetIndice(i, data))
               << tests[test].mFilename;
           EXPECT_TRUE(data.start_offset <= data.end_offset)
@@ -349,7 +349,7 @@ TEST(MP4Metadata, test_case_mp4)
           metadata.GetTrackIndice(audioInfo->mTrackId);
       EXPECT_TRUE(!!indices.Ref()) << tests[test].mFilename;
       for (size_t i = 0; i < indices.Ref()->Length(); i++) {
-        Index::Indice data;
+        MP4SampleIndex::Indice data;
         EXPECT_TRUE(indices.Ref()->GetIndice(i, data)) << tests[test].mFilename;
         EXPECT_TRUE(data.start_offset <= data.end_offset)
             << tests[test].mFilename;
diff --git a/dom/media/mediasource/ContainerParser.cpp b/dom/media/mediasource/ContainerParser.cpp
index b6f86928e9b8..5fc76e3530a9 100644
--- a/dom/media/mediasource/ContainerParser.cpp
+++ b/dom/media/mediasource/ContainerParser.cpp
@@ -19,9 +19,9 @@
 #ifdef MOZ_FMP4
 #  include "AtomType.h"
 #  include "BufferReader.h"
-#  include "Index.h"
-#  include "MP4Interval.h"
 #  include "ByteStream.h"
+#  include "MP4Interval.h"
+#  include "SampleIterator.h"
 #endif
 #include "SourceBufferResource.h"
 #include <algorithm>
diff --git a/dom/media/mp4/MP4Demuxer.cpp b/dom/media/mp4/MP4Demuxer.cpp
index 59bba1657704..aff86e36a78a 100644
--- a/dom/media/mp4/MP4Demuxer.cpp
+++ b/dom/media/mp4/MP4Demuxer.cpp
@@ -13,7 +13,6 @@
 #include "AnnexB.h"
 #include "BufferStream.h"
 #include "H264.h"
-#include "Index.h"
 #include "MP4Decoder.h"
 #include "MP4Metadata.h"
 #include "MoofParser.h"
@@ -23,6 +22,7 @@
 #include "mozilla/StaticPrefs_media.h"
 #include "mozilla/Telemetry.h"
 #include "nsPrintfCString.h"
+#include "SampleIterator.h"
 
 extern mozilla::LazyLogModule gMediaDemuxerLog;
 mozilla::LogModule* GetDemuxerLog() { return gMediaDemuxerLog; }
@@ -66,7 +66,7 @@ class MP4TrackDemuxer : public MediaTrackDemuxer,
   RefPtr<MediaResource> mResource;
   RefPtr<ResourceStream> mStream;
   UniquePtr<TrackInfo> mInfo;
-  RefPtr<Index> mIndex;
+  RefPtr<MP4SampleIndex> mIndex;
   UniquePtr<SampleIterator> mIterator;
   Maybe<media::TimeUnit> mNextKeyframeTime;
   // Queued samples extracted by the demuxer, but not yet returned.
@@ -309,7 +309,8 @@ MP4TrackDemuxer::MP4TrackDemuxer(MediaResource* aResource,
     : mResource(aResource),
       mStream(new ResourceStream(aResource)),
       mInfo(std::move(aInfo)),
-      mIndex(new Index(aIndices, mStream, mInfo->mTrackId, mInfo->IsAudio())),
+      mIndex(new MP4SampleIndex(aIndices, mStream, mInfo->mTrackId,
+                                mInfo->IsAudio())),
       mIterator(MakeUnique<SampleIterator>(mIndex)),
       mNeedReIndex(true) {
   EnsureUpToDateIndex();  // Force update of index
diff --git a/dom/media/mp4/MP4Metadata.cpp b/dom/media/mp4/MP4Metadata.cpp
index 872bd299e9fe..74767321669b 100644
--- a/dom/media/mp4/MP4Metadata.cpp
+++ b/dom/media/mp4/MP4Metadata.cpp
@@ -32,7 +32,8 @@ IndiceWrapper::IndiceWrapper(Mp4parseByteData& aIndice) {
 
 size_t IndiceWrapper::Length() const { return mIndice.length; }
 
-bool IndiceWrapper::GetIndice(size_t aIndex, Index::Indice& aIndice) const {
+bool IndiceWrapper::GetIndice(size_t aIndex,
+                              MP4SampleIndex::Indice& aIndice) const {
   if (aIndex >= mIndice.length) {
     MOZ_LOG(gMP4MetadataLog, LogLevel::Error, ("Index overflow in indice"));
     return false;
diff --git a/dom/media/mp4/MP4Metadata.h b/dom/media/mp4/MP4Metadata.h
index df1e39ff1ca5..824983a57930 100644
--- a/dom/media/mp4/MP4Metadata.h
+++ b/dom/media/mp4/MP4Metadata.h
@@ -9,12 +9,12 @@
 
 #include "mozilla/UniquePtr.h"
 #include "DecoderData.h"
-#include "Index.h"
 #include "MediaData.h"
 #include "MediaInfo.h"
 #include "MediaResult.h"
 #include "ByteStream.h"
 #include "mp4parse.h"
+#include "SampleIterator.h"
 
 namespace mozilla {
 
@@ -26,7 +26,7 @@ class IndiceWrapper {
  public:
   size_t Length() const;
 
-  bool GetIndice(size_t aIndex, Index::Indice& aIndice) const;
+  bool GetIndice(size_t aIndex, MP4SampleIndex::Indice& aIndice) const;
 
   explicit IndiceWrapper(Mp4parseByteData& aRustIndice);
 
diff --git a/dom/media/mp4/Index.cpp b/dom/media/mp4/SampleIterator.cpp
similarity index 96%
rename from dom/media/mp4/Index.cpp
rename to dom/media/mp4/SampleIterator.cpp
index 978f960a2d3a..fb4b0157137a 100644
--- a/dom/media/mp4/Index.cpp
+++ b/dom/media/mp4/SampleIterator.cpp
@@ -2,7 +2,7 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-#include "Index.h"
+#include "SampleIterator.h"
 
 #include <algorithm>
 #include <limits>
@@ -71,13 +71,15 @@ bool RangeFinder::Contains(MediaByteRange aByteRange) {
   return false;
 }
 
-SampleIterator::SampleIterator(Index* aIndex)
+SampleIterator::SampleIterator(MP4SampleIndex* aIndex)
     : mIndex(aIndex), mCurrentMoof(0), mCurrentSample(0) {
   mIndex->RegisterIterator(this);
 }
 
 SampleIterator::~SampleIterator() { mIndex->UnregisterIterator(this); }
 
+bool SampleIterator::HasNext() { return !!Get(); }
+
 already_AddRefed<MediaRawData> SampleIterator::GetNext() {
   Sample* s(Get());
   if (!s) {
@@ -413,8 +415,9 @@ Microseconds SampleIterator::GetNextKeyframeTime() {
   return -1;
 }
 
-Index::Index(const IndiceWrapper& aIndices, ByteStream* aSource,
-             uint32_t aTrackId, bool aIsAudio)
+MP4SampleIndex::MP4SampleIndex(const IndiceWrapper& aIndices,
+                               ByteStream* aSource, uint32_t aTrackId,
+                               bool aIsAudio)
     : mSource(aSource), mIsAudio(aIsAudio) {
   if (!aIndices.Length()) {
     mMoofParser =
@@ -495,14 +498,14 @@ Index::Index(const IndiceWrapper& aIndices, ByteStream* aSource,
   }
 }
 
-Index::~Index() = default;
+MP4SampleIndex::~MP4SampleIndex() = default;
 
-void Index::UpdateMoofIndex(const MediaByteRangeSet& aByteRanges) {
+void MP4SampleIndex::UpdateMoofIndex(const MediaByteRangeSet& aByteRanges) {
   UpdateMoofIndex(aByteRanges, false);
 }
 
-void Index::UpdateMoofIndex(const MediaByteRangeSet& aByteRanges,
-                            bool aCanEvict) {
+void MP4SampleIndex::UpdateMoofIndex(const MediaByteRangeSet& aByteRanges,
+                                     bool aCanEvict) {
   if (!mMoofParser) {
     return;
   }
@@ -529,7 +532,7 @@ void Index::UpdateMoofIndex(const MediaByteRangeSet& aByteRanges,
   }
 }
 
-Microseconds Index::GetEndCompositionIfBuffered(
+Microseconds MP4SampleIndex::GetEndCompositionIfBuffered(
     const MediaByteRangeSet& aByteRanges) {
   FallibleTArray<Sample>* index;
   if (mMoofParser) {
@@ -556,7 +559,7 @@ Microseconds Index::GetEndCompositionIfBuffered(
   return 0;
 }
 
-TimeIntervals Index::ConvertByteRangesToTimeRanges(
+TimeIntervals MP4SampleIndex::ConvertByteRangesToTimeRanges(
     const MediaByteRangeSet& aByteRanges) {
   if (aByteRanges == mLastCachedRanges) {
     return mLastBufferedRanges;
@@ -670,7 +673,7 @@ TimeIntervals Index::ConvertByteRangesToTimeRanges(
   return ranges;
 }
 
-uint64_t Index::GetEvictionOffset(Microseconds aTime) {
+uint64_t MP4SampleIndex::GetEvictionOffset(Microseconds aTime) {
   uint64_t offset = std::numeric_limits<uint64_t>::max();
   if (mMoofParser) {
     // We need to keep the whole moof if we're keeping any of it because the
@@ -696,11 +699,11 @@ uint64_t Index::GetEvictionOffset(Microseconds aTime) {
   return offset;
 }
 
-void Index::RegisterIterator(SampleIterator* aIterator) {
+void MP4SampleIndex::RegisterIterator(SampleIterator* aIterator) {
   mIterators.AppendElement(aIterator);
 }
 
-void Index::UnregisterIterator(SampleIterator* aIterator) {
+void MP4SampleIndex::UnregisterIterator(SampleIterator* aIterator) {
   mIterators.RemoveElement(aIterator);
 }
 
diff --git a/dom/media/mp4/Index.h b/dom/media/mp4/SampleIterator.h
similarity index 88%
rename from dom/media/mp4/Index.h
rename to dom/media/mp4/SampleIterator.h
index afd0c051af9b..bc90a41ec165 100644
--- a/dom/media/mp4/Index.h
+++ b/dom/media/mp4/SampleIterator.h
@@ -2,8 +2,8 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-#ifndef INDEX_H_
-#define INDEX_H_
+#ifndef DOM_MEDIA_MP4_SAMPLE_ITERATOR_H_
+#define DOM_MEDIA_MP4_SAMPLE_ITERATOR_H_
 
 #include "ByteStream.h"
 #include "MediaData.h"
@@ -15,18 +15,19 @@
 #include "TimeUnits.h"
 
 namespace mozilla {
+
+struct CencSampleEncryptionInfoEntry;
 class IndiceWrapper;
+class MP4SampleIndex;
 struct Sample;
-struct CencSampleEncryptionInfoEntry;
-
-class Index;
 
 typedef int64_t Microseconds;
 
 class SampleIterator {
  public:
-  explicit SampleIterator(Index* aIndex);
+  explicit SampleIterator(MP4SampleIndex* aIndex);
   ~SampleIterator();
+  bool HasNext();
   already_AddRefed<mozilla::MediaRawData> GetNext();
   void Seek(Microseconds aTime);
   Microseconds GetNextKeyframeTime();
@@ -48,15 +49,15 @@ class SampleIterator {
   Result<CryptoScheme, nsCString> GetEncryptionScheme();
 
   void Next();
-  RefPtr<Index> mIndex;
-  friend class Index;
+  RefPtr<MP4SampleIndex> mIndex;
+  friend class MP4SampleIndex;
   size_t mCurrentMoof;
   size_t mCurrentSample;
 };
 
-class Index {
+class MP4SampleIndex {
  public:
-  NS_INLINE_DECL_THREADSAFE_REFCOUNTING(Index)
+  NS_INLINE_DECL_THREADSAFE_REFCOUNTING(MP4SampleIndex)
 
   struct Indice {
     uint64_t start_offset;
@@ -99,8 +100,8 @@ class Index {
     MP4Interval<Microseconds> mTime;
   };
 
-  Index(const mozilla::IndiceWrapper& aIndices, ByteStream* aSource,
-        uint32_t aTrackId, bool aIsAudio);
+  MP4SampleIndex(const mozilla::IndiceWrapper& aIndices, ByteStream* aSource,
+                 uint32_t aTrackId, bool aIsAudio);
 
   void UpdateMoofIndex(const mozilla::MediaByteRangeSet& aByteRanges,
                        bool aCanEvict);
@@ -115,7 +116,7 @@ class Index {
   friend class SampleIterator;
 
  private:
-  ~Index();
+  ~MP4SampleIndex();
   void RegisterIterator(SampleIterator* aIterator);
   void UnregisterIterator(SampleIterator* aIterator);
 
diff --git a/dom/media/mp4/moz.build b/dom/media/mp4/moz.build
index cf93a172db60..48fce2a040cb 100644
--- a/dom/media/mp4/moz.build
+++ b/dom/media/mp4/moz.build
@@ -11,13 +11,13 @@ EXPORTS += [
     "BufferStream.h",
     "ByteStream.h",
     "DecoderData.h",
-    "Index.h",
     "MoofParser.h",
     "MP4Decoder.h",
     "MP4Demuxer.h",
     "MP4Interval.h",
     "MP4Metadata.h",
     "ResourceStream.h",
+    "SampleIterator.h",
     "SinfParser.h",
 ]
 
@@ -25,12 +25,12 @@ UNIFIED_SOURCES += [
     "Box.cpp",
     "BufferStream.cpp",
     "DecoderData.cpp",
-    "Index.cpp",
     "MoofParser.cpp",
     "MP4Decoder.cpp",
     "MP4Demuxer.cpp",
     "MP4Metadata.cpp",
     "ResourceStream.cpp",
+    "SampleIterator.cpp",
     "SinfParser.cpp",
 ]
 
diff --git a/image/DecoderFactory.cpp b/image/DecoderFactory.cpp
index 5004b93eae09..6070e16061bd 100644
--- a/image/DecoderFactory.cpp
+++ b/image/DecoderFactory.cpp
@@ -217,7 +217,7 @@ nsresult DecoderFactory::CreateAnimationDecoder(
   }
 
   MOZ_ASSERT(aType == DecoderType::GIF || aType == DecoderType::PNG ||
-                 aType == DecoderType::WEBP,
+                 aType == DecoderType::WEBP || aType == DecoderType::AVIF,
              "Calling CreateAnimationDecoder for non-animating DecoderType");
 
   // Create an anonymous decoder. Interaction with the SurfaceCache and the
@@ -272,7 +272,7 @@ already_AddRefed<Decoder> DecoderFactory::CloneAnimationDecoder(
   // rediscover it is animated).
   DecoderType type = aDecoder->GetType();
   MOZ_ASSERT(type == DecoderType::GIF || type == DecoderType::PNG ||
-                 type == DecoderType::WEBP,
+                 type == DecoderType::WEBP || type == DecoderType::AVIF,
              "Calling CloneAnimationDecoder for non-animating DecoderType");
 
   RefPtr<Decoder> decoder = GetDecoder(type, nullptr, /* aIsRedecode = */ true);
diff --git a/image/decoders/nsAVIFDecoder.cpp b/image/decoders/nsAVIFDecoder.cpp
index 248ce0a3c8e2..9d96717ba832 100644
--- a/image/decoders/nsAVIFDecoder.cpp
+++ b/image/decoders/nsAVIFDecoder.cpp
@@ -12,7 +12,6 @@
 
 #include "DAV1DDecoder.h"
 #include "gfxPlatform.h"
-#include "mozilla/gfx/Types.h"
 #include "YCbCrUtils.h"
 #include "libyuv.h"
 
@@ -59,9 +58,9 @@ static const LABELS_AVIF_YUV_COLOR_SPACE gColorSpaceLabel[] = {
     LABELS_AVIF_YUV_COLOR_SPACE::BT601, LABELS_AVIF_YUV_COLOR_SPACE::BT709,
     LABELS_AVIF_YUV_COLOR_SPACE::BT2020, LABELS_AVIF_YUV_COLOR_SPACE::identity};
 
-static MaybeIntSize GetImageSize(const Mp4parseAvifImage& image) {
+static MaybeIntSize GetImageSize(const Mp4parseAvifInfo& aInfo) {
   // Note this does not take cropping via CleanAperture (clap) into account
-  const struct Mp4parseImageSpatialExtents* ispe = image.spatial_extents;
+  const struct Mp4parseImageSpatialExtents* ispe = aInfo.spatial_extents;
 
   if (ispe) {
     // Decoder::PostSize takes int32_t, but ispe contains uint32_t
@@ -76,53 +75,18 @@ static MaybeIntSize GetImageSize(const Mp4parseAvifImage& image) {
   return Nothing();
 }
 
-// Translate the number of bits per channel into a single ColorDepth.
-// Return Nothing if the number of bits per channel is not uniform.
-static Maybe<uint8_t> BitsPerChannelToBitDepth(
-    const Mp4parseByteData& bits_per_channel) {
-  if (bits_per_channel.length == 0) {
-    return Nothing();
-  }
-
-  for (uintptr_t i = 1; i < bits_per_channel.length; ++i) {
-    if (bits_per_channel.data[i] != bits_per_channel.data[0]) {
-      // log mismatch
-      return Nothing();
-    }
-  }
-
-  return Some(bits_per_channel.data[0]);
-}
-
-static void RecordPixiTelemetry(Maybe<uint8_t>& pixiBitDepth,
-                                uint8_t aBitstreamBitDepth,
-                                const char* aItemName) {
-  if (pixiBitDepth.isNothing()) {
-    AccumulateCategorical(LABELS_AVIF_PIXI::absent);
-  } else if (pixiBitDepth == Some(aBitstreamBitDepth)) {
-    AccumulateCategorical(LABELS_AVIF_PIXI::valid);
-  } else {
-    MOZ_ASSERT(pixiBitDepth.isSome());
-    MOZ_LOG(sAVIFLog, LogLevel::Error,
-            ("%s item pixi bit depth (%hhu) doesn't match "
-             "bitstream (%hhu)",
-             aItemName, *pixiBitDepth, aBitstreamBitDepth));
-    AccumulateCategorical(LABELS_AVIF_PIXI::bitstream_mismatch);
-  }
-}
-
 // Translate the MIAF/HEIF-based orientation transforms (imir, irot) into
 // ImageLib's representation. Note that the interpretation of imir was reversed
 // Between HEIF (ISO 23008-12:2017) and ISO/IEC 23008-12:2017/DAmd 2. This is
 // handled by mp4parse. See mp4parse::read_imir for details.
-Orientation GetImageOrientation(const Mp4parseAvifImage& image) {
+Orientation GetImageOrientation(const Mp4parseAvifInfo& aInfo) {
   // Per MIAF (ISO/IEC 23000-22:2019) § 7.3.6.7
   //   These properties, if used, shall be indicated to be applied in the
   //   following order: clean aperture first, then rotation, then mirror.
   // The Orientation type does the same order, but opposite rotation direction
 
-  const Mp4parseIrot heifRot = image.image_rotation;
-  const Mp4parseImir* heifMir = image.image_mirror;
+  const Mp4parseIrot heifRot = aInfo.image_rotation;
+  const Mp4parseImir* heifMir = aInfo.image_mirror;
   Angle mozRot;
   Flip mozFlip;
 
@@ -203,147 +167,203 @@ Orientation GetImageOrientation(const Mp4parseAvifImage& image) {
            static_cast<int>(mozRot), static_cast<int>(mozFlip)));
   return Orientation{mozRot, mozFlip};
 }
+bool AVIFDecoderStream::ReadAt(int64_t offset, void* data, size_t size,
+                               size_t* bytes_read) {
+  size = std::min(size, size_t(mBuffer->length() - offset));
 
-class AVIFParser {
- public:
-  static Mp4parseStatus Create(const Mp4parseIo* aIo,
-                               UniquePtr<AVIFParser>& aParserOut) {
-    MOZ_ASSERT(aIo);
-    MOZ_ASSERT(!aParserOut);
+  if (size <= 0) {
+    return false;
+  }
 
-    UniquePtr<AVIFParser> p(new AVIFParser(aIo));
-    Mp4parseStatus status = p->Init();
+  memcpy(data, mBuffer->begin() + offset, size);
+  *bytes_read = size;
+  return true;
+}
 
-    if (status == MP4PARSE_STATUS_OK) {
-      MOZ_ASSERT(p->mParser);
-      aParserOut = std::move(p);
-    }
+bool AVIFDecoderStream::Length(int64_t* size) {
+  *size =
+      static_cast<int64_t>(std::min<uint64_t>(mBuffer->length(), INT64_MAX));
+  return true;
+}
 
-    return status;
+const uint8_t* AVIFDecoderStream::GetContiguousAccess(int64_t aOffset,
+                                                      size_t aSize) {
+  if (aOffset + aSize >= mBuffer->length()) {
+    return nullptr;
   }
 
-  ~AVIFParser() {
-    MOZ_LOG(sAVIFLog, LogLevel::Debug, ("Destroy AVIFParser=%p", this));
+  return mBuffer->begin() + aOffset;
+}
+
+AVIFParser::~AVIFParser() {
+  MOZ_LOG(sAVIFLog, LogLevel::Debug, ("Destroy AVIFParser=%p", this));
+}
+
+Mp4parseStatus AVIFParser::Create(const Mp4parseIo* aIo, ByteStream* aBuffer,
+                                  UniquePtr<AVIFParser>& aParserOut) {
+  MOZ_ASSERT(aIo);
+  MOZ_ASSERT(!aParserOut);
+
+  UniquePtr<AVIFParser> p(new AVIFParser(aIo));
+  Mp4parseStatus status = p->Init(aBuffer);
+
+  if (status == MP4PARSE_STATUS_OK) {
+    MOZ_ASSERT(p->mParser);
+    aParserOut = std::move(p);
   }
 
-  Mp4parseAvifImage* GetImage() {
-    MOZ_ASSERT(mParser);
+  return status;
+}
 
-    if (mAvifImage.isNothing()) {
-      mAvifImage.emplace();
-      Mp4parseStatus status =
-          mp4parse_avif_get_image(mParser.get(), mAvifImage.ptr());
-      MOZ_LOG(sAVIFLog, LogLevel::Debug,
-              ("[this=%p] mp4parse_avif_get_image -> %d; primary_item length: "
-               "%zu, alpha_item length: %zu",
-               this, status, mAvifImage->primary_image.coded_data.length,
-               mAvifImage->alpha_image.coded_data.length));
-      if (status != MP4PARSE_STATUS_OK) {
-        mAvifImage.reset();
-        return nullptr;
+nsAVIFDecoder::DecodeResult AVIFParser::GetImage(AVIFImage& aImage) {
+  MOZ_ASSERT(mParser);
+
+  // If the AVIF is animated, get next frame and yield if sequence is not done.
+  if (IsAnimated()) {
+    aImage.mColorImage = mColorSampleIter->GetNext();
+
+    if (!aImage.mColorImage) {
+      if (mFrameNum == 0) {
+        return AsVariant(nsAVIFDecoder::NonDecoderResult::NoSamples);
       }
+      return AsVariant(nsAVIFDecoder::NonDecoderResult::Complete);
+    }
+
+    aImage.mFrameNum = mFrameNum++;
+    int64_t durationMs =
+        aImage.mColorImage->mDuration.ToMicroseconds() / USECS_PER_MS;
+    aImage.mDuration = FrameTimeout::FromRawMilliseconds(
+        static_cast<int32_t>(std::min(durationMs, INT64_MAX)));
+
+    if (mAlphaSampleIter) {
+      aImage.mAlphaImage = mAlphaSampleIter->GetNext();
     }
-    return mAvifImage.ptr();
+
+    bool hasNext = mColorSampleIter->HasNext();
+    MOZ_ASSERT_IF(mAlphaSampleIter, hasNext == mAlphaSampleIter->HasNext());
+    if (!hasNext) {
+      return AsVariant(nsAVIFDecoder::NonDecoderResult::Complete);
+    }
+    return AsVariant(nsAVIFDecoder::NonDecoderResult::OutputAvailable);
   }
 
- private:
-  explicit AVIFParser(const Mp4parseIo* aIo) : mIo(aIo) {
-    MOZ_ASSERT(mIo);
-    MOZ_LOG(sAVIFLog, LogLevel::Debug,
-            ("Create AVIFParser=%p, image.avif.compliance_strictness: %d", this,
-             StaticPrefs::image_avif_compliance_strictness()));
+  if (!mInfo.has_primary_item) {
+    return AsVariant(nsAVIFDecoder::NonDecoderResult::NoSamples);
   }
 
-  Mp4parseStatus Init() {
-    MOZ_ASSERT(!mParser);
+  // If the AVIF is not animated, get the pitm image and return Complete.
+  Mp4parseAvifImage image = {};
+  Mp4parseStatus status = mp4parse_avif_get_image(mParser.get(), &image);
+  MOZ_LOG(sAVIFLog, LogLevel::Debug,
+          ("[this=%p] mp4parse_avif_get_image -> %d; primary_item length: "
+           "%zu, alpha_item length: %zu",
+           this, status, image.primary_image.length, image.alpha_image.length));
+  if (status != MP4PARSE_STATUS_OK) {
+    return AsVariant(status);
+  }
 
-    Mp4parseAvifParser* parser = nullptr;
-    Mp4parseStatus status =
-        mp4parse_avif_new(mIo,
-                          static_cast<enum Mp4parseStrictness>(
-                              StaticPrefs::image_avif_compliance_strictness()),
-                          &parser);
-    MOZ_LOG(sAVIFLog, LogLevel::Debug,
-            ("[this=%p] mp4parse_avif_new status: %d", this, status));
-    if (status == MP4PARSE_STATUS_OK) {
-      mParser.reset(parser);
+  MOZ_ASSERT(image.primary_image.data);
+  RefPtr<MediaRawData> colorImage =
+      new MediaRawData(image.primary_image.data, image.primary_image.length);
+  RefPtr<MediaRawData> alphaImage = nullptr;
+
+  if (image.alpha_image.length) {
+    alphaImage =
+        new MediaRawData(image.alpha_image.data, image.alpha_image.length);
+  }
+
+  aImage.mFrameNum = 0;
+  aImage.mDuration = FrameTimeout::Forever();
+  aImage.mColorImage = colorImage;
+  aImage.mAlphaImage = alphaImage;
+  return AsVariant(nsAVIFDecoder::NonDecoderResult::Complete);
+}
+
+AVIFParser::AVIFParser(const Mp4parseIo* aIo) : mIo(aIo) {
+  MOZ_ASSERT(mIo);
+  MOZ_LOG(sAVIFLog, LogLevel::Debug,
+          ("Create AVIFParser=%p, image.avif.compliance_strictness: %d", this,
+           StaticPrefs::image_avif_compliance_strictness()));
+}
+
+static Mp4parseStatus CreateSampleIterator(
+    Mp4parseAvifParser* aParser, ByteStream* aBuffer, uint32_t trackID,
+    UniquePtr<SampleIterator>& aIteratorOut) {
+  Mp4parseByteData data;
+  Mp4parseStatus rv = mp4parse_avif_get_indice_table(aParser, trackID, &data);
+  if (rv != MP4PARSE_STATUS_OK) {
+    return rv;
+  }
+
+  UniquePtr<IndiceWrapper> wrapper = MakeUnique<IndiceWrapper>(data);
+  RefPtr<MP4SampleIndex> index =
+      new MP4SampleIndex(*wrapper, aBuffer, trackID, false);
+  aIteratorOut = MakeUnique<SampleIterator>(index);
+  return MP4PARSE_STATUS_OK;
+}
+
+Mp4parseStatus AVIFParser::Init(ByteStream* aBuffer) {
+#define CHECK_MP4PARSE_STATUS(v)     \
+  do {                               \
+    if ((v) != MP4PARSE_STATUS_OK) { \
+      return v;                      \
+    }                                \
+  } while (false)
+
+  MOZ_ASSERT(!mParser);
+
+  Mp4parseAvifParser* parser = nullptr;
+  Mp4parseStatus status =
+      mp4parse_avif_new(mIo,
+                        static_cast<enum Mp4parseStrictness>(
+                            StaticPrefs::image_avif_compliance_strictness()),
+                        &parser);
+  MOZ_LOG(sAVIFLog, LogLevel::Debug,
+          ("[this=%p] mp4parse_avif_new status: %d", this, status));
+  CHECK_MP4PARSE_STATUS(status);
+  MOZ_ASSERT(parser);
+  mParser.reset(parser);
+
+  status = mp4parse_avif_get_info(mParser.get(), &mInfo);
+  CHECK_MP4PARSE_STATUS(status);
+
+  bool shouldAnimate = mInfo.has_sequence;
+
+  // Disable animation if the specified major brand is avif or avis is preffed
+  // off.
+  if (shouldAnimate) {
+    if (!StaticPrefs::image_avif_sequence_enabled()) {
+      shouldAnimate = false;
+      MOZ_LOG(sAVIFLog, LogLevel::Debug,
+              ("[this=%p] AVIF sequences disabled", this));
+    } else if (shouldAnimate &&
+               !StaticPrefs::
+                   image_avif_sequence_animate_avif_major_branded_images() &&
+               !memcmp(mInfo.major_brand, "avif", sizeof(mInfo.major_brand))) {
+      shouldAnimate = false;
+      MOZ_LOG(sAVIFLog, LogLevel::Debug,
+              ("[this=%p] AVIF prefers still image", this));
     }
-    return status;
   }
 
-  struct FreeAvifParser {
-    void operator()(Mp4parseAvifParser* aPtr) { mp4parse_avif_free(aPtr); }
-  };
+  if (shouldAnimate) {
+    status = CreateSampleIterator(parser, aBuffer, mInfo.color_track_id,
+                                  mColorSampleIter);
+    CHECK_MP4PARSE_STATUS(status);
+    MOZ_ASSERT(mColorSampleIter);
 
-  const Mp4parseIo* mIo;
-  UniquePtr<Mp4parseAvifParser, FreeAvifParser> mParser;
-  Maybe<Mp4parseAvifImage> mAvifImage;
-};
+    if (mInfo.alpha_track_id) {
+      status = CreateSampleIterator(parser, aBuffer, mInfo.alpha_track_id,
+                                    mAlphaSampleIter);
+      CHECK_MP4PARSE_STATUS(status);
+      MOZ_ASSERT(mAlphaSampleIter);
+    }
+  }
 
-// CICP values (either from the BMFF container or the AV1 sequence header) are
-// used to create the colorspace transform. CICP::MatrixCoefficients is only
-// stored for the sake of telemetry, since the relevant information for YUV ->
-// RGB conversion is stored in mYUVColorSpace.
-//
-// There are three potential sources of color information for an AVIF:
-// 1. ICC profile via a ColourInformationBox (colr) defined in [ISOBMFF]
-//    § 12.1.5 "Colour information" and [MIAF] § 7.3.6.4 "Colour information
-//    property"
-// 2. NCLX (AKA CICP see [ITU-T H.273]) values in the same ColourInformationBox
-//    which can have an ICC profile or NCLX values, not both).
-// 3. NCLX values in the AV1 bitstream
-//
-// The 'colr' box is optional, but there are always CICP values in the AV1
-// bitstream, so it is possible to have both. Per ISOBMFF § 12.1.5.1
-// > If colour information is supplied in both this box, and also in the
-// > video bitstream, this box takes precedence, and over-rides the
-// > information in the bitstream.
-//
-// If present, the ICC profile takes precedence over CICP values, but only
-// specifies the color space, not the matrix coefficients necessary to convert
-// YCbCr data (as most AVIF are encoded) to RGB. The matrix coefficients are
-// always derived from the CICP values for matrix_coefficients (and potentially
-// colour_primaries, but in that case only the CICP values for colour_primaries
-// will be used, not anything harvested from the ICC profile).
-//
-// If there is no ICC profile, the color space transform will be based on the
-// CICP values either from the 'colr' box, or if absent/unspecified, the
-// decoded AV1 sequence header.
-//
-// For values that are 2 (meaning unspecified) after trying both, the
-// fallback values are:
-// - CP:  1 (BT.709/sRGB)
-// - TC: 13 (sRGB)
-// - MC:  6 (BT.601)
-// - Range: Full
-//
-// Additional details here:
-// <https://github.com/AOMediaCodec/libavif/wiki/CICP#unspecified>. Note
-// that this contradicts the current version of [MIAF] § 7.3.6.4 which
-// specifies MC=1 (BT.709). This is revised in [MIAF DAMD2] and confirmed by
-// <https://github.com/AOMediaCodec/av1-avif/issues/77#issuecomment-676526097>
-//
-// The precedence for applying the various values and defaults in the event
-// no valid values are found are managed by the following functions.
-//
-// References:
-// [ISOBMFF]: ISO/IEC 14496-12:2020 <https://www.iso.org/standard/74428.html>
-// [MIAF]: ISO/IEC 23000-22:2019 <https://www.iso.org/standard/74417.html>
-// [MIAF DAMD2]: ISO/IEC 23000-22:2019/FDAmd 2
-// <https://www.iso.org/standard/81634.html>
-// [ITU-T H.273]: Rec. ITU-T H.273 (12/2016)
-//     <https://www.itu.int/rec/T-REC-H.273-201612-I/en>
-struct AVIFDecodedData : layers::PlanarYCbCrData {
-  CICP::ColourPrimaries mColourPrimaries = CICP::CP_UNSPECIFIED;
-  CICP::TransferCharacteristics mTransferCharacteristics = CICP::TC_UNSPECIFIED;
-  CICP::MatrixCoefficients mMatrixCoefficients = CICP::MC_UNSPECIFIED;
-
-  void SetCicpValues(
-      const Mp4parseNclxColourInformation* aNclx,
-      const CICP::ColourPrimaries aAv1ColourPrimaries,
-      const CICP::TransferCharacteristics aAv1TransferCharacteristics,
-      const CICP::MatrixCoefficients aAv1MatrixCoefficients);
-};
+  return status;
+}
+
+bool AVIFParser::IsAnimated() const { return !!mColorSampleIter; }
 
 // The gfx::YUVColorSpace value is only used in the conversion from YUV -> RGB.
 // Typically this comes directly from the CICP matrix_coefficients value, but
@@ -382,9 +402,9 @@ static gfx::ColorRange GetAVIFColorRange(
 
 void AVIFDecodedData::SetCicpValues(
     const Mp4parseNclxColourInformation* aNclx,
-    const CICP::ColourPrimaries aAv1ColourPrimaries,
-    const CICP::TransferCharacteristics aAv1TransferCharacteristics,
-    const CICP::MatrixCoefficients aAv1MatrixCoefficients) {
+    const gfx::CICP::ColourPrimaries aAv1ColourPrimaries,
+    const gfx::CICP::TransferCharacteristics aAv1TransferCharacteristics,
+    const gfx::CICP::MatrixCoefficients aAv1MatrixCoefficients) {
   auto cp = CICP::ColourPrimaries::CP_UNSPECIFIED;
   auto tc = CICP::TransferCharacteristics::TC_UNSPECIFIED;
   auto mc = CICP::MatrixCoefficients::MC_UNSPECIFIED;
@@ -465,101 +485,56 @@ void AVIFDecodedData::SetCicpValues(
   mMatrixCoefficients = mc;
 }
 
-// An interface to do decode and get the decoded data
-class AVIFDecoderInterface {
- public:
-  using Dav1dResult = nsAVIFDecoder::Dav1dResult;
-  using NonAOMCodecError = nsAVIFDecoder::NonAOMCodecError;
-  using AOMResult = nsAVIFDecoder::AOMResult;
-  using NonDecoderResult = nsAVIFDecoder::NonDecoderResult;
-  using DecodeResult = nsAVIFDecoder::DecodeResult;
-
-  virtual ~AVIFDecoderInterface() = default;
-
-  // Set the mDecodedData if Decode() succeeds
-  virtual DecodeResult Decode(bool aIsMetadataDecode,
-                              const Mp4parseAvifImage& parsedImg) = 0;
-  // Must be called after Decode() succeeds
-  AVIFDecodedData& GetDecodedData() {
-    MOZ_ASSERT(mDecodedData.isSome());
-    return mDecodedData.ref();
-  }
-
- protected:
-  explicit AVIFDecoderInterface(UniquePtr<AVIFParser>&& aParser)
-      : mParser(std::move(aParser)) {
-    MOZ_ASSERT(mParser);
-  }
-
-  inline static bool IsDecodeSuccess(const DecodeResult& aResult) {
-    return nsAVIFDecoder::IsDecodeSuccess(aResult);
-  }
-
-  UniquePtr<AVIFParser> mParser;
-
-  // The mDecodedData is valid after Decode() succeeds
-  Maybe<AVIFDecodedData> mDecodedData;
-};
-
 class Dav1dDecoder final : AVIFDecoderInterface {
  public:
   ~Dav1dDecoder() {
     MOZ_LOG(sAVIFLog, LogLevel::Verbose, ("Destroy Dav1dDecoder=%p", this));
 
-    if (mPicture) {
-      dav1d_picture_unref(mPicture.take().ptr());
+    if (mColorContext) {
+      dav1d_close(&mColorContext);
+      MOZ_ASSERT(!mColorContext);
     }
 
-    if (mAlphaPlane) {
-      dav1d_picture_unref(mAlphaPlane.take().ptr());
-    }
-
-    if (mContext) {
-      dav1d_close(&mContext);
-      MOZ_ASSERT(!mContext);
+    if (mAlphaContext) {
+      dav1d_close(&mAlphaContext);
+      MOZ_ASSERT(!mAlphaContext);
     }
   }
 
-  static DecodeResult Create(UniquePtr<AVIFParser>&& aParser,
-                             UniquePtr<AVIFDecoderInterface>& aDecoder) {
-    UniquePtr<Dav1dDecoder> d(new Dav1dDecoder(std::move(aParser)));
-    Dav1dResult r = d->Init();
+  static DecodeResult Create(UniquePtr<AVIFDecoderInterface>& aDecoder,
+                             bool aHasAlpha) {
+    UniquePtr<Dav1dDecoder> d(new Dav1dDecoder());
+    Dav1dResult r = d->Init(aHasAlpha);
     if (r == 0) {
-      MOZ_ASSERT(d->mContext);
       aDecoder.reset(d.release());
     }
     return AsVariant(r);
   }
 
-  DecodeResult Decode(bool aIsMetadataDecode,
-                      const Mp4parseAvifImage& parsedImg) override {
-    MOZ_ASSERT(mParser);
-    MOZ_ASSERT(mContext);
-    MOZ_ASSERT(mPicture.isNothing());
-    MOZ_ASSERT(mDecodedData.isNothing());
-
-    MOZ_LOG(sAVIFLog, LogLevel::Verbose, ("[this=%p] Beginning Decode", this));
+  DecodeResult Decode(bool aIsMetadataDecode, const Mp4parseAvifInfo& aAVIFInfo,
+                      const AVIFImage& aSamples) override {
+    MOZ_ASSERT(mColorContext);
+    MOZ_ASSERT(!mDecodedData);
+    MOZ_ASSERT(aSamples.mColorImage);
 
-    if (!parsedImg.primary_image.coded_data.data ||
-        !parsedImg.primary_image.coded_data.length) {
-      return AsVariant(NonDecoderResult::NoPrimaryItem);
-    }
+    MOZ_LOG(sAVIFLog, LogLevel::Verbose, ("[this=%p] Decoding color", this));
 
-    mPicture.emplace();
-    Dav1dResult r = GetPicture(parsedImg.primary_image.coded_data,
-                               mPicture.ptr(), aIsMetadataDecode);
+    OwnedDav1dPicture colorPic = OwnedDav1dPicture(new Dav1dPicture());
+    OwnedDav1dPicture alphaPic = nullptr;
+    Dav1dResult r = GetPicture(*mColorContext, *aSamples.mColorImage,
+                               colorPic.get(), aIsMetadataDecode);
     if (r != 0) {
-      mPicture.reset();
       return AsVariant(r);
     }
 
-    if (parsedImg.alpha_image.coded_data.data &&
-        parsedImg.alpha_image.coded_data.length) {
-      mAlphaPlane.emplace();
-      Dav1dResult r = GetPicture(parsedImg.alpha_image.coded_data,
-                                 mAlphaPlane.ptr(), aIsMetadataDecode);
+    if (aSamples.mAlphaImage) {
+      MOZ_ASSERT(mAlphaContext);
+      MOZ_LOG(sAVIFLog, LogLevel::Verbose, ("[this=%p] Decoding alpha", this));
+
+      alphaPic = OwnedDav1dPicture(new Dav1dPicture());
+      Dav1dResult r = GetPicture(*mAlphaContext, *aSamples.mAlphaImage,
+                                 alphaPic.get(), aIsMetadataDecode);
       if (r != 0) {
-        mAlphaPlane.reset();
         return AsVariant(r);
       }
 
@@ -567,27 +542,27 @@ class Dav1dDecoder final : AVIFDecoderInterface {
       // https://aomediacodec.github.io/av1-avif/#auxiliary-images: An AV1
       // Alpha Image Item […] shall be encoded with the same bit depth as the
       // associated master AV1 Image Item
-      if (mPicture->p.bpc != mAlphaPlane->p.bpc) {
+      if (colorPic->p.bpc != alphaPic->p.bpc) {
         return AsVariant(NonDecoderResult::AlphaYColorDepthMismatch);
       }
     }
 
-    MOZ_ASSERT_IF(mAlphaPlane.isNothing(), !parsedImg.premultiplied_alpha);
-    mDecodedData.emplace(Dav1dPictureToDecodedData(
-        parsedImg.nclx_colour_information, mPicture.ptr(),
-        mAlphaPlane.ptrOr(nullptr), parsedImg.premultiplied_alpha));
+    MOZ_ASSERT_IF(!alphaPic, !aAVIFInfo.premultiplied_alpha);
+    mDecodedData = Dav1dPictureToDecodedData(
+        aAVIFInfo.nclx_colour_information, std::move(colorPic),
+        std::move(alphaPic), aAVIFInfo.premultiplied_alpha);
 
     return AsVariant(r);
   }
 
  private:
-  explicit Dav1dDecoder(UniquePtr<AVIFParser>&& aParser)
-      : AVIFDecoderInterface(std::move(aParser)) {
+  explicit Dav1dDecoder() {
     MOZ_LOG(sAVIFLog, LogLevel::Verbose, ("Create Dav1dDecoder=%p", this));
   }
 
-  Dav1dResult Init() {
-    MOZ_ASSERT(!mContext);
+  Dav1dResult Init(bool aHasAlpha) {
+    MOZ_ASSERT(!mColorContext);
+    MOZ_ASSERT(!mAlphaContext);
 
     Dav1dSettings settings;
     dav1d_default_settings(&settings);
@@ -595,39 +570,54 @@ class Dav1dDecoder final : AVIFDecoderInterface {
     settings.max_frame_delay = 1;
     // TODO: tune settings a la DAV1DDecoder for AV1 (Bug 1681816)
 
-    return dav1d_open(&mContext, &settings);
+    Dav1dResult r = dav1d_open(&mColorContext, &settings);
+    if (r != 0) {
+      return r;
+    }
+    MOZ_ASSERT(mColorContext);
+
+    if (aHasAlpha) {
+      r = dav1d_open(&mAlphaContext, &settings);
+      if (r != 0) {
+        return r;
+      }
+      MOZ_ASSERT(mAlphaContext);
+    }
+
+    return 0;
   }
 
-  Dav1dResult GetPicture(const Mp4parseByteData& aBytes, Dav1dPicture* aPicture,
-                         bool aIsMetadataDecode) {
-    MOZ_ASSERT(mContext);
+  static Dav1dResult GetPicture(Dav1dContext& aContext,
+                                const MediaRawData& aBytes,
+                                Dav1dPicture* aPicture,
+                                bool aIsMetadataDecode) {
     MOZ_ASSERT(aPicture);
 
     Dav1dData dav1dData;
-    Dav1dResult r = dav1d_data_wrap(&dav1dData, aBytes.data, aBytes.length,
+    Dav1dResult r = dav1d_data_wrap(&dav1dData, aBytes.Data(), aBytes.Size(),
                                     Dav1dFreeCallback_s, nullptr);
 
-    MOZ_LOG(sAVIFLog, r == 0 ? LogLevel::Verbose : LogLevel::Error,
-            ("[this=%p] dav1d_data_wrap(%p, %zu) -> %d", this, dav1dData.data,
-             dav1dData.sz, r));
+    MOZ_LOG(
+        sAVIFLog, r == 0 ? LogLevel::Verbose : LogLevel::Error,
+        ("dav1d_data_wrap(%p, %zu) -> %d", dav1dData.data, dav1dData.sz, r));
 
     if (r != 0) {
       return r;
     }
 
-    r = dav1d_send_data(mContext, &dav1dData);
+    r = dav1d_send_data(&aContext, &dav1dData);
 
     MOZ_LOG(sAVIFLog, r == 0 ? LogLevel::Debug : LogLevel::Error,
-            ("[this=%p] dav1d_send_data -> %d", this, r));
+            ("dav1d_send_data -> %d", r));
 
     if (r != 0) {
       return r;
     }
 
-    r = dav1d_get_picture(mContext, aPicture);
+    r = dav1d_get_picture(&aContext, aPicture);
 
     MOZ_LOG(sAVIFLog, r == 0 ? LogLevel::Debug : LogLevel::Error,
-            ("[this=%p] dav1d_get_picture -> %d", this, r));
+            ("dav1d_get_picture -> %d", r));
 
     // When bug 1682662 is fixed, revise this assert and subsequent condition
     MOZ_ASSERT(aIsMetadataDecode || r == 0);
@@ -655,54 +645,123 @@ class Dav1dDecoder final : AVIFDecoderInterface {
     // nothing here.
   }
 
-  static AVIFDecodedData Dav1dPictureToDecodedData(
-      const Mp4parseNclxColourInformation* aNclx, Dav1dPicture* aPicture,
-      Dav1dPicture* aAlphaPlane, bool aPremultipliedAlpha);
-
-  Dav1dContext* mContext = nullptr;
+  static UniquePtr<AVIFDecodedData> Dav1dPictureToDecodedData(
+      const Mp4parseNclxColourInformation* aNclx, OwnedDav1dPicture aPicture,
+      OwnedDav1dPicture aAlphaPlane, bool aPremultipliedAlpha);
 
-  // The pictures are allocated once Decode() succeeds and will be deallocated
-  // when Dav1dDecoder is destroyed
-  Maybe<Dav1dPicture> mPicture;
-  Maybe<Dav1dPicture> mAlphaPlane;
+  Dav1dContext* mColorContext = nullptr;
+  Dav1dContext* mAlphaContext = nullptr;
 };
 
+OwnedAOMImage::OwnedAOMImage() {
+  MOZ_LOG(sAVIFLog, LogLevel::Verbose, ("Create OwnedAOMImage=%p", this));
+}
+
+OwnedAOMImage::~OwnedAOMImage() {
+  MOZ_LOG(sAVIFLog, LogLevel::Verbose, ("Destroy OwnedAOMImage=%p", this));
+}
+
+bool OwnedAOMImage::CloneFrom(aom_image_t* aImage, bool aIsAlpha) {
+  MOZ_ASSERT(aImage);
+  MOZ_ASSERT(!mImage);
+  MOZ_ASSERT(!mBuffer);
+
+  uint8_t* srcY = aImage->planes[AOM_PLANE_Y];
+  int yStride = aImage->stride[AOM_PLANE_Y];
+  int yHeight = aom_img_plane_height(aImage, AOM_PLANE_Y);
+  size_t yBufSize = yStride * yHeight;
+
+  // If aImage is alpha plane. The data is located in Y channel.
+  if (aIsAlpha) {
+    mBuffer = MakeUnique<uint8_t[]>(yBufSize);
+    if (!mBuffer) {
+      return false;
+    }
+    uint8_t* destY = mBuffer.get();
+    memcpy(destY, srcY, yBufSize);
+    mImage.emplace(*aImage);
+    mImage->planes[AOM_PLANE_Y] = destY;
+
+    return true;
+  }
+
+  uint8_t* srcCb = aImage->planes[AOM_PLANE_U];
+  int cbStride = aImage->stride[AOM_PLANE_U];
+  int cbHeight = aom_img_plane_height(aImage, AOM_PLANE_U);
+  size_t cbBufSize = cbStride * cbHeight;
+
+  uint8_t* srcCr = aImage->planes[AOM_PLANE_V];
+  int crStride = aImage->stride[AOM_PLANE_V];
+  int crHeight = aom_img_plane_height(aImage, AOM_PLANE_V);
+  size_t crBufSize = crStride * crHeight;
+
+  mBuffer = MakeUnique<uint8_t[]>(yBufSize + cbBufSize + crBufSize);
+  if (!mBuffer) {
+    return false;
+  }
+
+  uint8_t* destY = mBuffer.get();
+  uint8_t* destCb = destY + yBufSize;
+  uint8_t* destCr = destCb + cbBufSize;
+
+  memcpy(destY, srcY, yBufSize);
+  memcpy(destCb, srcCb, cbBufSize);
+  memcpy(destCr, srcCr, crBufSize);
+
+  mImage.emplace(*aImage);
+  mImage->planes[AOM_PLANE_Y] = destY;
+  mImage->planes[AOM_PLANE_U] = destCb;
+  mImage->planes[AOM_PLANE_V] = destCr;
+
+  return true;
+}
+
+/* static */
+OwnedAOMImage* OwnedAOMImage::CopyFrom(aom_image_t* aImage, bool aIsAlpha) {
+  MOZ_ASSERT(aImage);
+  UniquePtr<OwnedAOMImage> img(new OwnedAOMImage());
+  if (!img->CloneFrom(aImage, aIsAlpha)) {
+    return nullptr;
+  }
+  return img.release();
+}
+
 class AOMDecoder final : AVIFDecoderInterface {
  public:
   ~AOMDecoder() {
     MOZ_LOG(sAVIFLog, LogLevel::Verbose, ("Destroy AOMDecoder=%p", this));
 
-    if (mContext.isSome()) {
-      aom_codec_err_t r = aom_codec_destroy(mContext.ptr());
+    if (mColorContext.isSome()) {
+      aom_codec_err_t r = aom_codec_destroy(mColorContext.ptr());
+      MOZ_LOG(sAVIFLog, LogLevel::Debug,
+              ("[this=%p] aom_codec_destroy -> %d", this, r));
+    }
+
+    if (mAlphaContext.isSome()) {
+      aom_codec_err_t r = aom_codec_destroy(mAlphaContext.ptr());
       MOZ_LOG(sAVIFLog, LogLevel::Debug,
               ("[this=%p] aom_codec_destroy -> %d", this, r));
     }
   }
 
-  static DecodeResult Create(UniquePtr<AVIFParser>&& aParser,
-                             UniquePtr<AVIFDecoderInterface>& aDecoder) {
-    UniquePtr<AOMDecoder> d(new AOMDecoder(std::move(aParser)));
-    aom_codec_err_t e = d->Init();
+  static DecodeResult Create(UniquePtr<AVIFDecoderInterface>& aDecoder,
+                             bool aHasAlpha) {
+    UniquePtr<AOMDecoder> d(new AOMDecoder());
+    aom_codec_err_t e = d->Init(aHasAlpha);
     if (e == AOM_CODEC_OK) {
-      MOZ_ASSERT(d->mContext);
       aDecoder.reset(d.release());
     }
     return AsVariant(AOMResult(e));
   }
 
-  DecodeResult Decode(bool aIsMetadataDecode,
-                      const Mp4parseAvifImage& parsedImg) override {
-    MOZ_ASSERT(mParser);
-    MOZ_ASSERT(mContext.isSome());
-    MOZ_ASSERT(mDecodedData.isNothing());
-
-    if (!parsedImg.primary_image.coded_data.data ||
-        !parsedImg.primary_image.coded_data.length) {
-      return AsVariant(NonDecoderResult::NoPrimaryItem);
-    }
+  DecodeResult Decode(bool aIsMetadataDecode, const Mp4parseAvifInfo& aAVIFInfo,
+                      const AVIFImage& aSamples) override {
+    MOZ_ASSERT(mColorContext.isSome());
+    MOZ_ASSERT(!mDecodedData);
+    MOZ_ASSERT(aSamples.mColorImage);
 
     aom_image_t* aomImg = nullptr;
-    DecodeResult r = GetImage(parsedImg.primary_image.coded_data, &aomImg,
+    DecodeResult r = GetImage(*mColorContext, *aSamples.mColorImage, &aomImg,
                               aIsMetadataDecode);
     if (!IsDecodeSuccess(r)) {
       return r;
@@ -719,11 +778,12 @@ class AOMDecoder final : AVIFDecoderInterface {
     }
     mOwnedImage.reset(clonedImg);
 
-    if (parsedImg.alpha_image.coded_data.data &&
-        parsedImg.alpha_image.coded_data.length) {
+    if (aSamples.mAlphaImage) {
+      MOZ_ASSERT(mAlphaContext.isSome());
+
       aom_image_t* alphaImg = nullptr;
-      DecodeResult r = GetImage(parsedImg.alpha_image.coded_data, &alphaImg,
-                                aIsMetadataDecode);
+      DecodeResult r = GetImage(*mAlphaContext, *aSamples.mAlphaImage,
+                                &alphaImg, aIsMetadataDecode);
       if (!IsDecodeSuccess(r)) {
         return r;
       }
@@ -746,49 +806,65 @@ class AOMDecoder final : AVIFDecoderInterface {
       }
     }
 
-    MOZ_ASSERT_IF(!mOwnedAlphaPlane, !parsedImg.premultiplied_alpha);
-    mDecodedData.emplace(AOMImageToToDecodedData(
-        parsedImg.nclx_colour_information, mOwnedImage->GetImage(),
-        mOwnedAlphaPlane ? mOwnedAlphaPlane->GetImage() : nullptr,
-        parsedImg.premultiplied_alpha));
+    MOZ_ASSERT_IF(!mOwnedAlphaPlane, !aAVIFInfo.premultiplied_alpha);
+    mDecodedData = AOMImageToToDecodedData(
+        aAVIFInfo.nclx_colour_information, std::move(mOwnedImage),
+        std::move(mOwnedAlphaPlane), aAVIFInfo.premultiplied_alpha);
 
     return r;
   }
 
  private:
-  explicit AOMDecoder(UniquePtr<AVIFParser>&& aParser)
-      : AVIFDecoderInterface(std::move(aParser)) {
+  explicit AOMDecoder() {
     MOZ_LOG(sAVIFLog, LogLevel::Verbose, ("Create AOMDecoder=%p", this));
   }
 
-  aom_codec_err_t Init() {
-    MOZ_ASSERT(mContext.isNothing());
+  aom_codec_err_t Init(bool aHasAlpha) {
+    MOZ_ASSERT(mColorContext.isNothing());
+    MOZ_ASSERT(mAlphaContext.isNothing());
 
     aom_codec_iface_t* iface = aom_codec_av1_dx();
-    mContext.emplace();
+
+    // Init color decoder context
+    mColorContext.emplace();
     aom_codec_err_t r = aom_codec_dec_init(
-        mContext.ptr(), iface, /* cfg = */ nullptr, /* flags = */ 0);
+        mColorContext.ptr(), iface, /* cfg = */ nullptr, /* flags = */ 0);
 
     MOZ_LOG(sAVIFLog, r == AOM_CODEC_OK ? LogLevel::Verbose : LogLevel::Error,
-            ("[this=%p] aom_codec_dec_init -> %d, name = %s", this, r,
-             mContext->name));
+            ("[this=%p] color decoder: aom_codec_dec_init -> %d, name = %s",
+             this, r, mColorContext->name));
 
     if (r != AOM_CODEC_OK) {
-      mContext.reset();
+      mColorContext.reset();
+      return r;
+    }
+
+    if (aHasAlpha) {
+      // Init alpha decoder context
+      mAlphaContext.emplace();
+      aom_codec_err_t r = aom_codec_dec_init(
+          mAlphaContext.ptr(), iface, /* cfg = */ nullptr, /* flags = */ 0);
+
+      MOZ_LOG(sAVIFLog, r == AOM_CODEC_OK ? LogLevel::Verbose : LogLevel::Error,
+              ("[this=%p] color decoder: aom_codec_dec_init -> %d, name = %s",
+               this, r, mAlphaContext->name));
+
+      if (r != AOM_CODEC_OK) {
+        mAlphaContext.reset();
+      }
     }
 
     return r;
   }
 
-  DecodeResult GetImage(const Mp4parseByteData& aData, aom_image_t** aImage,
-                        bool aIsMetadataDecode) {
-    MOZ_ASSERT(mContext.isSome());
-
+  static DecodeResult GetImage(aom_codec_ctx_t& aContext,
+                               const MediaRawData& aData, aom_image_t** aImage,
+                               bool aIsMetadataDecode) {
     aom_codec_err_t r =
-        aom_codec_decode(mContext.ptr(), aData.data, aData.length, nullptr);
+        aom_codec_decode(&aContext, aData.Data(), aData.Size(), nullptr);
 
     MOZ_LOG(sAVIFLog, r == AOM_CODEC_OK ? LogLevel::Verbose : LogLevel::Error,
-            ("[this=%p] aom_codec_decode -> %d", this, r));
+            ("aom_codec_decode -> %d", r));
 
     if (aIsMetadataDecode) {
       switch (r) {
@@ -830,10 +906,10 @@ class AOMDecoder final : AVIFDecoderInterface {
     }
 
     aom_codec_iter_t iter = nullptr;
-    aom_image_t* img = aom_codec_get_frame(mContext.ptr(), &iter);
+    aom_image_t* img = aom_codec_get_frame(&aContext, &iter);
 
     MOZ_LOG(sAVIFLog, img == nullptr ? LogLevel::Error : LogLevel::Verbose,
-            ("[this=%p] aom_codec_get_frame -> %p", this, img));
+            ("aom_codec_get_frame -> %p", img));
 
     if (img == nullptr) {
       return AsVariant(AOMResult(NonAOMCodecError::NoFrame));
@@ -844,9 +920,9 @@ class AOMDecoder final : AVIFDecoderInterface {
 
     if (!decoded_height.isValid() || !decoded_width.isValid()) {
       MOZ_LOG(sAVIFLog, LogLevel::Debug,
-              ("[this=%p] image dimensions can't be stored in int: d_w: %u, "
+              ("image dimensions can't be stored in int: d_w: %u, "
                "d_h: %u",
-               this, img->d_w, img->d_h));
+               img->d_w, img->d_h));
       return AsVariant(AOMResult(NonAOMCodecError::SizeOverflow));
     }
 
@@ -854,123 +930,46 @@ class AOMDecoder final : AVIFDecoderInterface {
     return AsVariant(AOMResult(r));
   }
 
-  class OwnedAOMImage {
-   public:
-    ~OwnedAOMImage() {
-      MOZ_LOG(sAVIFLog, LogLevel::Verbose, ("Destroy OwnedAOMImage=%p", this));
-    };
-
-    static OwnedAOMImage* CopyFrom(aom_image_t* aImage, bool aIsAlpha) {
-      MOZ_ASSERT(aImage);
-      UniquePtr<OwnedAOMImage> img(new OwnedAOMImage());
-      if (!img->CloneFrom(aImage, aIsAlpha)) {
-        return nullptr;
-      }
-      return img.release();
-    }
-
-    aom_image_t* GetImage() { return mImage.isSome() ? mImage.ptr() : nullptr; }
-
-   private:
-    OwnedAOMImage() {
-      MOZ_LOG(sAVIFLog, LogLevel::Verbose, ("Create OwnedAOMImage=%p", this));
-    };
-
-    bool CloneFrom(aom_image_t* aImage, bool aIsAlpha) {
-      MOZ_ASSERT(aImage);
-      MOZ_ASSERT(!mImage);
-      MOZ_ASSERT(!mBuffer);
-
-      uint8_t* srcY = aImage->planes[AOM_PLANE_Y];
-      int yStride = aImage->stride[AOM_PLANE_Y];
-      int yHeight = aom_img_plane_height(aImage, AOM_PLANE_Y);
-      size_t yBufSize = yStride * yHeight;
-
-      // If aImage is alpha plane. The data is located in Y channel.
-      if (aIsAlpha) {
-        mBuffer = MakeUnique<uint8_t[]>(yBufSize);
-        if (!mBuffer) {
-          return false;
-        }
-        uint8_t* destY = mBuffer.get();
-        memcpy(destY, srcY, yBufSize);
-        mImage.emplace(*aImage);
-        mImage->planes[AOM_PLANE_Y] = destY;
-
-        return true;
-      }
-
-      uint8_t* srcCb = aImage->planes[AOM_PLANE_U];
-      int cbStride = aImage->stride[AOM_PLANE_U];
-      int cbHeight = aom_img_plane_height(aImage, AOM_PLANE_U);
-      size_t cbBufSize = cbStride * cbHeight;
-
-      uint8_t* srcCr = aImage->planes[AOM_PLANE_V];
-      int crStride = aImage->stride[AOM_PLANE_V];
-      int crHeight = aom_img_plane_height(aImage, AOM_PLANE_V);
-      size_t crBufSize = crStride * crHeight;
-
-      mBuffer = MakeUnique<uint8_t[]>(yBufSize + cbBufSize + crBufSize);
-      if (!mBuffer) {
-        return false;
-      }
-
-      uint8_t* destY = mBuffer.get();
-      uint8_t* destCb = destY + yBufSize;
-      uint8_t* destCr = destCb + cbBufSize;
-
-      memcpy(destY, srcY, yBufSize);
-      memcpy(destCb, srcCb, cbBufSize);
-      memcpy(destCr, srcCr, crBufSize);
-
-      mImage.emplace(*aImage);
-      mImage->planes[AOM_PLANE_Y] = destY;
-      mImage->planes[AOM_PLANE_U] = destCb;
-      mImage->planes[AOM_PLANE_V] = destCr;
-
-      return true;
-    }
-
-    // The mImage's planes are referenced to mBuffer
-    Maybe<aom_image_t> mImage;
-    UniquePtr<uint8_t[]> mBuffer;
-  };
-
-  static AVIFDecodedData AOMImageToToDecodedData(
-      const Mp4parseNclxColourInformation* aNclx, aom_image_t* aImage,
-      aom_image_t* aAlphaPlane, bool aPremultipliedAlpha);
+  static UniquePtr<AVIFDecodedData> AOMImageToToDecodedData(
+      const Mp4parseNclxColourInformation* aNclx,
+      UniquePtr<OwnedAOMImage> aImage, UniquePtr<OwnedAOMImage> aAlphaPlane,
+      bool aPremultipliedAlpha);
 
-  Maybe<aom_codec_ctx_t> mContext;
+  Maybe<aom_codec_ctx_t> mColorContext;
+  Maybe<aom_codec_ctx_t> mAlphaContext;
   UniquePtr<OwnedAOMImage> mOwnedImage;
   UniquePtr<OwnedAOMImage> mOwnedAlphaPlane;
 };
 
 /* static */
-AVIFDecodedData Dav1dDecoder::Dav1dPictureToDecodedData(
-    const Mp4parseNclxColourInformation* aNclx, Dav1dPicture* aPicture,
-    Dav1dPicture* aAlphaPlane, bool aPremultipliedAlpha) {
+UniquePtr<AVIFDecodedData> Dav1dDecoder::Dav1dPictureToDecodedData(
+    const Mp4parseNclxColourInformation* aNclx, OwnedDav1dPicture aPicture,
+    OwnedDav1dPicture aAlphaPlane, bool aPremultipliedAlpha) {
   MOZ_ASSERT(aPicture);
 
   static_assert(std::is_same<int, decltype(aPicture->p.w)>::value);
   static_assert(std::is_same<int, decltype(aPicture->p.h)>::value);
 
-  AVIFDecodedData data;
+  UniquePtr<AVIFDecodedData> data = MakeUnique<AVIFDecodedData>();
 
-  data.mYChannel = static_cast<uint8_t*>(aPicture->data[0]);
-  data.mYStride = aPicture->stride[0];
-  data.mYSkip = aPicture->stride[0] - aPicture->p.w;
-  data.mCbChannel = static_cast<uint8_t*>(aPicture->data[1]);
-  data.mCrChannel = static_cast<uint8_t*>(aPicture->data[2]);
-  data.mCbCrStride = aPicture->stride[1];
+  data->mRenderRect = {0, 0, aPicture->frame_hdr->render_width,
+                       aPicture->frame_hdr->render_height};
+
+  data->mYChannel = static_cast<uint8_t*>(aPicture->data[0]);
+  data->mYStride = aPicture->stride[0];
+  data->mYSkip = aPicture->stride[0] - aPicture->p.w;
+  data->mCbChannel = static_cast<uint8_t*>(aPicture->data[1]);
+  data->mCrChannel = static_cast<uint8_t*>(aPicture->data[2]);
+  data->mCbCrStride = aPicture->stride[1];
 
   switch (aPicture->p.layout) {
     case DAV1D_PIXEL_LAYOUT_I400:  // Monochrome, so no Cb or Cr channels
       break;
     case DAV1D_PIXEL_LAYOUT_I420:
-      data.mChromaSubsampling = ChromaSubsampling::HALF_WIDTH_AND_HEIGHT;
+      data->mChromaSubsampling = ChromaSubsampling::HALF_WIDTH_AND_HEIGHT;
       break;
     case DAV1D_PIXEL_LAYOUT_I422:
-      data.mChromaSubsampling = ChromaSubsampling::HALF_WIDTH;
+      data->mChromaSubsampling = ChromaSubsampling::HALF_WIDTH;
       break;
     case DAV1D_PIXEL_LAYOUT_I444:
       break;
@@ -978,15 +977,15 @@ AVIFDecodedData Dav1dDecoder::Dav1dPictureToDecodedData(
       MOZ_ASSERT_UNREACHABLE("Unknown pixel layout");
   }
 
-  data.mCbSkip = aPicture->stride[1] - aPicture->p.w;
-  data.mCrSkip = aPicture->stride[1] - aPicture->p.w;
-  data.mPictureRect = IntRect(0, 0, aPicture->p.w, aPicture->p.h);
-  data.mStereoMode = StereoMode::MONO;
-  data.mColorDepth = ColorDepthForBitDepth(aPicture->p.bpc);
+  data->mCbSkip = aPicture->stride[1] - aPicture->p.w;
+  data->mCrSkip = aPicture->stride[1] - aPicture->p.w;
+  data->mPictureRect = IntRect(0, 0, aPicture->p.w, aPicture->p.h);
+  data->mStereoMode = StereoMode::MONO;
+  data->mColorDepth = ColorDepthForBitDepth(aPicture->p.bpc);
 
-  MOZ_ASSERT(aPicture->p.bpc == BitDepthForColorDepth(data.mColorDepth));
+  MOZ_ASSERT(aPicture->p.bpc == BitDepthForColorDepth(data->mColorDepth));
 
-  data.mYUVColorSpace = GetAVIFColorSpace(aNclx, [=]() {
+  data->mYUVColorSpace = GetAVIFColorSpace(aNclx, [&]() {
     MOZ_LOG(sAVIFLog, LogLevel::Info,
             ("YUVColorSpace cannot be determined from colr box, using AV1 "
              "sequence header"));
@@ -1011,82 +1010,94 @@ AVIFDecodedData Dav1dDecoder::Dav1dPictureToDecodedData(
     av1MatrixCoefficients = static_cast<CICP::MatrixCoefficients>(seq_hdr.mtrx);
   }
 
-  data.SetCicpValues(aNclx, av1ColourPrimaries, av1TransferCharacteristics,
-                     av1MatrixCoefficients);
+  data->SetCicpValues(aNclx, av1ColourPrimaries, av1TransferCharacteristics,
+                      av1MatrixCoefficients);
 
   gfx::ColorRange av1ColorRange =
       seq_hdr.color_range ? gfx::ColorRange::FULL : gfx::ColorRange::LIMITED;
-  data.mColorRange = GetAVIFColorRange(aNclx, av1ColorRange);
+  data->mColorRange = GetAVIFColorRange(aNclx, av1ColorRange);
 
   auto colorPrimaries =
-      gfxUtils::CicpToColorPrimaries(data.mColourPrimaries, sAVIFLog);
+      gfxUtils::CicpToColorPrimaries(data->mColourPrimaries, sAVIFLog);
   if (colorPrimaries.isSome()) {
-    data.mColorPrimaries = *colorPrimaries;
+    data->mColorPrimaries = *colorPrimaries;
   }
 
   if (aAlphaPlane) {
-    MOZ_ASSERT(aAlphaPlane->stride[0] == data.mYStride);
-    data.mAlpha.emplace();
-    data.mAlpha->mChannel = static_cast<uint8_t*>(aAlphaPlane->data[0]);
-    data.mAlpha->mSize = gfx::IntSize(aAlphaPlane->p.w, aAlphaPlane->p.h);
-    data.mAlpha->mPremultiplied = aPremultipliedAlpha;
+    MOZ_ASSERT(aAlphaPlane->stride[0] == data->mYStride);
+    data->mAlpha.emplace();
+    data->mAlpha->mChannel = static_cast<uint8_t*>(aAlphaPlane->data[0]);
+    data->mAlpha->mSize = gfx::IntSize(aAlphaPlane->p.w, aAlphaPlane->p.h);
+    data->mAlpha->mPremultiplied = aPremultipliedAlpha;
   }
 
+  data->mColorDav1d = std::move(aPicture);
+  data->mAlphaDav1d = std::move(aAlphaPlane);
+
   return data;
 }
 
 /* static */
-AVIFDecodedData AOMDecoder::AOMImageToToDecodedData(
-    const Mp4parseNclxColourInformation* aNclx, aom_image_t* aImage,
-    aom_image_t* aAlphaPlane, bool aPremultipliedAlpha) {
-  MOZ_ASSERT(aImage);
-  MOZ_ASSERT(aImage->stride[AOM_PLANE_Y] == aImage->stride[AOM_PLANE_ALPHA]);
-  MOZ_ASSERT(aImage->stride[AOM_PLANE_Y] >=
-             aom_img_plane_width(aImage, AOM_PLANE_Y));
-  MOZ_ASSERT(aImage->stride[AOM_PLANE_U] == aImage->stride[AOM_PLANE_V]);
-  MOZ_ASSERT(aImage->stride[AOM_PLANE_U] >=
-             aom_img_plane_width(aImage, AOM_PLANE_U));
-  MOZ_ASSERT(aImage->stride[AOM_PLANE_V] >=
-             aom_img_plane_width(aImage, AOM_PLANE_V));
-  MOZ_ASSERT(aom_img_plane_width(aImage, AOM_PLANE_U) ==
-             aom_img_plane_width(aImage, AOM_PLANE_V));
-  MOZ_ASSERT(aom_img_plane_height(aImage, AOM_PLANE_U) ==
-             aom_img_plane_height(aImage, AOM_PLANE_V));
-
-  AVIFDecodedData data;
-
-  data.mYChannel = aImage->planes[AOM_PLANE_Y];
-  data.mYStride = aImage->stride[AOM_PLANE_Y];
-  data.mYSkip =
-      aImage->stride[AOM_PLANE_Y] - aom_img_plane_width(aImage, AOM_PLANE_Y);
-  data.mCbChannel = aImage->planes[AOM_PLANE_U];
-  data.mCrChannel = aImage->planes[AOM_PLANE_V];
-  data.mCbCrStride = aImage->stride[AOM_PLANE_U];
-  data.mCbSkip =
-      aImage->stride[AOM_PLANE_U] - aom_img_plane_width(aImage, AOM_PLANE_U);
-  data.mCrSkip =
-      aImage->stride[AOM_PLANE_V] - aom_img_plane_width(aImage, AOM_PLANE_V);
-  data.mPictureRect = gfx::IntRect(0, 0, aImage->d_w, aImage->d_h);
-  data.mStereoMode = StereoMode::MONO;
-  data.mColorDepth = ColorDepthForBitDepth(aImage->bit_depth);
-
-  if (aImage->x_chroma_shift == 1 && aImage->y_chroma_shift == 1) {
-    data.mChromaSubsampling = gfx::ChromaSubsampling::HALF_WIDTH_AND_HEIGHT;
-  } else if (aImage->x_chroma_shift == 1 && aImage->y_chroma_shift == 0) {
-    data.mChromaSubsampling = gfx::ChromaSubsampling::HALF_WIDTH;
-  } else if (aImage->x_chroma_shift != 0 || aImage->y_chroma_shift != 0) {
+UniquePtr<AVIFDecodedData> AOMDecoder::AOMImageToToDecodedData(
+    const Mp4parseNclxColourInformation* aNclx, UniquePtr<OwnedAOMImage> aImage,
+    UniquePtr<OwnedAOMImage> aAlphaPlane, bool aPremultipliedAlpha) {
+  aom_image_t* colorImage = aImage->GetImage();
+  aom_image_t* alphaImage = aAlphaPlane ? aAlphaPlane->GetImage() : nullptr;
+
+  MOZ_ASSERT(colorImage);
+  MOZ_ASSERT(colorImage->stride[AOM_PLANE_Y] ==
+             colorImage->stride[AOM_PLANE_ALPHA]);
+  MOZ_ASSERT(colorImage->stride[AOM_PLANE_Y] >=
+             aom_img_plane_width(colorImage, AOM_PLANE_Y));
+  MOZ_ASSERT(colorImage->stride[AOM_PLANE_U] ==
+             colorImage->stride[AOM_PLANE_V]);
+  MOZ_ASSERT(colorImage->stride[AOM_PLANE_U] >=
+             aom_img_plane_width(colorImage, AOM_PLANE_U));
+  MOZ_ASSERT(colorImage->stride[AOM_PLANE_V] >=
+             aom_img_plane_width(colorImage, AOM_PLANE_V));
+  MOZ_ASSERT(aom_img_plane_width(colorImage, AOM_PLANE_U) ==
+             aom_img_plane_width(colorImage, AOM_PLANE_V));
+  MOZ_ASSERT(aom_img_plane_height(colorImage, AOM_PLANE_U) ==
+             aom_img_plane_height(colorImage, AOM_PLANE_V));
+
+  UniquePtr<AVIFDecodedData> data = MakeUnique<AVIFDecodedData>();
+
+  data->mRenderRect = {0, 0, colorImage->r_w, colorImage->r_h};
+
+  data->mYChannel = colorImage->planes[AOM_PLANE_Y];
+  data->mYStride = colorImage->stride[AOM_PLANE_Y];
+  data->mYSkip = colorImage->stride[AOM_PLANE_Y] -
+                 aom_img_plane_width(colorImage, AOM_PLANE_Y);
+  data->mCbChannel = colorImage->planes[AOM_PLANE_U];
+  data->mCrChannel = colorImage->planes[AOM_PLANE_V];
+  data->mCbCrStride = colorImage->stride[AOM_PLANE_U];
+  data->mCbSkip = colorImage->stride[AOM_PLANE_U] -
+                  aom_img_plane_width(colorImage, AOM_PLANE_U);
+  data->mCrSkip = colorImage->stride[AOM_PLANE_V] -
+                  aom_img_plane_width(colorImage, AOM_PLANE_V);
+  data->mPictureRect = gfx::IntRect(0, 0, colorImage->d_w, colorImage->d_h);
+  data->mStereoMode = StereoMode::MONO;
+  data->mColorDepth = ColorDepthForBitDepth(colorImage->bit_depth);
+
+  if (colorImage->x_chroma_shift == 1 && colorImage->y_chroma_shift == 1) {
+    data->mChromaSubsampling = gfx::ChromaSubsampling::HALF_WIDTH_AND_HEIGHT;
+  } else if (colorImage->x_chroma_shift == 1 &&
+             colorImage->y_chroma_shift == 0) {
+    data->mChromaSubsampling = gfx::ChromaSubsampling::HALF_WIDTH;
+  } else if (colorImage->x_chroma_shift != 0 ||
+             colorImage->y_chroma_shift != 0) {
     MOZ_ASSERT_UNREACHABLE("unexpected chroma shifts");
   }
 
-  MOZ_ASSERT(aImage->bit_depth == BitDepthForColorDepth(data.mColorDepth));
+  MOZ_ASSERT(colorImage->bit_depth == BitDepthForColorDepth(data->mColorDepth));
 
-  auto av1ColourPrimaries = static_cast<CICP::ColourPrimaries>(aImage->cp);
+  auto av1ColourPrimaries = static_cast<CICP::ColourPrimaries>(colorImage->cp);
   auto av1TransferCharacteristics =
-      static_cast<CICP::TransferCharacteristics>(aImage->tc);
+      static_cast<CICP::TransferCharacteristics>(colorImage->tc);
   auto av1MatrixCoefficients =
-      static_cast<CICP::MatrixCoefficients>(aImage->mc);
+      static_cast<CICP::MatrixCoefficients>(colorImage->mc);
 
-  data.mYUVColorSpace = GetAVIFColorSpace(aNclx, [=]() {
+  data->mYUVColorSpace = GetAVIFColorSpace(aNclx, [=]() {
     MOZ_LOG(sAVIFLog, LogLevel::Info,
             ("YUVColorSpace cannot be determined from colr box, using AV1 "
              "sequence header"));
@@ -1095,31 +1106,34 @@ AVIFDecodedData AOMDecoder::AOMImageToToDecodedData(
   });
 
   gfx::ColorRange av1ColorRange;
-  if (aImage->range == AOM_CR_STUDIO_RANGE) {
+  if (colorImage->range == AOM_CR_STUDIO_RANGE) {
     av1ColorRange = gfx::ColorRange::LIMITED;
   } else {
-    MOZ_ASSERT(aImage->range == AOM_CR_FULL_RANGE);
+    MOZ_ASSERT(colorImage->range == AOM_CR_FULL_RANGE);
     av1ColorRange = gfx::ColorRange::FULL;
   }
-  data.mColorRange = GetAVIFColorRange(aNclx, av1ColorRange);
+  data->mColorRange = GetAVIFColorRange(aNclx, av1ColorRange);
 
-  data.SetCicpValues(aNclx, av1ColourPrimaries, av1TransferCharacteristics,
-                     av1MatrixCoefficients);
+  data->SetCicpValues(aNclx, av1ColourPrimaries, av1TransferCharacteristics,
+                      av1MatrixCoefficients);
 
   auto colorPrimaries =
-      gfxUtils::CicpToColorPrimaries(data.mColourPrimaries, sAVIFLog);
+      gfxUtils::CicpToColorPrimaries(data->mColourPrimaries, sAVIFLog);
   if (colorPrimaries.isSome()) {
-    data.mColorPrimaries = *colorPrimaries;
+    data->mColorPrimaries = *colorPrimaries;
   }
 
-  if (aAlphaPlane) {
-    MOZ_ASSERT(aAlphaPlane->stride[AOM_PLANE_Y] == data.mYStride);
-    data.mAlpha.emplace();
-    data.mAlpha->mChannel = aAlphaPlane->planes[AOM_PLANE_Y];
-    data.mAlpha->mSize = gfx::IntSize(aAlphaPlane->d_w, aAlphaPlane->d_h);
-    data.mAlpha->mPremultiplied = aPremultipliedAlpha;
+  if (alphaImage) {
+    MOZ_ASSERT(alphaImage->stride[AOM_PLANE_Y] == data->mYStride);
+    data->mAlpha.emplace();
+    data->mAlpha->mChannel = alphaImage->planes[AOM_PLANE_Y];
+    data->mAlpha->mSize = gfx::IntSize(alphaImage->d_w, alphaImage->d_h);
+    data->mAlpha->mPremultiplied = aPremultipliedAlpha;
   }
 
+  data->mColorAOM = std::move(aImage);
+  data->mAlphaAOM = std::move(aAlphaPlane);
+
   return data;
 }
 
@@ -1173,7 +1187,10 @@ LexerResult nsAVIFDecoder::DoDecode(SourceBufferIterator& aIterator,
     if (r == NonDecoderResult::NeedMoreData) {
       return LexerResult(Yield::NEED_MORE_DATA);
     }
-    return r == NonDecoderResult::MetadataOk
+    if (r == NonDecoderResult::OutputAvailable) {
+      return LexerResult(Yield::OUTPUT_AVAILABLE);
+    }
+    return r == NonDecoderResult::Complete
                ? LexerResult(TerminalState::SUCCESS)
                : LexerResult(TerminalState::FAILURE);
   }
@@ -1191,6 +1208,158 @@ LexerResult nsAVIFDecoder::DoDecode(SourceBufferIterator& aIterator,
   return rv;
 }
 
+Mp4parseStatus nsAVIFDecoder::CreateParser() {
+  if (!mParser) {
+    Mp4parseIo io = {nsAVIFDecoder::ReadSource, this};
+    mBufferStream = MakeUnique<AVIFDecoderStream>(&mBufferedData);
+    Mp4parseStatus status =
+        AVIFParser::Create(&io, mBufferStream.get(), mParser);
+
+    if (status != MP4PARSE_STATUS_OK) {
+      return status;
+    }
+
+    const Mp4parseAvifInfo& info = mParser->GetInfo();
+    mIsAnimated = mParser->IsAnimated();
+    mHasAlpha = mIsAnimated ? !!info.alpha_track_id : info.has_alpha_item;
+  }
+
+  return MP4PARSE_STATUS_OK;
+}
+
+nsAVIFDecoder::DecodeResult nsAVIFDecoder::CreateDecoder() {
+  if (!mDecoder) {
+    DecodeResult r = StaticPrefs::image_avif_use_dav1d()
+                         ? Dav1dDecoder::Create(mDecoder, mHasAlpha)
+                         : AOMDecoder::Create(mDecoder, mHasAlpha);
+
+    MOZ_LOG(sAVIFLog, LogLevel::Debug,
+            ("[this=%p] Create %sDecoder %ssuccessfully", this,
+             StaticPrefs::image_avif_use_dav1d() ? "Dav1d" : "AOM",
+             IsDecodeSuccess(r) ? "" : "un"));
+
+    if (!IsDecodeSuccess(r)) {
+      return r;
+    }
+  }
+
+  return DecodeResult(NonDecoderResult::Complete);
+}
+
+// Records all telemetry available in the AVIF metadata, called only once during
+// the metadata decode to avoid multiple counts.
+static void RecordMetadataTelem(const Mp4parseAvifInfo& aInfo) {
+  if (aInfo.pixel_aspect_ratio) {
+    const uint32_t& h_spacing = aInfo.pixel_aspect_ratio->h_spacing;
+    const uint32_t& v_spacing = aInfo.pixel_aspect_ratio->v_spacing;
+
+    if (h_spacing == 0 || v_spacing == 0) {
+      AccumulateCategorical(LABELS_AVIF_PASP::invalid);
+    } else if (h_spacing == v_spacing) {
+      AccumulateCategorical(LABELS_AVIF_PASP::square);
+    } else {
+      AccumulateCategorical(LABELS_AVIF_PASP::nonsquare);
+    }
+  } else {
+    AccumulateCategorical(LABELS_AVIF_PASP::absent);
+  }
+
+  const auto& major_brand = aInfo.major_brand;
+  if (!memcmp(major_brand, "avif", sizeof(major_brand))) {
+    AccumulateCategorical(LABELS_AVIF_MAJOR_BRAND::avif);
+  } else if (!memcmp(major_brand, "avis", sizeof(major_brand))) {
+    AccumulateCategorical(LABELS_AVIF_MAJOR_BRAND::avis);
+  } else {
+    AccumulateCategorical(LABELS_AVIF_MAJOR_BRAND::other);
+  }
+
+  AccumulateCategorical(aInfo.has_sequence ? LABELS_AVIF_SEQUENCE::present
+                                           : LABELS_AVIF_SEQUENCE::absent);
+
+#define FEATURE_TELEMETRY(fourcc)                                              \
+  AccumulateCategorical(                                                       \
+      (aInfo.unsupported_features_bitfield & (1 << MP4PARSE_FEATURE_##fourcc)) \
+          ? LABELS_AVIF_##fourcc::present                                      \
+          : LABELS_AVIF_##fourcc::absent)
+  FEATURE_TELEMETRY(A1LX);
+  FEATURE_TELEMETRY(A1OP);
+  FEATURE_TELEMETRY(CLAP);
+  FEATURE_TELEMETRY(GRID);
+  FEATURE_TELEMETRY(IPRO);
+  FEATURE_TELEMETRY(LSEL);
+
+  if (aInfo.nclx_colour_information && aInfo.icc_colour_information.data) {
+    AccumulateCategorical(LABELS_AVIF_COLR::both);
+  } else if (aInfo.nclx_colour_information) {
+    AccumulateCategorical(LABELS_AVIF_COLR::nclx);
+  } else if (aInfo.icc_colour_information.data) {
+    AccumulateCategorical(LABELS_AVIF_COLR::icc);
+  } else {
+    AccumulateCategorical(LABELS_AVIF_COLR::absent);
+  }
+}
+
+static void RecordPixiTelemetry(uint8_t aPixiBitDepth,
+                                uint8_t aBitstreamBitDepth,
+                                const char* aItemName) {
+  if (aPixiBitDepth == 0) {
+    AccumulateCategorical(LABELS_AVIF_PIXI::absent);
+  } else if (aPixiBitDepth == aBitstreamBitDepth) {
+    AccumulateCategorical(LABELS_AVIF_PIXI::valid);
+  } else {
+    MOZ_LOG(sAVIFLog, LogLevel::Error,
+            ("%s item pixi bit depth (%hhu) doesn't match "
+             "bitstream (%hhu)",
+             aItemName, aPixiBitDepth, aBitstreamBitDepth));
+    AccumulateCategorical(LABELS_AVIF_PIXI::bitstream_mismatch);
+  }
+}
+
+// This telemetry depends on the results of decoding.
+// These data must be recorded only on the first frame decoded after metadata
+// decode finishes.
+static void RecordFrameTelem(bool aAnimated, const Mp4parseAvifInfo& aInfo,
+                             const AVIFDecodedData& aData) {
+  AccumulateCategorical(
+      gColorSpaceLabel[static_cast<size_t>(aData.mYUVColorSpace)]);
+  AccumulateCategorical(
+      gColorDepthLabel[static_cast<size_t>(aData.mColorDepth)]);
+
+  RecordPixiTelemetry(
+      aAnimated ? aInfo.color_track_bit_depth : aInfo.primary_item_bit_depth,
+      BitDepthForColorDepth(aData.mColorDepth), "color");
+
+  if (aData.mAlpha) {
+    AccumulateCategorical(LABELS_AVIF_ALPHA::present);
+    RecordPixiTelemetry(
+        aAnimated ? aInfo.alpha_track_bit_depth : aInfo.alpha_item_bit_depth,
+        BitDepthForColorDepth(aData.mColorDepth), "alpha");
+  } else {
+    AccumulateCategorical(LABELS_AVIF_ALPHA::absent);
+  }
+
+  if (CICP::IsReserved(aData.mColourPrimaries)) {
+    AccumulateCategorical(LABELS_AVIF_CICP_CP::RESERVED_REST);
+  } else {
+    AccumulateCategorical(
+        static_cast<LABELS_AVIF_CICP_CP>(aData.mColourPrimaries));
+  }
+
+  if (CICP::IsReserved(aData.mTransferCharacteristics)) {
+    AccumulateCategorical(LABELS_AVIF_CICP_TC::RESERVED);
+  } else {
+    AccumulateCategorical(
+        static_cast<LABELS_AVIF_CICP_TC>(aData.mTransferCharacteristics));
+  }
+
+  if (CICP::IsReserved(aData.mMatrixCoefficients)) {
+    AccumulateCategorical(LABELS_AVIF_CICP_MC::RESERVED);
+  } else {
+    AccumulateCategorical(
+        static_cast<LABELS_AVIF_CICP_MC>(aData.mMatrixCoefficients));
+  }
+}
+
 nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
     SourceBufferIterator& aIterator, IResumable* aOnResume) {
   MOZ_LOG(sAVIFLog, LogLevel::Debug,
@@ -1238,74 +1407,27 @@ nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
     }
   }
 
-  Mp4parseIo io = {nsAVIFDecoder::ReadSource, this};
-  UniquePtr<AVIFParser> parser;
-  Mp4parseStatus create_parser_status = AVIFParser::Create(&io, parser);
+  Mp4parseStatus parserStatus = CreateParser();
 
-  if (!parser) {
-    return AsVariant(create_parser_status);
+  if (parserStatus != MP4PARSE_STATUS_OK) {
+    return AsVariant(parserStatus);
   }
 
-  const Mp4parseAvifImage* parsedImagePtr = parser->GetImage();
-  if (!parsedImagePtr) {
-    return AsVariant(NonDecoderResult::NoPrimaryItem);
-  }
-  const Mp4parseAvifImage& parsedImg = *parsedImagePtr;
+  const Mp4parseAvifInfo& parsedInfo = mParser->GetInfo();
 
-  if (parsedImg.icc_colour_information.data) {
-    const auto& icc = parsedImg.icc_colour_information;
+  if (parsedInfo.icc_colour_information.data) {
+    const auto& icc = parsedInfo.icc_colour_information;
     MOZ_LOG(
         sAVIFLog, LogLevel::Debug,
         ("[this=%p] colr type ICC: %zu bytes %p", this, icc.length, icc.data));
   }
 
   if (IsMetadataDecode()) {
-    // Only record metadata telemetry on the metadata decode call, or else it
-    // would be double-counted
-
-    if (parsedImg.pixel_aspect_ratio) {
-      const uint32_t& h_spacing = parsedImg.pixel_aspect_ratio->h_spacing;
-      const uint32_t& v_spacing = parsedImg.pixel_aspect_ratio->v_spacing;
-
-      if (h_spacing == 0 || v_spacing == 0) {
-        AccumulateCategorical(LABELS_AVIF_PASP::invalid);
-      } else if (h_spacing == v_spacing) {
-        AccumulateCategorical(LABELS_AVIF_PASP::square);
-      } else {
-        AccumulateCategorical(LABELS_AVIF_PASP::nonsquare);
-      }
-    } else {
-      AccumulateCategorical(LABELS_AVIF_PASP::absent);
-    }
-
-    const auto& major_brand = parsedImg.major_brand;
-    if (!memcmp(major_brand, "avif", sizeof(major_brand))) {
-      AccumulateCategorical(LABELS_AVIF_MAJOR_BRAND::avif);
-    } else if (!memcmp(major_brand, "avis", sizeof(major_brand))) {
-      AccumulateCategorical(LABELS_AVIF_MAJOR_BRAND::avis);
-    } else {
-      AccumulateCategorical(LABELS_AVIF_MAJOR_BRAND::other);
-    }
+    RecordMetadataTelem(parsedInfo);
+  }
 
-    AccumulateCategorical(parsedImg.has_sequence
-                              ? LABELS_AVIF_SEQUENCE::present
-                              : LABELS_AVIF_SEQUENCE::absent);
-
-#define FEATURE_TELEMETRY(fourcc)                                  \
-  AccumulateCategorical((parsedImg.unsupported_features_bitfield & \
-                         (1 << MP4PARSE_FEATURE_##fourcc))         \
-                            ? LABELS_AVIF_##fourcc::present        \
-                            : LABELS_AVIF_##fourcc::absent)
-    FEATURE_TELEMETRY(A1LX);
-    FEATURE_TELEMETRY(A1OP);
-    FEATURE_TELEMETRY(CLAP);
-    FEATURE_TELEMETRY(GRID);
-    FEATURE_TELEMETRY(IPRO);
-    FEATURE_TELEMETRY(LSEL);
-  }
-
-  if (parsedImg.nclx_colour_information) {
-    const auto& nclx = *parsedImg.nclx_colour_information;
+  if (parsedInfo.nclx_colour_information) {
+    const auto& nclx = *parsedInfo.nclx_colour_information;
     MOZ_LOG(
         sAVIFLog, LogLevel::Debug,
         ("[this=%p] colr type CICP: cp/tc/mc/full-range %u/%u/%u/%s", this,
@@ -1313,58 +1435,60 @@ nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
          nclx.matrix_coefficients, nclx.full_range_flag ? "true" : "false"));
   }
 
-  if (!parsedImg.icc_colour_information.data &&
-      !parsedImg.nclx_colour_information) {
+  if (!parsedInfo.icc_colour_information.data &&
+      !parsedInfo.nclx_colour_information) {
     MOZ_LOG(sAVIFLog, LogLevel::Debug,
             ("[this=%p] colr box not present", this));
   }
 
-  if (parsedImg.alpha_image.coded_data.data) {
+  AVIFImage parsedImage;
+  DecodeResult r = mParser->GetImage(parsedImage);
+  if (!IsDecodeSuccess(r)) {
+    return r;
+  }
+  bool isDone =
+      !IsMetadataDecode() && r == DecodeResult(NonDecoderResult::Complete);
+
+  if (mIsAnimated) {
+    PostIsAnimated(parsedImage.mDuration);
+  }
+  if (mHasAlpha) {
     PostHasTransparency();
   }
 
   Orientation orientation = StaticPrefs::image_avif_apply_transforms()
-                                ? GetImageOrientation(parsedImg)
+                                ? GetImageOrientation(parsedInfo)
                                 : Orientation{};
-  MaybeIntSize parsedImageSize = GetImageSize(parsedImg);
-  Maybe<uint8_t> primaryBitDepth =
-      BitsPerChannelToBitDepth(parsedImg.primary_image.bits_per_channel);
-  Maybe<uint8_t> alphaBitDepth =
-      BitsPerChannelToBitDepth(parsedImg.alpha_image.bits_per_channel);
+  // TODO: Orientation should probably also apply to animated AVIFs.
+  if (mIsAnimated) {
+    orientation = Orientation{};
+  }
+
+  MaybeIntSize parsedImageSize = GetImageSize(parsedInfo);
 
   if (parsedImageSize.isSome()) {
     MOZ_LOG(sAVIFLog, LogLevel::Debug,
             ("[this=%p] Parser returned image size %d x %d (%d/%d bit)", this,
              parsedImageSize->width, parsedImageSize->height,
-             primaryBitDepth.valueOr(0), alphaBitDepth.valueOr(0)));
+             mIsAnimated ? parsedInfo.color_track_bit_depth
+                         : parsedInfo.primary_item_bit_depth,
+             mIsAnimated ? parsedInfo.alpha_track_bit_depth
+                         : parsedInfo.alpha_item_bit_depth));
     PostSize(parsedImageSize->width, parsedImageSize->height, orientation);
     if (IsMetadataDecode()) {
       MOZ_LOG(
           sAVIFLog, LogLevel::Debug,
           ("[this=%p] Finishing metadata decode without image decode", this));
-      return AsVariant(NonDecoderResult::MetadataOk);
+      return AsVariant(NonDecoderResult::Complete);
     }
   } else {
     MOZ_LOG(sAVIFLog, LogLevel::Error,
             ("[this=%p] Parser returned no image size, decoding...", this));
   }
 
-  UniquePtr<AVIFDecoderInterface> decoder;
-  DecodeResult r = StaticPrefs::image_avif_use_dav1d()
-                       ? Dav1dDecoder::Create(std::move(parser), decoder)
-                       : AOMDecoder::Create(std::move(parser), decoder);
-
-  MOZ_LOG(sAVIFLog, LogLevel::Debug,
-          ("[this=%p] Create %sDecoder %ssuccessfully", this,
-           StaticPrefs::image_avif_use_dav1d() ? "Dav1d" : "AOM",
-           IsDecodeSuccess(r) ? "" : "un"));
-
-  if (!IsDecodeSuccess(r)) {
-    return r;
-  }
-
-  MOZ_ASSERT(decoder);
-  r = decoder->Decode(IsMetadataDecode(), parsedImg);
+  CreateDecoder();
+  MOZ_ASSERT(mDecoder);
+  r = mDecoder->Decode(IsMetadataDecode(), parsedInfo, parsedImage);
   MOZ_LOG(sAVIFLog, LogLevel::Debug,
           ("[this=%p] Decoder%s->Decode() %s", this,
            StaticPrefs::image_avif_use_dav1d() ? "Dav1d" : "AOM",
@@ -1374,111 +1498,60 @@ nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
     return r;
   }
 
-  AVIFDecodedData& decodedData = decoder->GetDecodedData();
+  UniquePtr<AVIFDecodedData> decodedData = mDecoder->GetDecodedData();
 
-  MOZ_ASSERT(decodedData.mColourPrimaries !=
+  MOZ_ASSERT_IF(mHasAlpha, decodedData->mAlpha.isSome());
+
+  MOZ_ASSERT(decodedData->mColourPrimaries !=
              CICP::ColourPrimaries::CP_UNSPECIFIED);
-  MOZ_ASSERT(decodedData.mTransferCharacteristics !=
+  MOZ_ASSERT(decodedData->mTransferCharacteristics !=
              CICP::TransferCharacteristics::TC_UNSPECIFIED);
-  MOZ_ASSERT(decodedData.mColorRange <= gfx::ColorRange::_Last);
-  MOZ_ASSERT(decodedData.mYUVColorSpace <= gfx::YUVColorSpace::_Last);
+  MOZ_ASSERT(decodedData->mColorRange <= gfx::ColorRange::_Last);
+  MOZ_ASSERT(decodedData->mYUVColorSpace <= gfx::YUVColorSpace::_Last);
 
   MOZ_LOG(sAVIFLog, LogLevel::Debug,
           ("[this=%p] decodedData.mColorRange: %hhd", this,
-           static_cast<uint8_t>(decodedData.mColorRange)));
+           static_cast<uint8_t>(decodedData->mColorRange)));
 
   // Technically it's valid but we don't handle it now (Bug 1682318).
-  if (decodedData.mAlpha &&
-      decodedData.mAlpha->mSize != decodedData.YDataSize()) {
+  if (decodedData->mAlpha &&
+      decodedData->mAlpha->mSize != decodedData->YDataSize()) {
     return AsVariant(NonDecoderResult::AlphaYSizeMismatch);
   }
 
   if (parsedImageSize.isNothing()) {
-    MOZ_LOG(sAVIFLog, LogLevel::Error,
-            ("[this=%p] Using decoded image size: %d x %d", this,
-             decodedData.mPictureRect.width, decodedData.mPictureRect.height));
-    PostSize(decodedData.mPictureRect.width, decodedData.mPictureRect.height,
+    MOZ_LOG(
+        sAVIFLog, LogLevel::Error,
+        ("[this=%p] Using decoded image size: %d x %d", this,
+         decodedData->mPictureRect.width, decodedData->mPictureRect.height));
+    PostSize(decodedData->mPictureRect.width, decodedData->mPictureRect.height,
              orientation);
     AccumulateCategorical(LABELS_AVIF_ISPE::absent);
-  } else if (decodedData.mPictureRect.width != parsedImageSize->width ||
-             decodedData.mPictureRect.height != parsedImageSize->height) {
-    MOZ_LOG(sAVIFLog, LogLevel::Error,
-            ("[this=%p] Metadata image size doesn't match decoded image size: "
-             "(%d x %d) != (%d x %d)",
-             this, parsedImageSize->width, parsedImageSize->height,
-             decodedData.mPictureRect.width, decodedData.mPictureRect.height));
+  } else if (decodedData->mPictureRect.width != parsedImageSize->width ||
+             decodedData->mPictureRect.height != parsedImageSize->height) {
+    MOZ_LOG(
+        sAVIFLog, LogLevel::Error,
+        ("[this=%p] Metadata image size doesn't match decoded image size: "
+         "(%d x %d) != (%d x %d)",
+         this, parsedImageSize->width, parsedImageSize->height,
+         decodedData->mPictureRect.width, decodedData->mPictureRect.height));
     AccumulateCategorical(LABELS_AVIF_ISPE::bitstream_mismatch);
     return AsVariant(NonDecoderResult::MetadataImageSizeMismatch);
   } else {
     AccumulateCategorical(LABELS_AVIF_ISPE::valid);
   }
 
-  const bool hasAlpha = decodedData.mAlpha.isSome();
-  if (hasAlpha) {
-    PostHasTransparency();
-  }
-
   if (IsMetadataDecode()) {
-    return AsVariant(NonDecoderResult::MetadataOk);
+    return AsVariant(NonDecoderResult::Complete);
   }
 
-  // The following telemetry may depend on the results of decoding.
-  // These data must be recorded after metadata has been decoded
-  // (IsMetadataDecode()=false) or else they would be double-counted.
-
-  AccumulateCategorical(
-      gColorSpaceLabel[static_cast<size_t>(decodedData.mYUVColorSpace)]);
-  AccumulateCategorical(
-      gColorDepthLabel[static_cast<size_t>(decodedData.mColorDepth)]);
-
-  RecordPixiTelemetry(primaryBitDepth,
-                      BitDepthForColorDepth(decodedData.mColorDepth),
-                      "primary");
-
-  if (decodedData.mAlpha) {
-    AccumulateCategorical(LABELS_AVIF_ALPHA::present);
-    RecordPixiTelemetry(alphaBitDepth,
-                        BitDepthForColorDepth(decodedData.mAlpha->mDepth),
-                        "alpha");
-  } else {
-    AccumulateCategorical(LABELS_AVIF_ALPHA::absent);
-  }
-
-  IntSize rgbSize = decodedData.mPictureRect.Size();
+  IntSize rgbSize = decodedData->mPictureRect.Size();
   MOZ_ASSERT(
       rgbSize ==
       GetImageMetadata().GetOrientation().ToUnoriented(Size()).ToUnknownSize());
 
-  if (parsedImg.nclx_colour_information &&
-      parsedImg.icc_colour_information.data) {
-    AccumulateCategorical(LABELS_AVIF_COLR::both);
-  } else if (parsedImg.nclx_colour_information) {
-    AccumulateCategorical(LABELS_AVIF_COLR::nclx);
-  } else if (parsedImg.icc_colour_information.data) {
-    AccumulateCategorical(LABELS_AVIF_COLR::icc);
-  } else {
-    AccumulateCategorical(LABELS_AVIF_COLR::absent);
-  }
-
-  if (CICP::IsReserved(decodedData.mColourPrimaries)) {
-    AccumulateCategorical(LABELS_AVIF_CICP_CP::RESERVED_REST);
-  } else {
-    AccumulateCategorical(
-        static_cast<LABELS_AVIF_CICP_CP>(decodedData.mColourPrimaries));
-  }
-
-  if (CICP::IsReserved(decodedData.mTransferCharacteristics)) {
-    AccumulateCategorical(LABELS_AVIF_CICP_TC::RESERVED);
-  } else {
-    AccumulateCategorical(
-        static_cast<LABELS_AVIF_CICP_TC>(decodedData.mTransferCharacteristics));
-  }
-
-  if (CICP::IsReserved(decodedData.mMatrixCoefficients)) {
-    AccumulateCategorical(LABELS_AVIF_CICP_MC::RESERVED);
-  } else {
-    AccumulateCategorical(
-        static_cast<LABELS_AVIF_CICP_MC>(decodedData.mMatrixCoefficients));
+  if (parsedImage.mFrameNum == 0) {
+    RecordFrameTelem(mIsAnimated, parsedInfo, *decodedData);
   }
 
   // Read color profile
@@ -1487,12 +1560,12 @@ nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
             ("[this=%p] Processing color profile", this));
 
     // See comment on AVIFDecodedData
-    if (parsedImg.icc_colour_information.data) {
-      const auto& icc = parsedImg.icc_colour_information;
+    if (parsedInfo.icc_colour_information.data) {
+      const auto& icc = parsedInfo.icc_colour_information;
       mInProfile = qcms_profile_from_memory(icc.data, icc.length);
     } else {
-      const auto& cp = decodedData.mColourPrimaries;
-      const auto& tc = decodedData.mTransferCharacteristics;
+      const auto& cp = decodedData->mColourPrimaries;
+      const auto& tc = decodedData->mTransferCharacteristics;
 
       if (CICP::IsReserved(cp)) {
         MOZ_LOG(sAVIFLog, LogLevel::Error,
@@ -1541,7 +1614,7 @@ nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
       // have an alpha channel, because the swizzle and premultiplication
       // happens after color management. Otherwise it will be in BGRA because
       // the swizzle happens at the start.
-      if (hasAlpha) {
+      if (mHasAlpha) {
         inType = QCMS_DATA_RGBA_8;
         outType = QCMS_DATA_RGBA_8;
       } else {
@@ -1549,7 +1622,7 @@ nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
         outType = inType;
       }
     } else {
-      if (hasAlpha) {
+      if (mHasAlpha) {
         inType = QCMS_DATA_GRAYA_8;
         outType = gfxPlatform::GetCMSOSRGBAType();
       } else {
@@ -1565,8 +1638,8 @@ nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
   // Get suggested format and size. Note that GetYCbCrToRGBDestFormatAndSize
   // force format to be B8G8R8X8 if it's not.
   gfx::SurfaceFormat format = SurfaceFormat::OS_RGBX;
-  gfx::GetYCbCrToRGBDestFormatAndSize(decodedData, format, rgbSize);
-  if (hasAlpha) {
+  gfx::GetYCbCrToRGBDestFormatAndSize(*decodedData, format, rgbSize);
+  if (mHasAlpha) {
     // We would use libyuv to do the YCbCrA -> ARGB convertion, which only
     // works for B8G8R8A8.
     format = SurfaceFormat::B8G8R8A8;
@@ -1596,10 +1669,10 @@ nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
     return AsVariant(NonDecoderResult::OutOfMemory);
   }
 
-  if (decodedData.mAlpha) {
+  if (decodedData->mAlpha) {
     const auto wantPremultiply =
         !bool(GetSurfaceFlags() & SurfaceFlags::NO_PREMULTIPLY_ALPHA);
-    const bool& hasPremultiply = decodedData.mAlpha->mPremultiplied;
+    const bool& hasPremultiply = decodedData->mAlpha->mPremultiplied;
 
     PremultFunc premultOp = nullptr;
     if (wantPremultiply && !hasPremultiply) {
@@ -1611,21 +1684,39 @@ nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
     MOZ_LOG(sAVIFLog, LogLevel::Debug,
             ("[this=%p] calling gfx::ConvertYCbCrAToARGB premultOp: %p", this,
              premultOp));
-    gfx::ConvertYCbCrAToARGB(decodedData, *decodedData.mAlpha, format, rgbSize,
-                             rgbBuf.get(), rgbStride.value(), premultOp);
+    gfx::ConvertYCbCrAToARGB(*decodedData, *decodedData->mAlpha, format,
+                             rgbSize, rgbBuf.get(), rgbStride.value(),
+                             premultOp);
   } else {
     MOZ_LOG(sAVIFLog, LogLevel::Debug,
             ("[this=%p] calling gfx::ConvertYCbCrToRGB", this));
-    gfx::ConvertYCbCrToRGB(decodedData, format, rgbSize, rgbBuf.get(),
+    gfx::ConvertYCbCrToRGB(*decodedData, format, rgbSize, rgbBuf.get(),
                            rgbStride.value());
   }
 
   MOZ_LOG(sAVIFLog, LogLevel::Debug,
           ("[this=%p] calling SurfacePipeFactory::CreateSurfacePipe", this));
-  Maybe<SurfacePipe> pipe = SurfacePipeFactory::CreateReorientSurfacePipe(
-      this, Size(), OutputSize(), format, mTransform, GetOrientation());
 
-  if (!pipe) {
+  Maybe<SurfacePipe> pipe = Nothing();
+
+  if (mIsAnimated) {
+    SurfaceFormat outFormat =
+        decodedData->mAlpha ? SurfaceFormat::OS_RGBA : SurfaceFormat::OS_RGBX;
+    Maybe<AnimationParams> animParams;
+    if (!IsFirstFrameDecode()) {
+      animParams.emplace(decodedData->mRenderRect.ToUnknownRect(),
+                         parsedImage.mDuration, parsedImage.mFrameNum,
+                         BlendMethod::SOURCE, DisposalMethod::CLEAR_ALL);
+    }
+    pipe = SurfacePipeFactory::CreateSurfacePipe(
+        this, Size(), OutputSize(), decodedData->mRenderRect, format, outFormat,
+        animParams, mTransform, SurfacePipeFlags());
+  } else {
+    pipe = SurfacePipeFactory::CreateReorientSurfacePipe(
+        this, Size(), OutputSize(), format, mTransform, GetOrientation());
+  }
+
+  if (pipe.isNothing()) {
     MOZ_LOG(sAVIFLog, LogLevel::Debug,
             ("[this=%p] could not initialize surface pipe", this));
     return AsVariant(NonDecoderResult::PipeInitError);
@@ -1656,10 +1747,20 @@ nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
           ("[this=%p] writing to surface complete", this));
 
   if (writeBufferResult == WriteState::FINISHED) {
-    PostFrameStop(hasAlpha ? Opacity::SOME_TRANSPARENCY
-                           : Opacity::FULLY_OPAQUE);
-    PostDecodeDone();
-    return r;
+    PostFrameStop(mHasAlpha ? Opacity::SOME_TRANSPARENCY
+                            : Opacity::FULLY_OPAQUE);
+
+    if (!mIsAnimated || IsFirstFrameDecode()) {
+      PostDecodeDone(0);
+      return DecodeResult(NonDecoderResult::Complete);
+    }
+
+    if (isDone) {
+      PostDecodeDone(-1);
+      return DecodeResult(NonDecoderResult::Complete);
+    }
+
+    return DecodeResult(NonDecoderResult::OutputAvailable);
   }
 
   return AsVariant(NonDecoderResult::WriteBufferError);
@@ -1667,11 +1768,10 @@ nsAVIFDecoder::DecodeResult nsAVIFDecoder::Decode(
 
 /* static */
 bool nsAVIFDecoder::IsDecodeSuccess(const DecodeResult& aResult) {
-  if (aResult.is<Dav1dResult>() || aResult.is<AOMResult>()) {
-    return aResult == DecodeResult(Dav1dResult(0)) ||
-           aResult == DecodeResult(AOMResult(AOM_CODEC_OK));
-  }
-  return false;
+  return aResult == DecodeResult(NonDecoderResult::OutputAvailable) ||
+         aResult == DecodeResult(NonDecoderResult::Complete) ||
+         aResult == DecodeResult(Dav1dResult(0)) ||
+         aResult == DecodeResult(AOMResult(AOM_CODEC_OK));
 }
 
 void nsAVIFDecoder::RecordDecodeResultTelemetry(
@@ -1692,7 +1792,7 @@ void nsAVIFDecoder::RecordDecodeResultTelemetry(
       case MP4PARSE_STATUS_OOM:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::out_of_memory);
         return;
-      case MP4PARSE_STATUS_MISSING_BRAND:
+      case MP4PARSE_STATUS_MISSING_AVIF_OR_AVIS_BRAND:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::missing_brand);
         return;
       case MP4PARSE_STATUS_FTYP_NOT_FIRST:
@@ -1701,10 +1801,10 @@ void nsAVIFDecoder::RecordDecodeResultTelemetry(
       case MP4PARSE_STATUS_NO_IMAGE:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::no_image);
         return;
-      case MP4PARSE_STATUS_MULTIPLE_MOOV:
+      case MP4PARSE_STATUS_MOOV_BAD_QUANTITY:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::multiple_moov);
         return;
-      case MP4PARSE_STATUS_NO_MOOV:
+      case MP4PARSE_STATUS_MOOV_MISSING:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::no_moov);
         return;
       case MP4PARSE_STATUS_LSEL_NO_ESSENTIAL:
@@ -1719,7 +1819,7 @@ void nsAVIFDecoder::RecordDecodeResultTelemetry(
       case MP4PARSE_STATUS_TXFORM_NO_ESSENTIAL:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::txform_no_essential);
         return;
-      case MP4PARSE_STATUS_NO_PRIMARY_ITEM:
+      case MP4PARSE_STATUS_PITM_MISSING:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::no_primary_item);
         return;
       case MP4PARSE_STATUS_IMAGE_ITEM_TYPE:
@@ -1731,12 +1831,15 @@ void nsAVIFDecoder::RecordDecodeResultTelemetry(
       case MP4PARSE_STATUS_CONSTRUCTION_METHOD:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::construction_method);
         return;
-      case MP4PARSE_STATUS_ITEM_LOC_NOT_FOUND:
+      case MP4PARSE_STATUS_ILOC_MISSING:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::item_loc_not_found);
         return;
-      case MP4PARSE_STATUS_NO_ITEM_DATA_BOX:
+      case MP4PARSE_STATUS_IDAT_MISSING:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::no_item_data_box);
         return;
+      default:
+        AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::uncategorized);
+        return;
     }
 
     MOZ_LOG(sAVIFLog, LogLevel::Error,
@@ -1749,10 +1852,9 @@ void nsAVIFDecoder::RecordDecodeResultTelemetry(
     switch (aResult.as<NonDecoderResult>()) {
       case NonDecoderResult::NeedMoreData:
         return;
-      case NonDecoderResult::MetadataOk:
+      case NonDecoderResult::OutputAvailable:
         return;
-      case NonDecoderResult::NoPrimaryItem:
-        AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::no_primary_item);
+      case NonDecoderResult::Complete:
         return;
       case NonDecoderResult::SizeOverflow:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::size_overflow);
@@ -1778,6 +1880,9 @@ void nsAVIFDecoder::RecordDecodeResultTelemetry(
       case NonDecoderResult::InvalidCICP:
         AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::invalid_cicp);
         return;
+      case NonDecoderResult::NoSamples:
+        AccumulateCategorical(LABELS_AVIF_DECODE_RESULT::no_samples);
+        return;
     }
     MOZ_ASSERT_UNREACHABLE("unknown NonDecoderResult");
   } else {
diff --git a/image/decoders/nsAVIFDecoder.h b/image/decoders/nsAVIFDecoder.h
index c653a8131dcf..f9c37291580d 100644
--- a/image/decoders/nsAVIFDecoder.h
+++ b/image/decoders/nsAVIFDecoder.h
@@ -8,7 +8,10 @@
 #define mozilla_image_decoders_nsAVIFDecoder_h
 
 #include "Decoder.h"
+#include "mozilla/gfx/Types.h"
+#include "MP4Metadata.h"
 #include "mp4parse.h"
+#include "SampleIterator.h"
 #include "SurfacePipe.h"
 
 #include "aom/aom_decoder.h"
@@ -19,6 +22,9 @@
 namespace mozilla {
 namespace image {
 class RasterImage;
+class AVIFDecoderStream;
+class AVIFParser;
+class AVIFDecoderInterface;
 
 class nsAVIFDecoder final : public Decoder {
  public:
@@ -34,6 +40,7 @@ class nsAVIFDecoder final : public Decoder {
  private:
   friend class DecoderFactory;
   friend class AVIFDecoderInterface;
+  friend class AVIFParser;
 
   // Decoders should only be instantiated via DecoderFactory.
   explicit nsAVIFDecoder(RasterImage* aImage);
@@ -46,8 +53,8 @@ class nsAVIFDecoder final : public Decoder {
   typedef Variant<aom_codec_err_t, NonAOMCodecError> AOMResult;
   enum class NonDecoderResult {
     NeedMoreData,
-    MetadataOk,
-    NoPrimaryItem,
+    OutputAvailable,
+    Complete,
     SizeOverflow,
     OutOfMemory,
     PipeInitError,
@@ -56,9 +63,12 @@ class nsAVIFDecoder final : public Decoder {
     AlphaYColorDepthMismatch,
     MetadataImageSizeMismatch,
     InvalidCICP,
+    NoSamples,
   };
   using DecodeResult =
       Variant<Mp4parseStatus, NonDecoderResult, Dav1dResult, AOMResult>;
+  Mp4parseStatus CreateParser();
+  DecodeResult CreateDecoder();
   DecodeResult Decode(SourceBufferIterator& aIterator, IResumable* aOnResume);
 
   static bool IsDecodeSuccess(const DecodeResult& aResult);
@@ -66,9 +76,206 @@ class nsAVIFDecoder final : public Decoder {
   void RecordDecodeResultTelemetry(const DecodeResult& aResult);
 
   Vector<uint8_t> mBufferedData;
+  UniquePtr<AVIFDecoderStream> mBufferStream;
 
   /// Pointer to the next place to read from mBufferedData
   const uint8_t* mReadCursor = nullptr;
+
+  UniquePtr<AVIFParser> mParser = nullptr;
+  UniquePtr<AVIFDecoderInterface> mDecoder = nullptr;
+
+  bool mIsAnimated = false;
+  bool mHasAlpha = false;
+};
+
+class AVIFDecoderStream : public ByteStream {
+ public:
+  explicit AVIFDecoderStream(Vector<uint8_t>* aBuffer) { mBuffer = aBuffer; }
+
+  virtual bool ReadAt(int64_t offset, void* data, size_t size,
+                      size_t* bytes_read) override;
+  virtual bool CachedReadAt(int64_t offset, void* data, size_t size,
+                            size_t* bytes_read) override {
+    return ReadAt(offset, data, size, bytes_read);
+  };
+  virtual bool Length(int64_t* size) override;
+  virtual const uint8_t* GetContiguousAccess(int64_t aOffset,
+                                             size_t aSize) override;
+
+ private:
+  Vector<uint8_t>* mBuffer;
+};
+
+struct AVIFImage {
+  uint32_t mFrameNum = 0;
+  FrameTimeout mDuration = FrameTimeout::Zero();
+  RefPtr<MediaRawData> mColorImage = nullptr;
+  RefPtr<MediaRawData> mAlphaImage = nullptr;
+};
+
+class AVIFParser {
+ public:
+  static Mp4parseStatus Create(const Mp4parseIo* aIo, ByteStream* aBuffer,
+                               UniquePtr<AVIFParser>& aParserOut);
+
+  ~AVIFParser();
+
+  const Mp4parseAvifInfo& GetInfo() const { return mInfo; }
+
+  nsAVIFDecoder::DecodeResult GetImage(AVIFImage& aImage);
+
+  bool IsAnimated() const;
+
+ private:
+  explicit AVIFParser(const Mp4parseIo* aIo);
+
+  Mp4parseStatus Init(ByteStream* aBuffer);
+
+  struct FreeAvifParser {
+    void operator()(Mp4parseAvifParser* aPtr) { mp4parse_avif_free(aPtr); }
+  };
+
+  const Mp4parseIo* mIo;
+  UniquePtr<Mp4parseAvifParser, FreeAvifParser> mParser = nullptr;
+  Mp4parseAvifInfo mInfo = {};
+
+  UniquePtr<SampleIterator> mColorSampleIter = nullptr;
+  UniquePtr<SampleIterator> mAlphaSampleIter = nullptr;
+  uint32_t mFrameNum = 0;
+};
+
+struct Dav1dPictureUnref {
+  void operator()(Dav1dPicture* aPtr) {
+    dav1d_picture_unref(aPtr);
+    delete aPtr;
+  }
+};
+
+using OwnedDav1dPicture = UniquePtr<Dav1dPicture, Dav1dPictureUnref>;
+
+class OwnedAOMImage {
+ public:
+  ~OwnedAOMImage();
+
+  static OwnedAOMImage* CopyFrom(aom_image_t* aImage, bool aIsAlpha);
+
+  aom_image_t* GetImage() { return mImage.isSome() ? mImage.ptr() : nullptr; }
+
+ private:
+  OwnedAOMImage();
+
+  bool CloneFrom(aom_image_t* aImage, bool aIsAlpha);
+
+  // The mImage's planes are referenced to mBuffer
+  Maybe<aom_image_t> mImage;
+  UniquePtr<uint8_t[]> mBuffer;
+};
+
+struct AVIFDecodedData : layers::PlanarYCbCrData {
+ public:
+  OrientedIntRect mRenderRect = {};
+  gfx::CICP::ColourPrimaries mColourPrimaries = gfx::CICP::CP_UNSPECIFIED;
+  gfx::CICP::TransferCharacteristics mTransferCharacteristics =
+      gfx::CICP::TC_UNSPECIFIED;
+  gfx::CICP::MatrixCoefficients mMatrixCoefficients = gfx::CICP::MC_UNSPECIFIED;
+
+  OwnedDav1dPicture mColorDav1d;
+  OwnedDav1dPicture mAlphaDav1d;
+  UniquePtr<OwnedAOMImage> mColorAOM;
+  UniquePtr<OwnedAOMImage> mAlphaAOM;
+
+  // CICP values (either from the BMFF container or the AV1 sequence header) are
+  // used to create the colorspace transform. CICP::MatrixCoefficients is only
+  // stored for the sake of telemetry, since the relevant information for YUV ->
+  // RGB conversion is stored in mYUVColorSpace.
+  //
+  // There are three potential sources of color information for an AVIF:
+  // 1. ICC profile via a ColourInformationBox (colr) defined in [ISOBMFF]
+  //    § 12.1.5 "Colour information" and [MIAF] § 7.3.6.4 "Colour information
+  //    property"
+  // 2. NCLX (AKA CICP see [ITU-T H.273]) values in the same
+  // ColourInformationBox
+  //    which can have an ICC profile or NCLX values, not both).
+  // 3. NCLX values in the AV1 bitstream
+  //
+  // The 'colr' box is optional, but there are always CICP values in the AV1
+  // bitstream, so it is possible to have both. Per ISOBMFF § 12.1.5.1
+  // > If colour information is supplied in both this box, and also in the
+  // > video bitstream, this box takes precedence, and over-rides the
+  // > information in the bitstream.
+  //
+  // If present, the ICC profile takes precedence over CICP values, but only
+  // specifies the color space, not the matrix coefficients necessary to convert
+  // YCbCr data (as most AVIF are encoded) to RGB. The matrix coefficients are
+  // always derived from the CICP values for matrix_coefficients (and
+  // potentially colour_primaries, but in that case only the CICP values for
+  // colour_primaries will be used, not anything harvested from the ICC
+  // profile).
+  //
+  // If there is no ICC profile, the color space transform will be based on the
+  // CICP values either from the 'colr' box, or if absent/unspecified, the
+  // decoded AV1 sequence header.
+  //
+  // For values that are 2 (meaning unspecified) after trying both, the
+  // fallback values are:
+  // - CP:  1 (BT.709/sRGB)
+  // - TC: 13 (sRGB)
+  // - MC:  6 (BT.601)
+  // - Range: Full
+  //
+  // Additional details here:
+  // <https://github.com/AOMediaCodec/libavif/wiki/CICP#unspecified>. Note
+  // that this contradicts the current version of [MIAF] § 7.3.6.4 which
+  // specifies MC=1 (BT.709). This is revised in [MIAF DAMD2] and confirmed by
+  // <https://github.com/AOMediaCodec/av1-avif/issues/77#issuecomment-676526097>
+  //
+  // The precedence for applying the various values and defaults in the event
+  // no valid values are found are managed by the following functions.
+  //
+  // References:
+  // [ISOBMFF]: ISO/IEC 14496-12:2020 <https://www.iso.org/standard/74428.html>
+  // [MIAF]: ISO/IEC 23000-22:2019 <https://www.iso.org/standard/74417.html>
+  // [MIAF DAMD2]: ISO/IEC 23000-22:2019/FDAmd 2
+  // <https://www.iso.org/standard/81634.html>
+  // [ITU-T H.273]: Rec. ITU-T H.273 (12/2016)
+  //     <https://www.itu.int/rec/T-REC-H.273-201612-I/en>
+  void SetCicpValues(
+      const Mp4parseNclxColourInformation* aNclx,
+      const gfx::CICP::ColourPrimaries aAv1ColourPrimaries,
+      const gfx::CICP::TransferCharacteristics aAv1TransferCharacteristics,
+      const gfx::CICP::MatrixCoefficients aAv1MatrixCoefficients);
+};
+
+// An interface to do decode and get the decoded data
+class AVIFDecoderInterface {
+ public:
+  using Dav1dResult = nsAVIFDecoder::Dav1dResult;
+  using NonAOMCodecError = nsAVIFDecoder::NonAOMCodecError;
+  using AOMResult = nsAVIFDecoder::AOMResult;
+  using NonDecoderResult = nsAVIFDecoder::NonDecoderResult;
+  using DecodeResult = nsAVIFDecoder::DecodeResult;
+
+  virtual ~AVIFDecoderInterface() = default;
+
+  // Set the mDecodedData if Decode() succeeds
+  virtual DecodeResult Decode(bool aIsMetadataDecode,
+                              const Mp4parseAvifInfo& aAVIFInfo,
+                              const AVIFImage& aSamples) = 0;
+  // Must be called only once after Decode() succeeds
+  UniquePtr<AVIFDecodedData> GetDecodedData() {
+    MOZ_ASSERT(mDecodedData);
+    return std::move(mDecodedData);
+  }
+
+ protected:
+  explicit AVIFDecoderInterface() = default;
+
+  inline static bool IsDecodeSuccess(const DecodeResult& aResult) {
+    return nsAVIFDecoder::IsDecodeSuccess(aResult);
+  }
+
+  // The mDecodedData is valid after Decode() succeeds
+  UniquePtr<AVIFDecodedData> mDecodedData;
 };
 
 }  // namespace image
diff --git a/modules/libpref/init/StaticPrefList.yaml b/modules/libpref/init/StaticPrefList.yaml
index 3be94909c17e..89f32084b136 100644
--- a/modules/libpref/init/StaticPrefList.yaml
+++ b/modules/libpref/init/StaticPrefList.yaml
@@ -6987,6 +6987,19 @@
   value: true
   mirror: always
 
+# Whether to allow decoding of animated AVIF sequences.
+- name: image.avif.sequence.enabled
+  type: RelaxedAtomicBool
+  value: true
+  mirror: always
+
+# Whether AVIF files containing sequences should be animated even when the
+# major brand is set to 'avif'.
+- name: image.avif.sequence.animate_avif_major_branded_images
+  type: RelaxedAtomicBool
+  value: true
+  mirror: always
+
 # Whether we attempt to decode JXL images or not.
 - name: image.jxl.enabled
   type: RelaxedAtomicBool
diff --git a/third_party/rust/humantime/.cargo-checksum.json b/third_party/rust/humantime/.cargo-checksum.json
index 80dbdff4f914..4caa6f42449b 100644
--- a/third_party/rust/humantime/.cargo-checksum.json
+++ b/third_party/rust/humantime/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.toml":"c0d1443ae237dee3c09cb70185fa947d8d8cb660acfbcb8f650798bd4e0c019e","LICENSE-APACHE":"c6596eb7be8581c18be736c846fb9173b69eccf6ef94c5135893ec56bd92ba08","LICENSE-MIT":"f6deca8261a8f4a3403dc74c725c46051157fd36c27cd4b100277eb1f303ad11","README.md":"e4bb65f28ddffb11d7eb337e9585947651f2fc11a5e4290f0ca126e21c582c1e","benches/datetime_format.rs":"ffe2e459e9b48e8fdbfb3686f6297257d66b29369ecd6750ae9fbba527ccc681","benches/datetime_parse.rs":"8039c4bd5f1795dbb54e1e39da5988f1d2df6c86c42d8fd378094fc78074d31e","bulk.yaml":"17c2548388e0cd3a63473021a2f1e4ddedee082d79d9167cb31ad06a1890d3fc","src/date.rs":"a8159494372ba8ec8a3a0a5b69c9b185f3e7ab007f283188bf96a6f071151f20","src/duration.rs":"4939ae2d1c3056424de421c4b124d0fb387e058d9abc82a21b83b38d66a40753","src/lib.rs":"ad4dbed28080d9a64ef0100c96b20ff4988d9dde908f56e28ece7252f5932990","src/wrapper.rs":"badc640e77379a42b2fcb728337d60a764b7f00a1b5b1d50c7372ddc20941967","vagga.yaml":"8396fe1510117c1c7bc3e896b62290dcf2dd300346071297018b0077ad9e45ce"},"package":"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4"}
\ No newline at end of file
+{"files":{},"package":"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4"}
\ No newline at end of file
diff --git a/third_party/rust/mp4parse/.cargo-checksum.json b/third_party/rust/mp4parse/.cargo-checksum.json
index eff7dfbf0d9c..4a0342ad78d0 100644
--- a/third_party/rust/mp4parse/.cargo-checksum.json
+++ b/third_party/rust/mp4parse/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.toml":"f283fc1597f492cd1e03cd08b9c77f042ae4494fc96b4dcb566ec0abbda65efc","LICENSE":"fab3dd6bdab226f1c08630b1dd917e11fcb4ec5e1e020e2c16f83a0a13863e85","README.md":"86cb40854b93f988e3a63ce6fe39d2ce95367f8ca301a5ba50676ff98a0ad791","benches/avif_benchmark.rs":"cd99c0dde025ab40d2cd860f53dc697a1587a48c164c3e5c8adfd40add29d772","link-u-avif-sample-images/.github/workflows/encode-and-decode-daily.yml":"84b787f721024a100ce09ac5714a1d78a4811893861e89495313f435b9d02359","link-u-avif-sample-images/.gitignore":"ac16d40779ab2d608843a3cb1b0418a1ffdc0e71a06c4d140386fadf007a54a7","link-u-avif-sample-images/LICENSE.txt":"da89f9867822be4b8adb1e601d9e9226c195016c6508015eb7593e68ead0c98a","link-u-avif-sample-images/Makefile":"b5697e8685d2a9ce0f4b4c976a5f707022ed113782d16dc59ae280d3a8ce77b1","link-u-avif-sample-images/README.md":"d249fb7bef4f21359cfc4f2977e1b2f2c6e6dd6e57cb1cdc1da1f0edd8aa55d0","link-u-avif-sample-images/fox.jpg":"927997a90ae88ead007283bf9c1392159d0acd2e9890522146211fda2112a2d9","link-u-avif-sample-images/fox.odd-height.png":"6136247772bd1c0edd50426bca4f3485473ac25a784e5ec8777f7491598e96db","link-u-avif-sample-images/fox.odd-width.odd-height.png":"6f91dc21c137f318d0443ce28bbf3f74d5502180c254327b46e41040a33f1363","link-u-avif-sample-images/fox.odd-width.png":"a8b2328c8700c16280c5ab40a34147edac598d4d48ca101bef649e468ae1492e","link-u-avif-sample-images/fox.png":"c45bfb5780843c70a37426340020e3e7ff41d7cf1df9fec614a5cf429d078573","link-u-avif-sample-images/fox.profile0.10bpc.yuv420.avif":"811af5e96631309030a14cbc30c3bacfaa667f2e36e16a4f30434b8f5a23310c","link-u-avif-sample-images/fox.profile0.10bpc.yuv420.monochrome.avif":"e35713343e9ee04c51ab9cfdc99a0c7d126a1917cb83f5b9a23c71ed59269be2","link-u-avif-sample-images/fox.profile0.10bpc.yuv420.monochrome.odd-height.avif":"485623f7838d8f442c47348c6492765e6aafbc3d5ccd8e90efc9c812ff15e265","link-u-avif-sample-images/fox.profile0.10bpc.yuv420.monochrome.odd-width.avif":"8e75b9a8975267359d827e4cbc6877b1674aa31b87f88f222dde03263f9254df","link-u-avif-sample-images/fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif":"1fff5915a332d6aaa85d668f3f338bda6fad9c6ec1f380f2c46737d536cea5de","link-u-avif-sample-images/fox.profile0.10bpc.yuv420.odd-height.avif":"cca9785f14c74d865453518c0962dabd6d1b92d2c6c5f5ac67efdbf5606acb83","link-u-avif-sample-images/fox.profile0.10bpc.yuv420.odd-width.avif":"de3399d8b56431f0ed34e2f14200f31dd54544fddbb12f39b4d55449d5660c56","link-u-avif-sample-images/fox.profile0.10bpc.yuv420.odd-width.odd-height.avif":"07507744cb76b74a3586b93fc3b273a98f998d75f7687db3e9cb3725d7b1fb9d","link-u-avif-sample-images/fox.profile0.8bpc.yuv420.avif":"cb884c82ac7b6d4fa03b1f687e9e20abc346107095473e9c1d422aaf0de14eaf","link-u-avif-sample-images/fox.profile0.8bpc.yuv420.monochrome.avif":"15d84077066c47fdbe2a7b8ed583a17017d09a033144ac1b31486d6c8f6f5c82","link-u-avif-sample-images/fox.profile0.8bpc.yuv420.monochrome.odd-height.avif":"365439d2ee2fe5229e066362c03a73a182c7f6626772ecf5345b22752d32e681","link-u-avif-sample-images/fox.profile0.8bpc.yuv420.monochrome.odd-width.avif":"c623b9943123d6c47d3300444f7255cbdfebfe2b47a670287f2baeb717fac42b","link-u-avif-sample-images/fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif":"dd069f3c3c4f7589f5f7ef1d7b6a91b8cb975d32663a4a92b6d75219edd72954","link-u-avif-sample-images/fox.profile0.8bpc.yuv420.odd-height.avif":"75628450288ace3386651725411c8f0ffff7eb95f82c5307b0faa3350f09f50e","link-u-avif-sample-images/fox.profile0.8bpc.yuv420.odd-width.avif":"f91b6f455412adabc5094011362eaaa1f6a9d5740de0b8a1be42a96c16e7617f","link-u-avif-sample-images/fox.profile0.8bpc.yuv420.odd-width.odd-height.avif":"bb8695cacacaf8f2e13a739de75e5e8a9d970d68c3acdfb7d82171a9bac2f01e","link-u-avif-sample-images/fox.profile1.10bpc.yuv444.avif":"a10de8204aee73ba1786daca6390546bd7aa6b069aaa644012219a1c11246a43","link-u-avif-sample-images/fox.profile1.10bpc.yuv444.odd-height.avif":"734a5badc59a8bed19e8eb476911048ddb011ca7c9eac31b7a7ed20e0135ac2c","link-u-avif-sample-images/fox.profile1.10bpc.yuv444.odd-width.avif":"68d15d76d95f268e810dfd87bbf96d8c3197580afce2d30b50bb1f07865077f3","link-u-avif-sample-images/fox.profile1.10bpc.yuv444.odd-width.odd-height.avif":"01e469b33bacb7e07e15e23b2997907bbcf02d8fcc99885a027494d31c45547c","link-u-avif-sample-images/fox.profile1.8bpc.yuv444.avif":"a0cdc981a6b056c8af2d177a1438c332d630040dacbfd1c89bb5e3e381ba5822","link-u-avif-sample-images/fox.profile1.8bpc.yuv444.odd-height.avif":"77e0510def73213c00ebcf051cf45fa63cf27d7c69340cc145ab6d44ec77bb07","link-u-avif-sample-images/fox.profile1.8bpc.yuv444.odd-width.avif":"12787042364bd13be01830f988cb714220bde340a3329baa808df27a269b83f8","link-u-avif-sample-images/fox.profile1.8bpc.yuv444.odd-width.odd-height.avif":"fad3b6dd9cb99e6925858f69aafae3f68c861845f2c3d4a6d1c51c6161490134","link-u-avif-sample-images/fox.profile2.10bpc.yuv422.avif":"e34f3bab5df802be2d422c685824464eb5f7e182b235ca99bde11c4c34ff3ac2","link-u-avif-sample-images/fox.profile2.10bpc.yuv422.monochrome.avif":"05804752621e2fd7a9d85b01e2995a50e3efd30693efd934152560622d66e841","link-u-avif-sample-images/fox.profile2.10bpc.yuv422.monochrome.odd-height.avif":"ef041f2efa0424d3a6dcfc5f0c3f619aea0e197aaeb5a050a2d877a457513921","link-u-avif-sample-images/fox.profile2.10bpc.yuv422.monochrome.odd-width.avif":"b711b321b8a4d3a41e08f80a17c2203b839458cb6346aff6fff3f8d7699032e6","link-u-avif-sample-images/fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif":"e3f40aad0ddd6c04ffacf4a754a0525986c89d519119d37655282551e3ea3a59","link-u-avif-sample-images/fox.profile2.10bpc.yuv422.odd-height.avif":"4ef74c37712b41d6e5269d939f9d52031bc10746f7c8c029db618c5935aff9a6","link-u-avif-sample-images/fox.profile2.10bpc.yuv422.odd-width.avif":"4cf6c849f4a48a639217ad9a1e0d027f4fc804d524c03e6707ec9714a252532f","link-u-avif-sample-images/fox.profile2.10bpc.yuv422.odd-width.odd-height.avif":"3d3978e8e8d07270f82a877d3535f9483b88fce93a1c4accb658b494452b1d36","link-u-avif-sample-images/fox.profile2.12bpc.yuv420.avif":"626d73272e59722084c528b27b72a0920bec462a10749b3e87036e42bf8a24e5","link-u-avif-sample-images/fox.profile2.12bpc.yuv420.monochrome.avif":"caf50c467242b3fa0b895a2af131fa0d03dd7b34989f2b1a51d25b2246c98fab","link-u-avif-sample-images/fox.profile2.12bpc.yuv420.monochrome.odd-height.avif":"1e88b92df592c02af53ff5258fa898ac8fe1d71954e9a440500ef7879b8a1c46","link-u-avif-sample-images/fox.profile2.12bpc.yuv420.monochrome.odd-width.avif":"466efdd269f3be3b1c88afc093c839e50ba5eaf6bd0c2425e157000d02a3c21a","link-u-avif-sample-images/fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif":"36014509d0688cb307e0ffcdb5b4c16ff6e6c79772c7fbbeea33b4d483a1566f","link-u-avif-sample-images/fox.profile2.12bpc.yuv420.odd-height.avif":"d1786723a5d6ea1e1764b0045dc3f669fe3905ffc2913011a2b1b424d2393397","link-u-avif-sample-images/fox.profile2.12bpc.yuv420.odd-width.avif":"a2d9178cc5622e28472a735650d9c4deaec6d27d69830110911f4158f9d4a04e","link-u-avif-sample-images/fox.profile2.12bpc.yuv420.odd-width.odd-height.avif":"89a9fc7598d72251b903e0c7088ab3e7a7f316b5e02b85f8c69e51f8eb0c7e69","link-u-avif-sample-images/fox.profile2.12bpc.yuv422.avif":"51476b8471e1c0a5ebbd1e7545709495bef619cc96c02d277aad32b1deff8ea9","link-u-avif-sample-images/fox.profile2.12bpc.yuv422.monochrome.avif":"caf50c467242b3fa0b895a2af131fa0d03dd7b34989f2b1a51d25b2246c98fab","link-u-avif-sample-images/fox.profile2.12bpc.yuv422.monochrome.odd-height.avif":"1e88b92df592c02af53ff5258fa898ac8fe1d71954e9a440500ef7879b8a1c46","link-u-avif-sample-images/fox.profile2.12bpc.yuv422.monochrome.odd-width.avif":"466efdd269f3be3b1c88afc093c839e50ba5eaf6bd0c2425e157000d02a3c21a","link-u-avif-sample-images/fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif":"36014509d0688cb307e0ffcdb5b4c16ff6e6c79772c7fbbeea33b4d483a1566f","link-u-avif-sample-images/fox.profile2.12bpc.yuv422.odd-height.avif":"4808960cdcd1207b29eb6ef5b4db81ae5e63c5d40ef92f7a1e8f4430e765bde4","link-u-avif-sample-images/fox.profile2.12bpc.yuv422.odd-width.avif":"71f3c73737bc04c23d93ea2c61a8a07408f604192fe53fe12c65050927dacb4e","link-u-avif-sample-images/fox.profile2.12bpc.yuv422.odd-width.odd-height.avif":"8f9649384fa09c70af0c2e9e0d94ecd17492c702e015d9d6290d3aefc57c548c","link-u-avif-sample-images/fox.profile2.12bpc.yuv444.avif":"ed96eca6ed79863eaf91e4d666e4e220b5fa4e5a6cb1696477ba901ac12f5dde","link-u-avif-sample-images/fox.profile2.12bpc.yuv444.monochrome.avif":"caf50c467242b3fa0b895a2af131fa0d03dd7b34989f2b1a51d25b2246c98fab","link-u-avif-sample-images/fox.profile2.12bpc.yuv444.monochrome.odd-height.avif":"1e88b92df592c02af53ff5258fa898ac8fe1d71954e9a440500ef7879b8a1c46","link-u-avif-sample-images/fox.profile2.12bpc.yuv444.monochrome.odd-width.avif":"466efdd269f3be3b1c88afc093c839e50ba5eaf6bd0c2425e157000d02a3c21a","link-u-avif-sample-images/fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif":"36014509d0688cb307e0ffcdb5b4c16ff6e6c79772c7fbbeea33b4d483a1566f","link-u-avif-sample-images/fox.profile2.12bpc.yuv444.odd-height.avif":"c43b4c607e301e34eb953770133d89d15e77d63be8d6421a80d6212fbbbf3453","link-u-avif-sample-images/fox.profile2.12bpc.yuv444.odd-width.avif":"0e6218ce250ee7f84a621f3af73286fd4dabea19e9898d3575c20c5955aa427d","link-u-avif-sample-images/fox.profile2.12bpc.yuv444.odd-width.odd-height.avif":"9f19846d884ac7d161ac2ca15811bb22ff7f3847bc1ad5d7713971ea024631aa","link-u-avif-sample-images/fox.profile2.8bpc.yuv422.avif":"2cb363d30f83bff58ee049874b1808b37cb1d35342edf16b3ce25cb243c9ea55","link-u-avif-sample-images/fox.profile2.8bpc.yuv422.monochrome.avif":"8217b88f350c5d3812d7f863fe9d710c4c1b846b0be8df29ce6b3eb30d2b8d8f","link-u-avif-sample-images/fox.profile2.8bpc.yuv422.monochrome.odd-height.avif":"51eccd8c1368ddec9bc1f3a7631dadb00682e985fbfea66c0a2f533f6a73b67e","link-u-avif-sample-images/fox.profile2.8bpc.yuv422.monochrome.odd-width.avif":"83fe4593ab839cf296a2ccb8a146daf826d1d602f4f239cb63ee020f2cc326f6","link-u-avif-sample-images/fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif":"4e63b84a980a81adde586314a94d8f834ec763749d8797c286471415b6b75647","link-u-avif-sample-images/fox.profile2.8bpc.yuv422.odd-height.avif":"efc70882aacbb533c0e833a4401949d152dceb364846442cdccca5048ad17a60","link-u-avif-sample-images/fox.profile2.8bpc.yuv422.odd-width.avif":"c07575c88ef400c1725c9260a19439e0e784da41c7db3867059019ddbdb3bebe","link-u-avif-sample-images/fox.profile2.8bpc.yuv422.odd-width.odd-height.avif":"86aee64fd7b11b9834537ea14b2eff234c062c98d32fab51ff14aba262d5b106","link-u-avif-sample-images/hato.16bpc.png":"53b550c587cd1d19a1997184e47f4a3ff2a05cedf7cb4e42a9466a6d6cb60d8d","link-u-avif-sample-images/hato.jpg":"6d4804e5e4adf36a6b138544c81b743ed7abdd9a495a43e883ec77689ca28943","link-u-avif-sample-images/hato.png":"313880f4cc51160fec522d78f1fb7f06df70fe1929a731fc86c68ecefd312277","link-u-avif-sample-images/hato.profile0.10bpc.yuv420.avif":"1e84598c94bc795c55a551bdf6f283b4eed4997bda15e5c4bb2e29d0dc70897b","link-u-avif-sample-images/hato.profile0.10bpc.yuv420.monochrome.avif":"25c19a187d10eac963bb51b3fae1ffe50f3ccbc7ad02e51948dc7467b397ce61","link-u-avif-sample-images/hato.profile0.8bpc.yuv420.avif":"07cd454de19dd638354f75d9e97aab08bc8a04dd45c4f7531cb62a1a5656c8c9","link-u-avif-sample-images/hato.profile0.8bpc.yuv420.monochrome.avif":"120a3f26f3d6cde80869fb52bdb8fdd55b443882c98070ea938575e4790982ff","link-u-avif-sample-images/hato.profile2.10bpc.yuv422.avif":"d54251d4bc023f2e53624a46cb18e56cbc45768bd1bd50394de191c2a42106e8","link-u-avif-sample-images/hato.profile2.10bpc.yuv422.monochrome.avif":"ed33dfdb5e663b3394298b6921f9b19b129e14788dead776430eee2f14780a73","link-u-avif-sample-images/hato.profile2.12bpc.yuv422.avif":"ad361ac7d94fbc6af7ef30cbd3601ff366bc360c304480387a58a4c6fecee9b6","link-u-avif-sample-images/hato.profile2.12bpc.yuv422.monochrome.avif":"e28b4cacda95750e465e205fbfcba6a6af1d8418dac649838730c555ff7d828f","link-u-avif-sample-images/hato.profile2.8bpc.yuv422.avif":"69c353c482c2eb3d3671bb55f7ccfc932e4d781c714a72116e9138ffc6f6c720","link-u-avif-sample-images/hato.profile2.8bpc.yuv422.monochrome.avif":"e7d6f7d42a8519e1482f225fe447b5642d19a54ee830529223eac114a0dec189","link-u-avif-sample-images/images.html":"9e18453dfe5b205600f158282c6896265281e3b04b2fbc332804fab1dbdb3faf","link-u-avif-sample-images/kimono.avif":"63412e0f67f37c8b6fcf0e8269a2afae0a017fa6a3a99d37d055c590b0be52d3","link-u-avif-sample-images/kimono.crop.avif":"f175dcd9c64813b759da185fa67076fb772b76059845b2aad3ddcfab257f75ad","link-u-avif-sample-images/kimono.crop.png":"0d5605bae0ec9d39aad9dc8e1a371d0327c6a224643983e3ee1f4d44cb00f19d","link-u-avif-sample-images/kimono.jpg":"a6ad58e3cea437ee0c841115ba67ae7354de7af734de50de9d0853dd4e571577","link-u-avif-sample-images/kimono.mirror-horizontal.avif":"2bbc004d91145488610158a5acdb4d706495a2b15511db20ff57bb9efd80885c","link-u-avif-sample-images/kimono.mirror-horizontal.png":"9af9e839fe6bf6342831970c20291f619570d2fc687951ae00cd81ea766f53fe","link-u-avif-sample-images/kimono.mirror-vertical.avif":"f10eb04791fcca3409868b367128649f32e6b6fffcf02484cdefa57909f6bb74","link-u-avif-sample-images/kimono.mirror-vertical.png":"4ed003c5868fd2e78c7b2dcbd54a67a0e7593dabb3ac82b1c9e5e2dbdf09b8ec","link-u-avif-sample-images/kimono.mirror-vertical.rotate270.avif":"33c36ec2274b00ac6f81c9f61e55c20cbfce1649ad27520afe635310f516ead1","link-u-avif-sample-images/kimono.mirror-vertical.rotate270.crop.avif":"90ca48f657455b8f8e4a4e1769a05af90a3e34dca11a8b3c32552daf378ee956","link-u-avif-sample-images/kimono.mirror-vertical.rotate270.png":"74b9b7ffa8955761f747a0e6e81d5b7ecb5e325383546110e1b6aa9986728035","link-u-avif-sample-images/kimono.png":"84fd6cfb97a27739608e21779f874b4ae7e80342b2588e8b0b092dee2d57c881","link-u-avif-sample-images/kimono.rotate270.avif":"79a99a0415276cc11f2e871d070a9df84df3385888a2f2fa3534320f6bed98ed","link-u-avif-sample-images/kimono.rotate270.png":"1918a47c02b378945a705301abd4250ddc65bb95afce9424572ffd0fdd1f45ef","link-u-avif-sample-images/kimono.rotate90.avif":"bd1157d8c840713c82b907b9d3ae80bc3817849e11c323d875f8016e035bd3cc","link-u-avif-sample-images/kimono.rotate90.png":"1a73c61692abe96d0a7a9accdb36a83d51bceac79bbb83a00571570f494cca49","link-u-avif-sample-images/plum-blossom-large.png":"af6ea005b726ca39f342e946aa53bed88e5a140413ce896d166bb35ab0aa3b4f","link-u-avif-sample-images/plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif":"cf8e15ec4b210235f3d68332a1adeb64e35c41b8d8e1e7586ae38b6d9cd8926c","link-u-avif-sample-images/plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif":"b413440309d5669a7aefa06f291f72de0d0c09972e3da9a385e6016d6a1c5562","link-u-avif-sample-images/plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif":"64f6f2b1fda594af5c9e2d6e4bc752b55e8121000cdcedc0066018e53f76de40","link-u-avif-sample-images/plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif":"2b175a600aed64c1c1de4b2d661fb405437b1ff000b964d4be6ac437ce73136f","link-u-avif-sample-images/plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif":"21ebb3732186bf7c6c13cf7197155b64201e674b9c79cf613b6e5718bde14c2a","link-u-avif-sample-images/plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif":"65917797e511c9033b3e225eb5d84f3c0440b7a496d4b8ab5674e123ad68aab7","link-u-avif-sample-images/plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif":"f4809df9188fa46ed100f63c78c4cf42559d90a98351a8f69e177385920672b4","link-u-avif-sample-images/plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif":"dffc213dc36f0b5ff3d86254f5185c2d1fb03380918a8fa39d186fb59cbba7cc","link-u-avif-sample-images/plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif":"0a615cfb673ab45e37da3582c17dd36f86d5da3d81246a32951d1db4ed90149d","link-u-avif-sample-images/plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif":"d1cc6a0db116a68e229676b289e8ced84d42a9f0e8d3ccd760fc92dbeb932547","link-u-avif-sample-images/plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif":"8626cf0b2c60fee51cf1df7fe4d8a18081b72e3604f7d3ff14cc5a35581927d9","link-u-avif-sample-images/plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif":"56bf18e4bcbfbea460c306ab900fc506169854d2b91690e1a48156a86fff3264","link-u-avif-sample-images/plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif":"b56f3c33797e4c5bb80418ae25f6f2c6fc88ddc1f6965d82abc44059f052f36c","link-u-avif-sample-images/plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif":"c3c6db4ce801c68e2afd7bfb72abacc13287cc2e247917a817ff5632bd4b18fb","link-u-avif-sample-images/plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif":"095f57fff1dc037a6414c60263415dcfa86b10d81f58e8e4c3aef17cffae0e5f","link-u-avif-sample-images/plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif":"ba3035a69296d12f47d1c450f2de8cc0c9059ebbf27bb8b0996ff6d1ab1132a1","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif":"a9551e1963049b874216b40aaf9be45bc44dc11887770712b77240862c6c08a9","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif":"a8a0ba881cd0aef45a5874f412e97812ca457eaf12e56b34bac2ba051e142828","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif":"6891b5bdbed7f541c673c66cec4584b191bb737a49b37cca16ae069830890b42","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif":"67e66826637e349e1c3c46316c7048d152aed8453d8cdd00c6b786f87fe176d8","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif":"a466503110f60dcadaafe78c2cb0a8ca58334c22868efe428c7ac12b69407c95","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif":"a8a0ba881cd0aef45a5874f412e97812ca457eaf12e56b34bac2ba051e142828","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif":"061b4c70707e7fc8866580656cca7ca2da2263645829a564dbf8f205d639f058","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif":"67e66826637e349e1c3c46316c7048d152aed8453d8cdd00c6b786f87fe176d8","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif":"4a03c8bcfcaadccdeb07432ed80680b06aba5ae5e616fc370b376acb478f6cd1","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif":"a8a0ba881cd0aef45a5874f412e97812ca457eaf12e56b34bac2ba051e142828","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif":"376625ce4e7ec3b57344a9f2185a34975fe380774c9f8e0dd4ef61c46da94fca","link-u-avif-sample-images/plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif":"67e66826637e349e1c3c46316c7048d152aed8453d8cdd00c6b786f87fe176d8","link-u-avif-sample-images/plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif":"1e17b7dd8e351cb667bc6ec0b81fdebca9fd30ad5e588b3eac57bf9f90a9b58b","link-u-avif-sample-images/plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif":"f77588d2ff39e4461869a95ca236efdf4a3fdc17b8a6e3907e63b417e56c81b5","link-u-avif-sample-images/plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif":"f2eabd3fc2db07b361d55b5af63023d28b5bdd0047a665e9d0685651ce9db94b","link-u-avif-sample-images/plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif":"dd88c377b253d689bfd4600d7c3007448df0ed92f679b661d5d51e051a6916d8","link-u-avif-sample-images/plum-blossom-small.png":"c859fd97b647e494461f65835b9c1c3476807aee77076599adf18a832b3617a4","link-u-avif-sample-images/plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif":"fe3379620f983e5da4210b0f7c5d164e86208b34106d6b11d56e2b52beee5dfe","link-u-avif-sample-images/plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif":"9e6234686053dba2e44bb32192c641074095a61e45aa1bede85bb83751e6e157","link-u-avif-sample-images/plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif":"60ffa59dd007aea3bb596cfb03853b3dad490b1ffd10471ad4fe1901ec819907","link-u-avif-sample-images/plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif":"58abfa027525aca7339a705f311bc30b000aef9822c7c50b232894ece1ba9cb1","link-u-avif-sample-images/plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif":"541ca66a11b1430d11f77b74a13f859239a3bd9f44976b8dfe163c5d7595a69f","link-u-avif-sample-images/plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif":"6d7852c63c27a77bef94443e178ecf6b6a3da8cc846f9f0c1adc17f7fc35e1f3","link-u-avif-sample-images/plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif":"3712216ffc7edb95a976b68469ead533fda6fe9f3d2e8cb09cbdb0d01d9c094b","link-u-avif-sample-images/plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif":"59672af536b169ebf7e48129167dc91cb253925517c37db28b64539f7afba5d3","link-u-avif-sample-images/plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif":"561d5158425ad39425916a3be048b0202e82efef44cf1a9f711db57192d2ff01","link-u-avif-sample-images/plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif":"88336f29457c1dc4ae0b754ef14b791de4d8c337f2b44d7960aafcca08a5586e","link-u-avif-sample-images/plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif":"245a3dad6371dc702f29eb7e9735f843b63c525da871859728bedbe5bb274985","link-u-avif-sample-images/plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif":"490c216b5850c670f6088ee72c7fd906102b2dd0c8432c01a517b3328db27c75","link-u-avif-sample-images/plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif":"0d0bbbcb0c9ade1c827317a6409ce6ba25027b36da1b6752379a5f5d4c8af056","link-u-avif-sample-images/plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif":"418a9d4b7dcbc1f67fc4b95ccb2e7946c446fddd35a79f0d587b3f2165cb3f14","link-u-avif-sample-images/plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif":"a41dcfabb3795ed93a05881a91bf4d1c5d1b9b0e5d0db728f12684b12613e0c9","link-u-avif-sample-images/plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif":"4b6a18f4f608d1b00598e67c1c91a4e8f4943ae5acf0166ae0121cc21f3b7437","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif":"5e6b83adee3aeac4bba3f38e854e2ed7585aa1557a74b5fa66596098c53e26f2","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif":"fb0937564c08f4e1c22ebbde426a0eff6a1d388434c30148bc7e5582dc378caa","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif":"f42e780bff644167e27525fee65b23e70814f7665ea19b6d693eb127c5eeebd8","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif":"d41ead1d69d33d0cf5f6fe575beb5f60d9565300c535f9042113dd8a748c1d31","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif":"c6ee9234ee7783d0203f9512e3cc8fe76a694675bcf03c320ff8bab4684bd4e9","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif":"fb0937564c08f4e1c22ebbde426a0eff6a1d388434c30148bc7e5582dc378caa","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif":"21e1e51fc6da66e090e12e1df5aeabf1f478df64bcb8151caaa687ad262bdd9d","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif":"d41ead1d69d33d0cf5f6fe575beb5f60d9565300c535f9042113dd8a748c1d31","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif":"dfed73d646d7159d3ee4f9ce95ea628fdd33bf8bf1bb02a83d88302d088f4d97","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif":"fb0937564c08f4e1c22ebbde426a0eff6a1d388434c30148bc7e5582dc378caa","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif":"5539cd575256772ba31d6e87cb0136d5f465f84b041a4677b1023cfd6bee9956","link-u-avif-sample-images/plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif":"d41ead1d69d33d0cf5f6fe575beb5f60d9565300c535f9042113dd8a748c1d31","link-u-avif-sample-images/plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif":"f205cf2c05265b84e45ceb723e9a3707fd8749130166d4797e64c8c62b497f8c","link-u-avif-sample-images/plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif":"ad2244cb7b2ac487a5104d6e5a07270f9ceb2550e4d56d3662fcc1868910ced5","link-u-avif-sample-images/plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif":"7ef9468effdc970e4e6e8cc7533d66dc967686e357dda3dda186c021f9e6156b","link-u-avif-sample-images/plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif":"3dd34d854ff83b6e27a2bf98301380a6cac272084ed863735285ab5dc8acda00","link-u-avif-sample-images/plum-blossom.svg":"be1f03dd05f63292c85a96b1c48fb06727283610cc69b1e116d547bab27b171d","link-u-avif-sample-images/red-at-12-oclock-with-color-profile-10bpc.avif":"5842951d81118d256962384e08a986816e8ade6b05530269f0208c6b69cedb3b","link-u-avif-sample-images/red-at-12-oclock-with-color-profile-12bpc.avif":"1f0c9f36d69b9aa13eff3897ada3e78b81099c613b329a402c27e09453e7e261","link-u-avif-sample-images/red-at-12-oclock-with-color-profile-8bpc.avif":"3e6f2f4016e66e3c94707eaa8373e6f582321e005964cd35b64bc183e1bf10ea","link-u-avif-sample-images/red-at-12-oclock-with-color-profile-lossy.avif":"79483242f2dca12c4ec18bd33ff8099216b3094fb55a26a909f046b2f9b4ce58","link-u-avif-sample-images/red-at-12-oclock-with-color-profile.jpg":"d56f809ea5eda74578af57e2f80b41856a1fe2ff436c741aa58757387af998bd","link-u-avif-sample-images/red-at-12-oclock-with-color-profile.png":"4eab95e358eb48e052c7b8c94d30a8c6cb1c9c3c2dfd9845240281dd5dd7b800","link-u-avif-sample-images/scripts/compare.sh":"0562689bcd40e9fc1322bf037d6f999aa4406a2229f19e74b96cc450e370e429","link-u-avif-sample-images/star-10bpc-with-alpha.avifs":"5643ac1f235ae6599186dd66c66507db6fa46a17b2b18e82ea9344870eb98a9b","link-u-avif-sample-images/star-10bpc.avifs":"c61d899a59dbd8c7b2f7bcfca9069a0e13ff1606899af227938a28502e6cbf88","link-u-avif-sample-images/star-12bpc-with-alpha.avifs":"88a350c3550ce36c1777fe7eb1e906c6829d3ed8b241aa1e0e46f1a4e2567c4b","link-u-avif-sample-images/star-12bpc.avifs":"c1a59db6f180208a3177d77c7f9ab08290e903c7bdaf929331b807a510f8c619","link-u-avif-sample-images/star-8bpc-with-alpha.avifs":"13a12908cb162a855cccc9221a5f9f736e8ea07902ffbdcf007f8fde5ed255f2","link-u-avif-sample-images/star-8bpc.avifs":"ae35b161de67a5afeb195ee401f369c34990f0ff8662f70ab4065bc6931f0a66","link-u-avif-sample-images/star.gif":"389cdd02efbdce4f0205cae6e91c1f64e34fa0ca1fe02351da1b37e16cbb642a","link-u-avif-sample-images/star.input.txt":"970163b942843618616f42233abe91d40fb68f6f5451860db259551711867b55","link-u-avif-sample-images/star.png":"18569167cf7ebd265ab6973d071d259aacfbb46c0408b7d4874c8cc9df9bb1ad","link-u-avif-sample-images/star.svg":"13089d0986b31b87919029fa69f2b68981af4023306bf0f79922f6772396008a","link-u-avif-sample-images/star180.png":"21bc11be2b51334fe4589634507612e7edce96d36e6a99219d029e440164e8b8","link-u-avif-sample-images/star270.png":"5c93f538dcdc70840b9925b4089083acc9c25e95265b3f3dea18d695451b441e","link-u-avif-sample-images/star90.png":"2defc5d21e70447653fec5dc14a697d9dd555d7a0c14e79cb2d9f80796a51a6d","src/boxes.rs":"270a3e3bf90279bfc83f95acadaba9611c25243280bca71dfa9c044d5441cf15","src/lib.rs":"73114a5c28472e77082ad259113ffafb418ed602c1741f26da3e10278b0bf93e","src/macros.rs":"76c840f9299797527fe71aa5b378ffb01312767372b45cc62deddb19775400ae","src/tests.rs":"75fe5467109242b2cc7991f8228e2e2ad1de5be2f29272a4a7f08c4e21ab5fa4","src/unstable.rs":"c2cef9a3b2b08a4da66fa0305fce7a117bd99c9b8d57b0a044e1d99dbda6faf5","tests/1x1-black-alpha-50pct-premultiplied.avif":"31a8c235bf2cf601a593a7bc33f7f2779f2d5b2e0cd145897b931fce94b0c0b8","tests/a1lx.avif":"81a784c568e7619bd47c4e7153181e9a86c8a03221097aa63979f97affd7efbb","tests/a1op.avif":"184e50efd3ad226800c610da7bc470d29b548d9fa942fd1fd1848ed02e2e5f0a","tests/alpha_video_avif_major_avis_compatible.avif":"81771981248c4e0d708f0828eadb20e9e37e7c21280efe5726666958f899c237","tests/alpha_video_fixed.avif":"67051d1a4ccf9f3e38d4514d8a6b3a2e07f1beb979369cabdc60881a698a36ac","tests/alpha_video_no_avis.avif":"a95f0e7c818bc5bf646143cf43474b70722e17669d4f2a32874c125936207d6a","tests/amr_nb_1f.3gp":"d1423e3414ad06b69f8b58d5c916ec353ba2d0402d99dec9f1c88acc33b6a127","tests/amr_wb_1f.3gp":"be635b24097e8757b0c04d70ab28e00417ca113e86108b6c269b79b64b89bcd5","tests/av1C-missing-essential.avif":"a1501254c4071847b2269fe40b81409c389ff14e91cf7c0005a47e6ea97a6803","tests/bad-ipma-flags.avif":"ecde7997b97db1910b9dcc7ca8e3c8957da0e83681ea9008c66dc9f12b78ad19","tests/bad-ipma-version.avif":"7f9a1a0b4ebbf8d800d22eaae5ff78970cc6b811317db6c1467c6883952b7c9b","tests/bbb_sunflower_QCIF_30fps_h263_noaudio_1f.3gp":"03e5b1264d0a188d77b9e676ba3ce23a801b17aaa11c0343dfd851d6ea4e3a40","tests/clap-basic-1_3x3-to-1x1.avif":"83af9c8196fa93b2475163585a23d0eb5a8f8015d0db8da7a5d6de61adfb1876","tests/clap-missing-essential.avif":"4d61aacd2327661a456abc76d3d490e5ddd2b6f8cbfa52922a6c541c9d983193","tests/clusterfuzz-testcase-minimized-mp4-6093954524250112":"af7044a470732d4e7e34ac7ab5ff038c58b66f09702cbcd774931d7766bbfd35","tests/corrupt/a1lx-marked-essential.avif":"0d481240222450827ea335ae9a1a300777a0db4f9b0f4c17ed77c758c5133fa3","tests/corrupt/a1op-missing-essential.avif":"33c24d54f43f1a7be7a8334718881c8a0de24730c997c7842b9d7140e75017ea","tests/corrupt/alpha_video_moov_is_moop.avif":"89e0091edd6efc2c5b163525553c5abc56263fe1b3b885184bb07b9ea4bf346d","tests/corrupt/bug-1655846.avif":"e0a5a06225800fadf05f5352503a4cec11af73eef705c43b4acab5f4a99dea50","tests/corrupt/bug-1661347.avif":"31c26561e1d9eafb60f7c5968b82a0859d203d73f17f26b29276256acee12966","tests/corrupt/clusterfuzz-testcase-minimized-avif-4914209301856256.avif":"34a142c7916e314881f3fb6394add1c543fac0e5b45109e3a425eeb4c68998d0","tests/corrupt/hdlr-not-first.avif":"2c29308af077209b9c984921b7e36f8fb7ca7cf379cf8eba4c7a91f65bc7a304","tests/corrupt/hdlr-not-pict.avif":"9fe37619606645a95725300a9e34fada9190d1e0b3919881db84353941ca9291","tests/corrupt/imir-before-clap.avif":"22d6b5dacf0ef0be59053beba7564b08037fed859ada2885e3476e0ff0d19c95","tests/corrupt/invalid-avif-colr-multiple-nclx.avif":"7990a995855120dc4f724a6098816595becc35077fcd9e0de8c68300b49c4f1f","tests/corrupt/invalid-avif-colr-multiple-prof.avif":"b077a6b58e3a13ad743ee3f19fbae53b521eab8727606e0dba9bf06384f3121c","tests/corrupt/invalid-avif-colr-multiple-rICC.avif":"88b24d4d588744b9f2cdc03944f28283e9315eb3de7d7d57773a0541137f6529","tests/corrupt/invalid-avif-colr-multiple.zip":"9abddcbc47fde6da20263a29b770c6a9e76c8ab8dc785ef8512f35d9cb3206ed","tests/corrupt/ipma-duplicate-item_id.avif":"ca8c5275b0b8b79c1068489a52d0a5c8f0b4453463971e72b694189f11c10745","tests/corrupt/ipma-duplicate-version-and-flags.avif":"cf8e15ec4b210235f3d68332a1adeb64e35c41b8d8e1e7586ae38b6d9cd8926c","tests/corrupt/ipma-invalid-property-index.avif":"2480e773fa716d22883032d05fd4cf2c6b00fba8796cf4ff286a5d1ba26adff6","tests/corrupt/lsel-missing-essential.avif":"43c3b1e4c4acecd7559a9a7197a7befd43c71705748f0f8c063bca3be1c6d074","tests/corrupt/no-alpha-av1C.avif":"ad3d34d6331db7d9bea0c5f37efb88923520e33e08e7c636a5df435a4575eae7","tests/corrupt/no-av1C.avif":"eeb4fc50930c91465999f787c4a2a3b12de20556da0857be72da5a1a9eaa3f01","tests/corrupt/no-ftyp.avif":"74b431f32b2e2761e77df7fdb260f623b4e8f7e3f4c8af8a42d6826911706d7b","tests/corrupt/no-hdlr.avif":"91a1eb70c7b6adf2104e471d7deeeb98084a591d64ce09ba106c27edfbc3a409","tests/corrupt/no-ispe.avif":"4b6edfd8c9b40c25dc40305a6057e32b5e65f40da4a9d810c58dbff53254113f","tests/corrupt/no-pitm.avif":"7960eeb9e6e5140fbe5eb6d281e6974efd6c3c0147562f3dcf06f6b009dc540a","tests/corrupt/no-pixi-for-alpha.avif":"f8adc3573c79ee25bf6d4dd2693c61661469b28f86a5c7b1d9e41b0e8d2d53bb","tests/corrupt/no-pixi.avif":"4b1776def440dc8b913c170e4479772ee6bbb299b8679f7c564704bd03c9597e","tests/hdlr-nonzero-reserved.avif":"b872dcd7b4f49c6808d6da109cf4fedc26a237c42e8529c5aa8f7130abaf40a9","tests/imir-missing-essential.avif":"b1226e4b1358528befbd3f1126b5caf0c5051b4354777b87e71f6001f3829f87","tests/invalid-avif-hdlr-name-multiple-nul.avif":"0d3e4a6ce42154ee288c18339c2b59ff2104fd890cd2d616e5dbf26375a90e98","tests/irot-missing-essential.avif":"b7da1fc1d1b45bb1b7ca3494476e052f711d794a6d010df6870872ed8b9da10e","tests/lsel.avif":"ef8ba6827709f48cd45f749efb580129162d9599ea98f3363d2140957502d806","tests/multiple-extents.avif":"b5549ac68793e155a726d754e565cea0da03fa17833d3545f45c79e13f4c9360","tests/no-mif1.avif":"1442aa6ffaeb9512724287768bfd1850d3aa29a651ef05abb33e5dec2b3ee5c2","tests/overflow.rs":"16b591d8def1a155b3b997622f6ea255536870d99c3d8f97c51755b77a50de3c","tests/public.rs":"8918d5190a36c697445aa4b140a31cd3032582f1e504b4c2527f75a2155f80ae","tests/valid-alpha.avif":"9d417a35b9b62ad3ff66ffbc55f16552aacf821a092aa5ef4adff7e746bd4c2f","tests/valid-avif-colr-nclx-and-prof-and-rICC.avif":"ab6f5e786d26f8bcade5993f8b9cca3cd004a3d7fcec76e829f5d0f98cb18e7b","tests/valid-avif-colr-nclx-and-prof.avif":"0e982818de61869fcb85a2a4c2b7b8aeecb3053cbfdc6276987f91204998eefb","tests/valid-avif-colr-nclx-and-rICC.avif":"8530ef1305ff956a0c2912d0b3d1e0fc3a68cf3103e70b04cc2574530389b030","tests/valid-avif-colr-nclx.avif":"345ab58b7b1cb48aba2e21eb8dc5ab0a751a78a752ce1896c59b4bf361992f38","tests/valid-avif-colr-prof-and-rICC.avif":"1f0f085141106885bda78b0879c768818420d8196b39440a36578456a7d50a6c","tests/valid-avif-colr-prof.avif":"5d7aaefb5204ebe1cc296456866b8e46e023748b921a38ee56fd6c776a9733ff","tests/valid-avif-colr-rICC.avif":"e1c7b49bfad5904b484bd5118e6b33b78e2dc708a31a10fcbb0e4a373ed8dbb7","tests/valid.avif":"f0b33e09bf01232e0877df325f47986c0bee7764f2a81c9c908ae109e7dc63c4"},"package":null}
\ No newline at end of file
+{"files":{},"package":null}
\ No newline at end of file
diff --git a/third_party/rust/mp4parse/Cargo.toml b/third_party/rust/mp4parse/Cargo.toml
index 161043254e30..cebac7bb9f9a 100644
--- a/third_party/rust/mp4parse/Cargo.toml
+++ b/third_party/rust/mp4parse/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "mp4parse"
-version = "0.13.0"
+version = "0.16.0"
 authors = [
   "Ralph Giles <giles@mozilla.com>",
   "Matthew Gregan <kinetik@flim.org>",
@@ -13,7 +13,7 @@ description = "Parser for ISO base media file format (mp4)"
 documentation = "https://docs.rs/mp4parse/"
 license = "MPL-2.0"
 categories = ["multimedia::video"]
-
+edition = "2018"
 repository = "https://github.com/mozilla/mp4parse-rust"
 
 # Avoid complaints about trying to package test files.
@@ -28,7 +28,6 @@ travis-ci = { repository = "https://github.com/mozilla/mp4parse-rust" }
 [dependencies]
 byteorder = "1.2.1"
 bitreader = { version = "0.3.2" }
-env_logger = "0.8"
 fallible_collections = { version = "0.4", features = ["std_io"] }
 num-traits = "0.2.14"
 log = "0.4"
diff --git a/third_party/rust/mp4parse/benches/avif_benchmark.rs b/third_party/rust/mp4parse/benches/avif_benchmark.rs
index 0d8a48b63ced..f7810f8caf0b 100644
--- a/third_party/rust/mp4parse/benches/avif_benchmark.rs
+++ b/third_party/rust/mp4parse/benches/avif_benchmark.rs
@@ -1,8 +1,6 @@
 // This Source Code Form is subject to the terms of the Mozilla Public
 // License, v. 2.0. If a copy of the MPL was not distributed with this
 // file, You can obtain one at https://mozilla.org/MPL/2.0/.
-extern crate criterion;
-extern crate mp4parse as mp4;
 
 use criterion::{criterion_group, criterion_main, Criterion};
 use std::fs::File;
@@ -19,5 +17,5 @@ fn avif_largest() {
         "av1-avif/testFiles/Netflix/avif/cosmos_frame05000_yuv444_12bpc_bt2020_pq_qlossless.avif",
     )
     .expect("Unknown file");
-    assert!(mp4::read_avif(input, mp4::ParseStrictness::Normal).is_ok());
+    assert!(mp4parse::read_avif(input, mp4parse::ParseStrictness::Normal).is_ok());
 }
diff --git a/third_party/rust/mp4parse/link-u-avif-sample-images/.github/workflows/encode-and-decode-daily.yml b/third_party/rust/mp4parse/link-u-avif-sample-images/.github/workflows/encode-and-decode-daily.yml
index 08733dec70d3..897b8ff5e9c7 100644
--- a/third_party/rust/mp4parse/link-u-avif-sample-images/.github/workflows/encode-and-decode-daily.yml
+++ b/third_party/rust/mp4parse/link-u-avif-sample-images/.github/workflows/encode-and-decode-daily.yml
@@ -1,146 +1,146 @@
-name: Encode all images and decode them again weekly.
-
-on:
-  push:
-  schedule:
-    - cron:  '0 20 * * 0' # https://crontab.guru/#0_2_*_*_0
-
-jobs:
-  check-on-ubuntu:
-    runs-on: ${{ matrix.os }}
-    strategy:
-      matrix:
-        os: [ubuntu-18.04, ubuntu-20.04]
-        include:
-          - os: ubuntu-18.04
-            codename: 'bionic'
-            cavif-flag: ''
-          - os: ubuntu-20.04
-            codename: 'focal'
-            cavif-flag: ''
-    steps:
-    - uses: actions/checkout@v2
-    - name: Install required tools
-      run: sudo apt install -y curl jq unzip coreutils imagemagick
-    - name: Download latest cavif
-      shell: bash
-      run: |
-        runId=$(curl https://api.github.com/repos/link-u/cavif/actions/workflows/${WORKFLOW_ID}/runs | jq '[.workflow_runs[] | select( .conclusion == "success")][0].id')
-        artifactId=$(curl https://api.github.com/repos/link-u/cavif/actions/runs/${runId}/artifacts | jq '[.artifacts[] | select( .name == "${{ matrix.codename }}")][0].id')
-        curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o cavif.zip -L https://api.github.com/repos/link-u/cavif/actions/artifacts/${artifactId}/zip
-        unzip cavif.zip
-      env:
-        #id of https://github.com/link-u/cavif/actions?query=workflow%3A%22Build+debian+package+on+push+or+release-tags.%22
-        # curl https://api.github.com/repos/link-u/cavif/actions/workflows
-        WORKFLOW_ID: '4521995'
-    - name: Download latest davif
-      shell: bash
-      run: |
-        runId=$(curl https://api.github.com/repos/link-u/davif/actions/workflows/${WORKFLOW_ID}/runs | jq '[.workflow_runs[] | select( .conclusion == "success")][0].id')
-        artifactId=$(curl https://api.github.com/repos/link-u/davif/actions/runs/${runId}/artifacts | jq '[.artifacts[] | select( .name == "${{ matrix.codename }}")][0].id')
-        curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o davif.zip -L https://api.github.com/repos/link-u/davif/actions/artifacts/${artifactId}/zip
-        unzip davif.zip
-      env:
-        #id of https://github.com/link-u/davif/actions?query=workflow%3A%22Build+debian+package+on+push+or+release-tags.%22
-        # curl https://api.github.com/repos/link-u/davif/actions/workflows
-        WORKFLOW_ID: '452394'
-    - name: Install davif and cavif
-      run: sudo dpkg -i *.deb
-    - name: Use installed cavif and davif
-      run: |
-        sed -i -e 's/^CAVIF=.*$/CAVIF=cavif ${{ matrix.cavif-flag }}/' Makefile
-        sed -i -e 's/^DAVIF=.*$/DAVIF=davif/' Makefile
-    - name: Clean all images.
-      run: make clean
-    - name: Encode them all.
-      run: make all -j $(nproc)
-    - name: Decode them all.
-      run: make decode -j $(nproc)
-    - name: Copy images to upload.
-      run: |
-        mkdir -p ${{ matrix.codename }}/decoded
-        mkdir -p ${{ matrix.codename }}/encoded
-        cp decoded/* ${{ matrix.codename }}/decoded
-        cp *.avif ${{ matrix.codename }}/encoded
-    - name: Upload result
-      uses: actions/upload-artifact@v1
-      with:
-        name: ${{ matrix.codename }}
-        path: ${{ matrix.codename }}
-    - name: Compare the result
-      run: make compare -j $(nproc)
-  check-on-windows:
-    runs-on: windows-latest
-    steps:
-      - uses: actions/checkout@v2
-      - name: Install msys2
-        uses: msys2/setup-msys2@v2
-        with:
-          msystem: MINGW64
-          update: true
-          path-type: inherit
-      - name: Install dependencies
-        shell: msys2 {0}
-        run: |
-          set -eux
-          pacman --noconfirm -S make
-          pacman --noconfirm -S bc
-          pacman --noconfirm -S mingw-w64-x86_64-imagemagick
-          pacman --noconfirm -S mingw-w64-x86_64-curl
-          pacman --noconfirm -S mingw-w64-x86_64-jq
-          make --version
-          echo '2+2' | bc
-          magick -version
-      - name: Download latest cavif
-        shell: bash
-        run: |
-          runId=$(curl https://api.github.com/repos/link-u/cavif/actions/workflows/${WORKFLOW_ID}/runs | jq '[.workflow_runs[] | select( .conclusion == "success")][0].id')
-          artifactId=$(curl https://api.github.com/repos/link-u/cavif/actions/runs/${runId}/artifacts | jq '[.artifacts[] | select( .name == "cavif-win64")][0].id')
-          curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o cavif.zip -L https://api.github.com/repos/link-u/cavif/actions/artifacts/${artifactId}/zip
-          unzip cavif.zip
-          rm cavif.zip
-          ./cavif.exe -h
-        env:
-          WORKFLOW_ID: '4517759'
-      - name: Download latest davif
-        shell: bash
-        run: |
-          runId=$(curl https://api.github.com/repos/link-u/davif/actions/workflows/${WORKFLOW_ID}/runs | jq '[.workflow_runs[] | select( .conclusion == "success")][0].id')
-          artifactId=$(curl https://api.github.com/repos/link-u/davif/actions/runs/${runId}/artifacts | jq '[.artifacts[] | select( .name == "davif-win64")][0].id')
-          curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o davif.zip -L https://api.github.com/repos/link-u/davif/actions/artifacts/${artifactId}/zip
-          unzip davif.zip
-          rm davif.zip
-          ./davif.exe -h
-        env:
-          WORKFLOW_ID: '4521970'
-      - name: Rewrite Makefile to installed cavif and davif
-        shell: msys2 {0}
-        run: |
-          sed -i -e 's/^CAVIF=.*$/CAVIF=.\/cavif.exe/' Makefile
-          sed -i -e 's/^DAVIF=.*$/DAVIF=.\/davif.exe/' Makefile
-      - name: Clean all images.
-        shell: msys2 {0}
-        run: make clean
-      - name: Encode them all
-        shell: msys2 {0}
-        run: make all -j $(nproc)
-      - name: Decode them all
-        shell: msys2 {0}
-        run: make decode -j $(nproc)
-      - name: Copy images to upload.
-        shell: msys2 {0}
-        run: |
-          mkdir -p win64/decoded
-          mkdir -p win64/encoded
-          cp decoded/* win64/decoded
-          cp *.avif win64/encoded
-      - name: Upload result
-        uses: actions/upload-artifact@v1
-        with:
-          name: win64
-          path: win64
-      - name: Compare the result
-        shell: msys2 {0}
-        run: |
-          export PATH="/mingw64/bin:${PATH}"
-          make compare -j $(nproc)
+name: Encode all images and decode them again weekly.
+
+on:
+  push:
+  schedule:
+    - cron:  '0 20 * * 0' # https://crontab.guru/#0_2_*_*_0
+
+jobs:
+  check-on-ubuntu:
+    runs-on: ${{ matrix.os }}
+    strategy:
+      matrix:
+        os: [ubuntu-18.04, ubuntu-20.04]
+        include:
+          - os: ubuntu-18.04
+            codename: 'bionic'
+            cavif-flag: ''
+          - os: ubuntu-20.04
+            codename: 'focal'
+            cavif-flag: ''
+    steps:
+    - uses: actions/checkout@v2
+    - name: Install required tools
+      run: sudo apt install -y curl jq unzip coreutils imagemagick
+    - name: Download latest cavif
+      shell: bash
+      run: |
+        runId=$(curl https://api.github.com/repos/link-u/cavif/actions/workflows/${WORKFLOW_ID}/runs | jq '[.workflow_runs[] | select( .conclusion == "success")][0].id')
+        artifactId=$(curl https://api.github.com/repos/link-u/cavif/actions/runs/${runId}/artifacts | jq '[.artifacts[] | select( .name == "${{ matrix.codename }}")][0].id')
+        curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o cavif.zip -L https://api.github.com/repos/link-u/cavif/actions/artifacts/${artifactId}/zip
+        unzip cavif.zip
+      env:
+        #id of https://github.com/link-u/cavif/actions?query=workflow%3A%22Build+debian+package+on+push+or+release-tags.%22
+        # curl https://api.github.com/repos/link-u/cavif/actions/workflows
+        WORKFLOW_ID: '4521995'
+    - name: Download latest davif
+      shell: bash
+      run: |
+        runId=$(curl https://api.github.com/repos/link-u/davif/actions/workflows/${WORKFLOW_ID}/runs | jq '[.workflow_runs[] | select( .conclusion == "success")][0].id')
+        artifactId=$(curl https://api.github.com/repos/link-u/davif/actions/runs/${runId}/artifacts | jq '[.artifacts[] | select( .name == "${{ matrix.codename }}")][0].id')
+        curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o davif.zip -L https://api.github.com/repos/link-u/davif/actions/artifacts/${artifactId}/zip
+        unzip davif.zip
+      env:
+        #id of https://github.com/link-u/davif/actions?query=workflow%3A%22Build+debian+package+on+push+or+release-tags.%22
+        # curl https://api.github.com/repos/link-u/davif/actions/workflows
+        WORKFLOW_ID: '452394'
+    - name: Install davif and cavif
+      run: sudo dpkg -i *.deb
+    - name: Use installed cavif and davif
+      run: |
+        sed -i -e 's/^CAVIF=.*$/CAVIF=cavif ${{ matrix.cavif-flag }}/' Makefile
+        sed -i -e 's/^DAVIF=.*$/DAVIF=davif/' Makefile
+    - name: Clean all images.
+      run: make clean
+    - name: Encode them all.
+      run: make all -j $(nproc)
+    - name: Decode them all.
+      run: make decode -j $(nproc)
+    - name: Copy images to upload.
+      run: |
+        mkdir -p ${{ matrix.codename }}/decoded
+        mkdir -p ${{ matrix.codename }}/encoded
+        cp decoded/* ${{ matrix.codename }}/decoded
+        cp *.avif ${{ matrix.codename }}/encoded
+    - name: Upload result
+      uses: actions/upload-artifact@v1
+      with:
+        name: ${{ matrix.codename }}
+        path: ${{ matrix.codename }}
+    - name: Compare the result
+      run: make compare -j $(nproc)
+  check-on-windows:
+    runs-on: windows-latest
+    steps:
+      - uses: actions/checkout@v2
+      - name: Install msys2
+        uses: msys2/setup-msys2@v2
+        with:
+          msystem: MINGW64
+          update: true
+          path-type: inherit
+      - name: Install dependencies
+        shell: msys2 {0}
+        run: |
+          set -eux
+          pacman --noconfirm -S make
+          pacman --noconfirm -S bc
+          pacman --noconfirm -S mingw-w64-x86_64-imagemagick
+          pacman --noconfirm -S mingw-w64-x86_64-curl
+          pacman --noconfirm -S mingw-w64-x86_64-jq
+          make --version
+          echo '2+2' | bc
+          magick -version
+      - name: Download latest cavif
+        shell: bash
+        run: |
+          runId=$(curl https://api.github.com/repos/link-u/cavif/actions/workflows/${WORKFLOW_ID}/runs | jq '[.workflow_runs[] | select( .conclusion == "success")][0].id')
+          artifactId=$(curl https://api.github.com/repos/link-u/cavif/actions/runs/${runId}/artifacts | jq '[.artifacts[] | select( .name == "cavif-win64")][0].id')
+          curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o cavif.zip -L https://api.github.com/repos/link-u/cavif/actions/artifacts/${artifactId}/zip
+          unzip cavif.zip
+          rm cavif.zip
+          ./cavif.exe -h
+        env:
+          WORKFLOW_ID: '4517759'
+      - name: Download latest davif
+        shell: bash
+        run: |
+          runId=$(curl https://api.github.com/repos/link-u/davif/actions/workflows/${WORKFLOW_ID}/runs | jq '[.workflow_runs[] | select( .conclusion == "success")][0].id')
+          artifactId=$(curl https://api.github.com/repos/link-u/davif/actions/runs/${runId}/artifacts | jq '[.artifacts[] | select( .name == "davif-win64")][0].id')
+          curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o davif.zip -L https://api.github.com/repos/link-u/davif/actions/artifacts/${artifactId}/zip
+          unzip davif.zip
+          rm davif.zip
+          ./davif.exe -h
+        env:
+          WORKFLOW_ID: '4521970'
+      - name: Rewrite Makefile to installed cavif and davif
+        shell: msys2 {0}
+        run: |
+          sed -i -e 's/^CAVIF=.*$/CAVIF=.\/cavif.exe/' Makefile
+          sed -i -e 's/^DAVIF=.*$/DAVIF=.\/davif.exe/' Makefile
+      - name: Clean all images.
+        shell: msys2 {0}
+        run: make clean
+      - name: Encode them all
+        shell: msys2 {0}
+        run: make all -j $(nproc)
+      - name: Decode them all
+        shell: msys2 {0}
+        run: make decode -j $(nproc)
+      - name: Copy images to upload.
+        shell: msys2 {0}
+        run: |
+          mkdir -p win64/decoded
+          mkdir -p win64/encoded
+          cp decoded/* win64/decoded
+          cp *.avif win64/encoded
+      - name: Upload result
+        uses: actions/upload-artifact@v1
+        with:
+          name: win64
+          path: win64
+      - name: Compare the result
+        shell: msys2 {0}
+        run: |
+          export PATH="/mingw64/bin:${PATH}"
+          make compare -j $(nproc)
diff --git a/third_party/rust/mp4parse/link-u-avif-sample-images/.gitignore b/third_party/rust/mp4parse/link-u-avif-sample-images/.gitignore
index 69b09be52ac0..5016ce43e30f 100644
--- a/third_party/rust/mp4parse/link-u-avif-sample-images/.gitignore
+++ b/third_party/rust/mp4parse/link-u-avif-sample-images/.gitignore
@@ -1,4 +1,4 @@
-*.avif.png
-/core
-/decoded/
-/.alpha-masks/
+*.avif.png
+/core
+/decoded/
+/.alpha-masks/
diff --git a/third_party/rust/mp4parse/link-u-avif-sample-images/LICENSE.txt b/third_party/rust/mp4parse/link-u-avif-sample-images/LICENSE.txt
index 33bec29d5181..87316c7a9ac5 100644
--- a/third_party/rust/mp4parse/link-u-avif-sample-images/LICENSE.txt
+++ b/third_party/rust/mp4parse/link-u-avif-sample-images/LICENSE.txt
@@ -1,427 +1,427 @@
-Attribution-ShareAlike 4.0 International
-
-=======================================================================
-
-Creative Commons Corporation ("Creative Commons") is not a law firm and
-does not provide legal services or legal advice. Distribution of
-Creative Commons public licenses does not create a lawyer-client or
-other relationship. Creative Commons makes its licenses and related
-information available on an "as-is" basis. Creative Commons gives no
-warranties regarding its licenses, any material licensed under their
-terms and conditions, or any related information. Creative Commons
-disclaims all liability for damages resulting from their use to the
-fullest extent possible.
-
-Using Creative Commons Public Licenses
-
-Creative Commons public licenses provide a standard set of terms and
-conditions that creators and other rights holders may use to share
-original works of authorship and other material subject to copyright
-and certain other rights specified in the public license below. The
-following considerations are for informational purposes only, are not
-exhaustive, and do not form part of our licenses.
-
-     Considerations for licensors: Our public licenses are
-     intended for use by those authorized to give the public
-     permission to use material in ways otherwise restricted by
-     copyright and certain other rights. Our licenses are
-     irrevocable. Licensors should read and understand the terms
-     and conditions of the license they choose before applying it.
-     Licensors should also secure all rights necessary before
-     applying our licenses so that the public can reuse the
-     material as expected. Licensors should clearly mark any
-     material not subject to the license. This includes other CC-
-     licensed material, or material used under an exception or
-     limitation to copyright. More considerations for licensors:
-	wiki.creativecommons.org/Considerations_for_licensors
-
-     Considerations for the public: By using one of our public
-     licenses, a licensor grants the public permission to use the
-     licensed material under specified terms and conditions. If
-     the licensor's permission is not necessary for any reason--for
-     example, because of any applicable exception or limitation to
-     copyright--then that use is not regulated by the license. Our
-     licenses grant only permissions under copyright and certain
-     other rights that a licensor has authority to grant. Use of
-     the licensed material may still be restricted for other
-     reasons, including because others have copyright or other
-     rights in the material. A licensor may make special requests,
-     such as asking that all changes be marked or described.
-     Although not required by our licenses, you are encouraged to
-     respect those requests where reasonable. More_considerations
-     for the public:
-	wiki.creativecommons.org/Considerations_for_licensees
-
-=======================================================================
-
-Creative Commons Attribution-ShareAlike 4.0 International Public
-License
-
-By exercising the Licensed Rights (defined below), You accept and agree
-to be bound by the terms and conditions of this Creative Commons
-Attribution-ShareAlike 4.0 International Public License ("Public
-License"). To the extent this Public License may be interpreted as a
-contract, You are granted the Licensed Rights in consideration of Your
-acceptance of these terms and conditions, and the Licensor grants You
-such rights in consideration of benefits the Licensor receives from
-making the Licensed Material available under these terms and
-conditions.
-
-
-Section 1 -- Definitions.
-
-  a. Adapted Material means material subject to Copyright and Similar
-     Rights that is derived from or based upon the Licensed Material
-     and in which the Licensed Material is translated, altered,
-     arranged, transformed, or otherwise modified in a manner requiring
-     permission under the Copyright and Similar Rights held by the
-     Licensor. For purposes of this Public License, where the Licensed
-     Material is a musical work, performance, or sound recording,
-     Adapted Material is always produced where the Licensed Material is
-     synched in timed relation with a moving image.
-
-  b. Adapter's License means the license You apply to Your Copyright
-     and Similar Rights in Your contributions to Adapted Material in
-     accordance with the terms and conditions of this Public License.
-
-  c. BY-SA Compatible License means a license listed at
-     creativecommons.org/compatiblelicenses, approved by Creative
-     Commons as essentially the equivalent of this Public License.
-
-  d. Copyright and Similar Rights means copyright and/or similar rights
-     closely related to copyright including, without limitation,
-     performance, broadcast, sound recording, and Sui Generis Database
-     Rights, without regard to how the rights are labeled or
-     categorized. For purposes of this Public License, the rights
-     specified in Section 2(b)(1)-(2) are not Copyright and Similar
-     Rights.
-
-  e. Effective Technological Measures means those measures that, in the
-     absence of proper authority, may not be circumvented under laws
-     fulfilling obligations under Article 11 of the WIPO Copyright
-     Treaty adopted on December 20, 1996, and/or similar international
-     agreements.
-
-  f. Exceptions and Limitations means fair use, fair dealing, and/or
-     any other exception or limitation to Copyright and Similar Rights
-     that applies to Your use of the Licensed Material.
-
-  g. License Elements means the license attributes listed in the name
-     of a Creative Commons Public License. The License Elements of this
-     Public License are Attribution and ShareAlike.
-
-  h. Licensed Material means the artistic or literary work, database,
-     or other material to which the Licensor applied this Public
-     License.
-
-  i. Licensed Rights means the rights granted to You subject to the
-     terms and conditions of this Public License, which are limited to
-     all Copyright and Similar Rights that apply to Your use of the
-     Licensed Material and that the Licensor has authority to license.
-
-  j. Licensor means the individual(s) or entity(ies) granting rights
-     under this Public License.
-
-  k. Share means to provide material to the public by any means or
-     process that requires permission under the Licensed Rights, such
-     as reproduction, public display, public performance, distribution,
-     dissemination, communication, or importation, and to make material
-     available to the public including in ways that members of the
-     public may access the material from a place and at a time
-     individually chosen by them.
-
-  l. Sui Generis Database Rights means rights other than copyright
-     resulting from Directive 96/9/EC of the European Parliament and of
-     the Council of 11 March 1996 on the legal protection of databases,
-     as amended and/or succeeded, as well as other essentially
-     equivalent rights anywhere in the world.
-
-  m. You means the individual or entity exercising the Licensed Rights
-     under this Public License. Your has a corresponding meaning.
-
-
-Section 2 -- Scope.
-
-  a. License grant.
-
-       1. Subject to the terms and conditions of this Public License,
-          the Licensor hereby grants You a worldwide, royalty-free,
-          non-sublicensable, non-exclusive, irrevocable license to
-          exercise the Licensed Rights in the Licensed Material to:
-
-            a. reproduce and Share the Licensed Material, in whole or
-               in part; and
-
-            b. produce, reproduce, and Share Adapted Material.
-
-       2. Exceptions and Limitations. For the avoidance of doubt, where
-          Exceptions and Limitations apply to Your use, this Public
-          License does not apply, and You do not need to comply with
-          its terms and conditions.
-
-       3. Term. The term of this Public License is specified in Section
-          6(a).
-
-       4. Media and formats; technical modifications allowed. The
-          Licensor authorizes You to exercise the Licensed Rights in
-          all media and formats whether now known or hereafter created,
-          and to make technical modifications necessary to do so. The
-          Licensor waives and/or agrees not to assert any right or
-          authority to forbid You from making technical modifications
-          necessary to exercise the Licensed Rights, including
-          technical modifications necessary to circumvent Effective
-          Technological Measures. For purposes of this Public License,
-          simply making modifications authorized by this Section 2(a)
-          (4) never produces Adapted Material.
-
-       5. Downstream recipients.
-
-            a. Offer from the Licensor -- Licensed Material. Every
-               recipient of the Licensed Material automatically
-               receives an offer from the Licensor to exercise the
-               Licensed Rights under the terms and conditions of this
-               Public License.
-
-            b. Additional offer from the Licensor -- Adapted Material.
-               Every recipient of Adapted Material from You
-               automatically receives an offer from the Licensor to
-               exercise the Licensed Rights in the Adapted Material
-               under the conditions of the Adapter's License You apply.
-
-            c. No downstream restrictions. You may not offer or impose
-               any additional or different terms or conditions on, or
-               apply any Effective Technological Measures to, the
-               Licensed Material if doing so restricts exercise of the
-               Licensed Rights by any recipient of the Licensed
-               Material.
-
-       6. No endorsement. Nothing in this Public License constitutes or
-          may be construed as permission to assert or imply that You
-          are, or that Your use of the Licensed Material is, connected
-          with, or sponsored, endorsed, or granted official status by,
-          the Licensor or others designated to receive attribution as
-          provided in Section 3(a)(1)(A)(i).
-
-  b. Other rights.
-
-       1. Moral rights, such as the right of integrity, are not
-          licensed under this Public License, nor are publicity,
-          privacy, and/or other similar personality rights; however, to
-          the extent possible, the Licensor waives and/or agrees not to
-          assert any such rights held by the Licensor to the limited
-          extent necessary to allow You to exercise the Licensed
-          Rights, but not otherwise.
-
-       2. Patent and trademark rights are not licensed under this
-          Public License.
-
-       3. To the extent possible, the Licensor waives any right to
-          collect royalties from You for the exercise of the Licensed
-          Rights, whether directly or through a collecting society
-          under any voluntary or waivable statutory or compulsory
-          licensing scheme. In all other cases the Licensor expressly
-          reserves any right to collect such royalties.
-
-
-Section 3 -- License Conditions.
-
-Your exercise of the Licensed Rights is expressly made subject to the
-following conditions.
-
-  a. Attribution.
-
-       1. If You Share the Licensed Material (including in modified
-          form), You must:
-
-            a. retain the following if it is supplied by the Licensor
-               with the Licensed Material:
-
-                 i. identification of the creator(s) of the Licensed
-                    Material and any others designated to receive
-                    attribution, in any reasonable manner requested by
-                    the Licensor (including by pseudonym if
-                    designated);
-
-                ii. a copyright notice;
-
-               iii. a notice that refers to this Public License;
-
-                iv. a notice that refers to the disclaimer of
-                    warranties;
-
-                 v. a URI or hyperlink to the Licensed Material to the
-                    extent reasonably practicable;
-
-            b. indicate if You modified the Licensed Material and
-               retain an indication of any previous modifications; and
-
-            c. indicate the Licensed Material is licensed under this
-               Public License, and include the text of, or the URI or
-               hyperlink to, this Public License.
-
-       2. You may satisfy the conditions in Section 3(a)(1) in any
-          reasonable manner based on the medium, means, and context in
-          which You Share the Licensed Material. For example, it may be
-          reasonable to satisfy the conditions by providing a URI or
-          hyperlink to a resource that includes the required
-          information.
-
-       3. If requested by the Licensor, You must remove any of the
-          information required by Section 3(a)(1)(A) to the extent
-          reasonably practicable.
-
-  b. ShareAlike.
-
-     In addition to the conditions in Section 3(a), if You Share
-     Adapted Material You produce, the following conditions also apply.
-
-       1. The Adapter's License You apply must be a Creative Commons
-          license with the same License Elements, this version or
-          later, or a BY-SA Compatible License.
-
-       2. You must include the text of, or the URI or hyperlink to, the
-          Adapter's License You apply. You may satisfy this condition
-          in any reasonable manner based on the medium, means, and
-          context in which You Share Adapted Material.
-
-       3. You may not offer or impose any additional or different terms
-          or conditions on, or apply any Effective Technological
-          Measures to, Adapted Material that restrict exercise of the
-          rights granted under the Adapter's License You apply.
-
-
-Section 4 -- Sui Generis Database Rights.
-
-Where the Licensed Rights include Sui Generis Database Rights that
-apply to Your use of the Licensed Material:
-
-  a. for the avoidance of doubt, Section 2(a)(1) grants You the right
-     to extract, reuse, reproduce, and Share all or a substantial
-     portion of the contents of the database;
-
-  b. if You include all or a substantial portion of the database
-     contents in a database in which You have Sui Generis Database
-     Rights, then the database in which You have Sui Generis Database
-     Rights (but not its individual contents) is Adapted Material,
-
-     including for purposes of Section 3(b); and
-  c. You must comply with the conditions in Section 3(a) if You Share
-     all or a substantial portion of the contents of the database.
-
-For the avoidance of doubt, this Section 4 supplements and does not
-replace Your obligations under this Public License where the Licensed
-Rights include other Copyright and Similar Rights.
-
-
-Section 5 -- Disclaimer of Warranties and Limitation of Liability.
-
-  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE
-     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS
-     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF
-     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,
-     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,
-     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR
-     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,
-     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT
-     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT
-     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.
-
-  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE
-     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,
-     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,
-     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,
-     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR
-     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN
-     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR
-     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR
-     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.
-
-  c. The disclaimer of warranties and limitation of liability provided
-     above shall be interpreted in a manner that, to the extent
-     possible, most closely approximates an absolute disclaimer and
-     waiver of all liability.
-
-
-Section 6 -- Term and Termination.
-
-  a. This Public License applies for the term of the Copyright and
-     Similar Rights licensed here. However, if You fail to comply with
-     this Public License, then Your rights under this Public License
-     terminate automatically.
-
-  b. Where Your right to use the Licensed Material has terminated under
-     Section 6(a), it reinstates:
-
-       1. automatically as of the date the violation is cured, provided
-          it is cured within 30 days of Your discovery of the
-          violation; or
-
-       2. upon express reinstatement by the Licensor.
-
-     For the avoidance of doubt, this Section 6(b) does not affect any
-     right the Licensor may have to seek remedies for Your violations
-     of this Public License.
-
-  c. For the avoidance of doubt, the Licensor may also offer the
-     Licensed Material under separate terms or conditions or stop
-     distributing the Licensed Material at any time; however, doing so
-     will not terminate this Public License.
-
-  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public
-     License.
-
-
-Section 7 -- Other Terms and Conditions.
-
-  a. The Licensor shall not be bound by any additional or different
-     terms or conditions communicated by You unless expressly agreed.
-
-  b. Any arrangements, understandings, or agreements regarding the
-     Licensed Material not stated herein are separate from and
-     independent of the terms and conditions of this Public License.
-
-
-Section 8 -- Interpretation.
-
-  a. For the avoidance of doubt, this Public License does not, and
-     shall not be interpreted to, reduce, limit, restrict, or impose
-     conditions on any use of the Licensed Material that could lawfully
-     be made without permission under this Public License.
-
-  b. To the extent possible, if any provision of this Public License is
-     deemed unenforceable, it shall be automatically reformed to the
-     minimum extent necessary to make it enforceable. If the provision
-     cannot be reformed, it shall be severed from this Public License
-     without affecting the enforceability of the remaining terms and
-     conditions.
-
-  c. No term or condition of this Public License will be waived and no
-     failure to comply consented to unless expressly agreed to by the
-     Licensor.
-
-  d. Nothing in this Public License constitutes or may be interpreted
-     as a limitation upon, or waiver of, any privileges and immunities
-     that apply to the Licensor or You, including from the legal
-     processes of any jurisdiction or authority.
-
-
-=======================================================================
-
-Creative Commons is not a party to its public
-licenses. Notwithstanding, Creative Commons may elect to apply one of
-its public licenses to material it publishes and in those instances
-will be considered the “Licensor.” The text of the Creative Commons
-public licenses is dedicated to the public domain under the CC0 Public
-Domain Dedication. Except for the limited purpose of indicating that
-material is shared under a Creative Commons public license or as
-otherwise permitted by the Creative Commons policies published at
-creativecommons.org/policies, Creative Commons does not authorize the
-use of the trademark "Creative Commons" or any other trademark or logo
-of Creative Commons without its prior written consent including,
-without limitation, in connection with any unauthorized modifications
-to any of its public licenses or any other arrangements,
-understandings, or agreements concerning use of licensed material. For
-the avoidance of doubt, this paragraph does not form part of the
-public licenses.
-
+Attribution-ShareAlike 4.0 International
+
+=======================================================================
+
+Creative Commons Corporation ("Creative Commons") is not a law firm and
+does not provide legal services or legal advice. Distribution of
+Creative Commons public licenses does not create a lawyer-client or
+other relationship. Creative Commons makes its licenses and related
+information available on an "as-is" basis. Creative Commons gives no
+warranties regarding its licenses, any material licensed under their
+terms and conditions, or any related information. Creative Commons
+disclaims all liability for damages resulting from their use to the
+fullest extent possible.
+
+Using Creative Commons Public Licenses
+
+Creative Commons public licenses provide a standard set of terms and
+conditions that creators and other rights holders may use to share
+original works of authorship and other material subject to copyright
+and certain other rights specified in the public license below. The
+following considerations are for informational purposes only, are not
+exhaustive, and do not form part of our licenses.
+
+     Considerations for licensors: Our public licenses are
+     intended for use by those authorized to give the public
+     permission to use material in ways otherwise restricted by
+     copyright and certain other rights. Our licenses are
+     irrevocable. Licensors should read and understand the terms
+     and conditions of the license they choose before applying it.
+     Licensors should also secure all rights necessary before
+     applying our licenses so that the public can reuse the
+     material as expected. Licensors should clearly mark any
+     material not subject to the license. This includes other CC-
+     licensed material, or material used under an exception or
+     limitation to copyright. More considerations for licensors:
+	wiki.creativecommons.org/Considerations_for_licensors
+
+     Considerations for the public: By using one of our public
+     licenses, a licensor grants the public permission to use the
+     licensed material under specified terms and conditions. If
+     the licensor's permission is not necessary for any reason--for
+     example, because of any applicable exception or limitation to
+     copyright--then that use is not regulated by the license. Our
+     licenses grant only permissions under copyright and certain
+     other rights that a licensor has authority to grant. Use of
+     the licensed material may still be restricted for other
+     reasons, including because others have copyright or other
+     rights in the material. A licensor may make special requests,
+     such as asking that all changes be marked or described.
+     Although not required by our licenses, you are encouraged to
+     respect those requests where reasonable. More_considerations
+     for the public:
+	wiki.creativecommons.org/Considerations_for_licensees
+
+=======================================================================
+
+Creative Commons Attribution-ShareAlike 4.0 International Public
+License
+
+By exercising the Licensed Rights (defined below), You accept and agree
+to be bound by the terms and conditions of this Creative Commons
+Attribution-ShareAlike 4.0 International Public License ("Public
+License"). To the extent this Public License may be interpreted as a
+contract, You are granted the Licensed Rights in consideration of Your
+acceptance of these terms and conditions, and the Licensor grants You
+such rights in consideration of benefits the Licensor receives from
+making the Licensed Material available under these terms and
+conditions.
+
+
+Section 1 -- Definitions.
+
+  a. Adapted Material means material subject to Copyright and Similar
+     Rights that is derived from or based upon the Licensed Material
+     and in which the Licensed Material is translated, altered,
+     arranged, transformed, or otherwise modified in a manner requiring
+     permission under the Copyright and Similar Rights held by the
+     Licensor. For purposes of this Public License, where the Licensed
+     Material is a musical work, performance, or sound recording,
+     Adapted Material is always produced where the Licensed Material is
+     synched in timed relation with a moving image.
+
+  b. Adapter's License means the license You apply to Your Copyright
+     and Similar Rights in Your contributions to Adapted Material in
+     accordance with the terms and conditions of this Public License.
+
+  c. BY-SA Compatible License means a license listed at
+     creativecommons.org/compatiblelicenses, approved by Creative
+     Commons as essentially the equivalent of this Public License.
+
+  d. Copyright and Similar Rights means copyright and/or similar rights
+     closely related to copyright including, without limitation,
+     performance, broadcast, sound recording, and Sui Generis Database
+     Rights, without regard to how the rights are labeled or
+     categorized. For purposes of this Public License, the rights
+     specified in Section 2(b)(1)-(2) are not Copyright and Similar
+     Rights.
+
+  e. Effective Technological Measures means those measures that, in the
+     absence of proper authority, may not be circumvented under laws
+     fulfilling obligations under Article 11 of the WIPO Copyright
+     Treaty adopted on December 20, 1996, and/or similar international
+     agreements.
+
+  f. Exceptions and Limitations means fair use, fair dealing, and/or
+     any other exception or limitation to Copyright and Similar Rights
+     that applies to Your use of the Licensed Material.
+
+  g. License Elements means the license attributes listed in the name
+     of a Creative Commons Public License. The License Elements of this
+     Public License are Attribution and ShareAlike.
+
+  h. Licensed Material means the artistic or literary work, database,
+     or other material to which the Licensor applied this Public
+     License.
+
+  i. Licensed Rights means the rights granted to You subject to the
+     terms and conditions of this Public License, which are limited to
+     all Copyright and Similar Rights that apply to Your use of the
+     Licensed Material and that the Licensor has authority to license.
+
+  j. Licensor means the individual(s) or entity(ies) granting rights
+     under this Public License.
+
+  k. Share means to provide material to the public by any means or
+     process that requires permission under the Licensed Rights, such
+     as reproduction, public display, public performance, distribution,
+     dissemination, communication, or importation, and to make material
+     available to the public including in ways that members of the
+     public may access the material from a place and at a time
+     individually chosen by them.
+
+  l. Sui Generis Database Rights means rights other than copyright
+     resulting from Directive 96/9/EC of the European Parliament and of
+     the Council of 11 March 1996 on the legal protection of databases,
+     as amended and/or succeeded, as well as other essentially
+     equivalent rights anywhere in the world.
+
+  m. You means the individual or entity exercising the Licensed Rights
+     under this Public License. Your has a corresponding meaning.
+
+
+Section 2 -- Scope.
+
+  a. License grant.
+
+       1. Subject to the terms and conditions of this Public License,
+          the Licensor hereby grants You a worldwide, royalty-free,
+          non-sublicensable, non-exclusive, irrevocable license to
+          exercise the Licensed Rights in the Licensed Material to:
+
+            a. reproduce and Share the Licensed Material, in whole or
+               in part; and
+
+            b. produce, reproduce, and Share Adapted Material.
+
+       2. Exceptions and Limitations. For the avoidance of doubt, where
+          Exceptions and Limitations apply to Your use, this Public
+          License does not apply, and You do not need to comply with
+          its terms and conditions.
+
+       3. Term. The term of this Public License is specified in Section
+          6(a).
+
+       4. Media and formats; technical modifications allowed. The
+          Licensor authorizes You to exercise the Licensed Rights in
+          all media and formats whether now known or hereafter created,
+          and to make technical modifications necessary to do so. The
+          Licensor waives and/or agrees not to assert any right or
+          authority to forbid You from making technical modifications
+          necessary to exercise the Licensed Rights, including
+          technical modifications necessary to circumvent Effective
+          Technological Measures. For purposes of this Public License,
+          simply making modifications authorized by this Section 2(a)
+          (4) never produces Adapted Material.
+
+       5. Downstream recipients.
+
+            a. Offer from the Licensor -- Licensed Material. Every
+               recipient of the Licensed Material automatically
+               receives an offer from the Licensor to exercise the
+               Licensed Rights under the terms and conditions of this
+               Public License.
+
+            b. Additional offer from the Licensor -- Adapted Material.
+               Every recipient of Adapted Material from You
+               automatically receives an offer from the Licensor to
+               exercise the Licensed Rights in the Adapted Material
+               under the conditions of the Adapter's License You apply.
+
+            c. No downstream restrictions. You may not offer or impose
+               any additional or different terms or conditions on, or
+               apply any Effective Technological Measures to, the
+               Licensed Material if doing so restricts exercise of the
+               Licensed Rights by any recipient of the Licensed
+               Material.
+
+       6. No endorsement. Nothing in this Public License constitutes or
+          may be construed as permission to assert or imply that You
+          are, or that Your use of the Licensed Material is, connected
+          with, or sponsored, endorsed, or granted official status by,
+          the Licensor or others designated to receive attribution as
+          provided in Section 3(a)(1)(A)(i).
+
+  b. Other rights.
+
+       1. Moral rights, such as the right of integrity, are not
+          licensed under this Public License, nor are publicity,
+          privacy, and/or other similar personality rights; however, to
+          the extent possible, the Licensor waives and/or agrees not to
+          assert any such rights held by the Licensor to the limited
+          extent necessary to allow You to exercise the Licensed
+          Rights, but not otherwise.
+
+       2. Patent and trademark rights are not licensed under this
+          Public License.
+
+       3. To the extent possible, the Licensor waives any right to
+          collect royalties from You for the exercise of the Licensed
+          Rights, whether directly or through a collecting society
+          under any voluntary or waivable statutory or compulsory
+          licensing scheme. In all other cases the Licensor expressly
+          reserves any right to collect such royalties.
+
+
+Section 3 -- License Conditions.
+
+Your exercise of the Licensed Rights is expressly made subject to the
+following conditions.
+
+  a. Attribution.
+
+       1. If You Share the Licensed Material (including in modified
+          form), You must:
+
+            a. retain the following if it is supplied by the Licensor
+               with the Licensed Material:
+
+                 i. identification of the creator(s) of the Licensed
+                    Material and any others designated to receive
+                    attribution, in any reasonable manner requested by
+                    the Licensor (including by pseudonym if
+                    designated);
+
+                ii. a copyright notice;
+
+               iii. a notice that refers to this Public License;
+
+                iv. a notice that refers to the disclaimer of
+                    warranties;
+
+                 v. a URI or hyperlink to the Licensed Material to the
+                    extent reasonably practicable;
+
+            b. indicate if You modified the Licensed Material and
+               retain an indication of any previous modifications; and
+
+            c. indicate the Licensed Material is licensed under this
+               Public License, and include the text of, or the URI or
+               hyperlink to, this Public License.
+
+       2. You may satisfy the conditions in Section 3(a)(1) in any
+          reasonable manner based on the medium, means, and context in
+          which You Share the Licensed Material. For example, it may be
+          reasonable to satisfy the conditions by providing a URI or
+          hyperlink to a resource that includes the required
+          information.
+
+       3. If requested by the Licensor, You must remove any of the
+          information required by Section 3(a)(1)(A) to the extent
+          reasonably practicable.
+
+  b. ShareAlike.
+
+     In addition to the conditions in Section 3(a), if You Share
+     Adapted Material You produce, the following conditions also apply.
+
+       1. The Adapter's License You apply must be a Creative Commons
+          license with the same License Elements, this version or
+          later, or a BY-SA Compatible License.
+
+       2. You must include the text of, or the URI or hyperlink to, the
+          Adapter's License You apply. You may satisfy this condition
+          in any reasonable manner based on the medium, means, and
+          context in which You Share Adapted Material.
+
+       3. You may not offer or impose any additional or different terms
+          or conditions on, or apply any Effective Technological
+          Measures to, Adapted Material that restrict exercise of the
+          rights granted under the Adapter's License You apply.
+
+
+Section 4 -- Sui Generis Database Rights.
+
+Where the Licensed Rights include Sui Generis Database Rights that
+apply to Your use of the Licensed Material:
+
+  a. for the avoidance of doubt, Section 2(a)(1) grants You the right
+     to extract, reuse, reproduce, and Share all or a substantial
+     portion of the contents of the database;
+
+  b. if You include all or a substantial portion of the database
+     contents in a database in which You have Sui Generis Database
+     Rights, then the database in which You have Sui Generis Database
+     Rights (but not its individual contents) is Adapted Material,
+
+     including for purposes of Section 3(b); and
+  c. You must comply with the conditions in Section 3(a) if You Share
+     all or a substantial portion of the contents of the database.
+
+For the avoidance of doubt, this Section 4 supplements and does not
+replace Your obligations under this Public License where the Licensed
+Rights include other Copyright and Similar Rights.
+
+
+Section 5 -- Disclaimer of Warranties and Limitation of Liability.
+
+  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE
+     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS
+     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF
+     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,
+     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,
+     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR
+     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,
+     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT
+     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT
+     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.
+
+  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE
+     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,
+     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,
+     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,
+     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR
+     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN
+     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR
+     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR
+     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.
+
+  c. The disclaimer of warranties and limitation of liability provided
+     above shall be interpreted in a manner that, to the extent
+     possible, most closely approximates an absolute disclaimer and
+     waiver of all liability.
+
+
+Section 6 -- Term and Termination.
+
+  a. This Public License applies for the term of the Copyright and
+     Similar Rights licensed here. However, if You fail to comply with
+     this Public License, then Your rights under this Public License
+     terminate automatically.
+
+  b. Where Your right to use the Licensed Material has terminated under
+     Section 6(a), it reinstates:
+
+       1. automatically as of the date the violation is cured, provided
+          it is cured within 30 days of Your discovery of the
+          violation; or
+
+       2. upon express reinstatement by the Licensor.
+
+     For the avoidance of doubt, this Section 6(b) does not affect any
+     right the Licensor may have to seek remedies for Your violations
+     of this Public License.
+
+  c. For the avoidance of doubt, the Licensor may also offer the
+     Licensed Material under separate terms or conditions or stop
+     distributing the Licensed Material at any time; however, doing so
+     will not terminate this Public License.
+
+  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public
+     License.
+
+
+Section 7 -- Other Terms and Conditions.
+
+  a. The Licensor shall not be bound by any additional or different
+     terms or conditions communicated by You unless expressly agreed.
+
+  b. Any arrangements, understandings, or agreements regarding the
+     Licensed Material not stated herein are separate from and
+     independent of the terms and conditions of this Public License.
+
+
+Section 8 -- Interpretation.
+
+  a. For the avoidance of doubt, this Public License does not, and
+     shall not be interpreted to, reduce, limit, restrict, or impose
+     conditions on any use of the Licensed Material that could lawfully
+     be made without permission under this Public License.
+
+  b. To the extent possible, if any provision of this Public License is
+     deemed unenforceable, it shall be automatically reformed to the
+     minimum extent necessary to make it enforceable. If the provision
+     cannot be reformed, it shall be severed from this Public License
+     without affecting the enforceability of the remaining terms and
+     conditions.
+
+  c. No term or condition of this Public License will be waived and no
+     failure to comply consented to unless expressly agreed to by the
+     Licensor.
+
+  d. Nothing in this Public License constitutes or may be interpreted
+     as a limitation upon, or waiver of, any privileges and immunities
+     that apply to the Licensor or You, including from the legal
+     processes of any jurisdiction or authority.
+
+
+=======================================================================
+
+Creative Commons is not a party to its public
+licenses. Notwithstanding, Creative Commons may elect to apply one of
+its public licenses to material it publishes and in those instances
+will be considered the “Licensor.” The text of the Creative Commons
+public licenses is dedicated to the public domain under the CC0 Public
+Domain Dedication. Except for the limited purpose of indicating that
+material is shared under a Creative Commons public license or as
+otherwise permitted by the Creative Commons policies published at
+creativecommons.org/policies, Creative Commons does not authorize the
+use of the trademark "Creative Commons" or any other trademark or logo
+of Creative Commons without its prior written consent including,
+without limitation, in connection with any unauthorized modifications
+to any of its public licenses or any other arrangements,
+understandings, or agreements concerning use of licensed material. For
+the avoidance of doubt, this paragraph does not form part of the
+public licenses.
+
 Creative Commons may be contacted at creativecommons.org.
\ No newline at end of file
diff --git a/third_party/rust/mp4parse/link-u-avif-sample-images/Makefile b/third_party/rust/mp4parse/link-u-avif-sample-images/Makefile
index 2cabb6101b1e..d3391171e04a 100644
--- a/third_party/rust/mp4parse/link-u-avif-sample-images/Makefile
+++ b/third_party/rust/mp4parse/link-u-avif-sample-images/Makefile
@@ -1,911 +1,911 @@
-CAVIF=../cavif/cmake-build-debug/cavif
-DAVIF=../davif/cmake-build-debug/davif
-
-all: hato kimono fox plum;
-
-HATO=\
-	hato.profile2.8bpc.yuv422.avif \
-	hato.profile2.8bpc.yuv422.monochrome.avif \
-	hato.profile2.10bpc.yuv422.avif \
-	hato.profile2.10bpc.yuv422.monochrome.avif \
-	hato.profile2.12bpc.yuv422.avif \
-	hato.profile2.12bpc.yuv422.monochrome.avif \
-	hato.profile0.8bpc.yuv420.avif \
-	hato.profile0.8bpc.yuv420.monochrome.avif \
-	hato.profile0.10bpc.yuv420.avif \
-	hato.profile0.10bpc.yuv420.monochrome.avif
-
-hato: $(HATO);
-
-KIMONO=\
-	kimono.avif \
-	kimono.rotate90.avif \
-	kimono.rotate270.avif \
-	kimono.mirror-horizontal.avif \
-	kimono.mirror-vertical.avif \
-	kimono.mirror-vertical.rotate270.avif \
-	kimono.crop.avif \
-	kimono.mirror-vertical.rotate270.crop.avif
-
-kimono: $(KIMONO);
-
-FOX=\
-	fox.profile0.8bpc.yuv420.avif \
-	fox.profile0.8bpc.yuv420.odd-width.avif \
-	fox.profile0.8bpc.yuv420.odd-height.avif \
-	fox.profile0.8bpc.yuv420.odd-width.odd-height.avif \
-	fox.profile0.8bpc.yuv420.monochrome.avif \
-	fox.profile0.8bpc.yuv420.monochrome.odd-width.avif \
-	fox.profile0.8bpc.yuv420.monochrome.odd-height.avif \
-	fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif \
-	fox.profile0.10bpc.yuv420.avif \
-	fox.profile0.10bpc.yuv420.odd-width.avif \
-	fox.profile0.10bpc.yuv420.odd-height.avif \
-	fox.profile0.10bpc.yuv420.odd-width.odd-height.avif \
-	fox.profile0.10bpc.yuv420.monochrome.avif \
-	fox.profile0.10bpc.yuv420.monochrome.odd-width.avif \
-	fox.profile0.10bpc.yuv420.monochrome.odd-height.avif \
-	fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif \
-	fox.profile2.12bpc.yuv420.avif \
-	fox.profile2.12bpc.yuv420.odd-width.avif \
-	fox.profile2.12bpc.yuv420.odd-height.avif \
-	fox.profile2.12bpc.yuv420.odd-width.odd-height.avif \
-	fox.profile2.12bpc.yuv420.monochrome.avif \
-	fox.profile2.12bpc.yuv420.monochrome.odd-width.avif \
-	fox.profile2.12bpc.yuv420.monochrome.odd-height.avif \
-	fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif \
-	fox.profile2.8bpc.yuv422.avif \
-	fox.profile2.8bpc.yuv422.odd-width.avif \
-	fox.profile2.8bpc.yuv422.odd-height.avif \
-	fox.profile2.8bpc.yuv422.odd-width.odd-height.avif \
-	fox.profile2.8bpc.yuv422.monochrome.avif \
-	fox.profile2.8bpc.yuv422.monochrome.odd-width.avif \
-	fox.profile2.8bpc.yuv422.monochrome.odd-height.avif \
-	fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif \
-	fox.profile2.10bpc.yuv422.avif \
-	fox.profile2.10bpc.yuv422.odd-width.avif \
-	fox.profile2.10bpc.yuv422.odd-height.avif \
-	fox.profile2.10bpc.yuv422.odd-width.odd-height.avif \
-	fox.profile2.10bpc.yuv422.monochrome.avif \
-	fox.profile2.10bpc.yuv422.monochrome.odd-width.avif \
-	fox.profile2.10bpc.yuv422.monochrome.odd-height.avif \
-	fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif \
-	fox.profile2.12bpc.yuv422.avif \
-	fox.profile2.12bpc.yuv422.odd-width.avif \
-	fox.profile2.12bpc.yuv422.odd-height.avif \
-	fox.profile2.12bpc.yuv422.odd-width.odd-height.avif \
-	fox.profile2.12bpc.yuv422.monochrome.avif \
-	fox.profile2.12bpc.yuv422.monochrome.odd-width.avif \
-	fox.profile2.12bpc.yuv422.monochrome.odd-height.avif \
-	fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif \
-	fox.profile1.8bpc.yuv444.avif \
-	fox.profile1.8bpc.yuv444.odd-width.avif \
-	fox.profile1.8bpc.yuv444.odd-height.avif \
-	fox.profile1.8bpc.yuv444.odd-width.odd-height.avif \
-	fox.profile1.10bpc.yuv444.avif \
-	fox.profile1.10bpc.yuv444.odd-width.avif \
-	fox.profile1.10bpc.yuv444.odd-height.avif \
-	fox.profile1.10bpc.yuv444.odd-width.odd-height.avif \
-	fox.profile2.12bpc.yuv444.avif \
-	fox.profile2.12bpc.yuv444.odd-width.avif \
-	fox.profile2.12bpc.yuv444.odd-height.avif \
-	fox.profile2.12bpc.yuv444.odd-width.odd-height.avif \
-	fox.profile2.12bpc.yuv444.monochrome.avif \
-	fox.profile2.12bpc.yuv444.monochrome.odd-width.avif \
-	fox.profile2.12bpc.yuv444.monochrome.odd-height.avif \
-	fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif
-
-fox: $(FOX);
-
-PLUM_LARGE=\
-	plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif \
-	plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif \
-	plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif \
-	plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif \
-	plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif \
-	plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif \
-	plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif \
-	plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif \
-	plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif \
-	plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif \
-	plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif \
-	plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif \
-	plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif \
-	plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif \
-	plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif \
-	plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif \
-	plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif \
-	plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif \
-	plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif \
-	plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif \
-	plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif \
-	plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif \
-	plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif \
-	plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif \
-	plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif \
-	plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif \
-	plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif \
-	plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif \
-	plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif \
-	plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif \
-	plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif \
-	plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif
-
-PLUM_SMALL=\
-	plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif \
-	plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif \
-	plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif \
-	plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif \
-	plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif \
-	plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif \
-	plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif \
-	plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif \
-	plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif \
-	plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif \
-	plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif \
-	plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif \
-	plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif \
-	plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif \
-	plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif \
-	plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif \
-	plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif \
-	plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif \
-	plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif \
-	plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif \
-	plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif \
-	plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif \
-	plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif \
-	plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif \
-	plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif \
-	plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif \
-	plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif \
-	plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif \
-	plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif \
-	plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif \
-	plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif \
-	plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif
-
-PLUM=$(PLUM_LARGE) $(PLUM_SMALL)
-
-plum: $(PLUM);
-
-STAR=\
-	star-8bpc.avifs \
-	star-8bpc-with-alpha.avifs \
-	star-10bpc.avifs \
-	star-10bpc-with-alpha.avifs \
-	star-12bpc.avifs \
-	star-12bpc-with-alpha.avifs
-
-star: $(STAR);
-
-ALL_AVIF=$(HATO) $(KIMONO) $(FOX) $(PLUM)
-ALL_AVIFS=$(STAR)
-DECODED_PNG=$(ALL_AVIF:%.avif=decoded/%.png)
-DUMMY_CHECK_TARGETS=$(ALL_AVIF:%.avif=%.check)
-
-.PHONY: all clean \
-    hato kimono fox plum \
-	star \
-	decode decode-clean decode-images \
-	url hato-url kimono-url fox-url plum-url\
-	compare $(DUMMY_CHECK_TARGETS)
-
-decode-clean:
-	rm -Rf decoded/
-
-$(DECODED_PNG): | decoded
-
-decoded:
-	mkdir -p decoded
-
-decode-images: $(DECODED_PNG);
-
-decode:
-	$(MAKE) decode-clean
-	$(MAKE) decode-images
-
-compare: $(DUMMY_CHECK_TARGETS);
-
-decoded/%.png: %.avif
-	$(DAVIF) -i $< -o $@
-
-$(DUMMY_CHECK_TARGETS): %.check: %.avif decoded/%.png
-	bash -e scripts/compare.sh $@ $(word 1,$^) $(word 2,$^)
-
-url:
-	cat Makefile | grep '^.*\?\.avif:' | sort -d | sed 's/^\(.*\)\:\s*\(.*\)$\/https\:\/\/raw.githubusercontent.com\/link-u\/avif-sample-images\/master\/\1, https\:\/\/raw.githubusercontent.com\/link-u\/avif-sample-images\/master\/\2/'
-
-hato-url:
-	$(MAKE) url | grep hato
-
-kimono-url:
-	$(MAKE) url | grep kimono
-
-fox-url:
-	$(MAKE) url | grep fox
-
-plum-url:
-	$(MAKE) url | grep plum-blossom
-
-clean:
-	rm -Rf *.avif decoded .alpha-masks
-
-## hato
-
-### YUV422
-
-hato.profile2.8bpc.yuv422.avif: hato.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-hato.profile2.8bpc.yuv422.monochrome.avif: hato.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --monochrome --cpu-used 0 --rate-control q --crf 18
-
-hato.profile2.10bpc.yuv422.avif: hato.16bpc.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-hato.profile2.10bpc.yuv422.monochrome.avif: hato.16bpc.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --monochrome --cpu-used 0 --rate-control q --crf 18
-
-hato.profile2.12bpc.yuv422.avif: hato.16bpc.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-hato.profile2.12bpc.yuv422.monochrome.avif: hato.16bpc.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --monochrome --cpu-used 0 --rate-control q --crf 18
-
-### YUV420
-
-hato.profile0.8bpc.yuv420.avif: hato.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-hato.profile0.8bpc.yuv420.monochrome.avif: hato.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --monochrome --cpu-used 0 --rate-control q --crf 18
-
-hato.profile0.10bpc.yuv420.avif: hato.16bpc.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-hato.profile0.10bpc.yuv420.monochrome.avif: hato.16bpc.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --monochrome --cpu-used 0 --rate-control q --crf 18
-
-## Kimono
-
-kimono.avif: kimono.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-kimono.rotate90.avif: kimono.rotate90.png
-	$(CAVIF) -i $< -o $@ --rotation 270 --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-kimono.rotate270.avif: kimono.rotate270.png
-	$(CAVIF) -i $< -o $@ --rotation 90 --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-kimono.mirror-horizontal.avif: kimono.mirror-horizontal.png
-	$(CAVIF) -i $< -o $@ --mirror horizontal --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-kimono.mirror-vertical.avif: kimono.mirror-vertical.png
-	$(CAVIF) -i $< -o $@ --mirror vertical --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-kimono.mirror-vertical.rotate270.avif: kimono.mirror-vertical.rotate270.png
-	$(CAVIF) -i $< -o $@ --mirror vertical --rotation 90 --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-kimono.crop.avif: kimono.png
-	$(CAVIF) -i $< -o $@ --crop-offset 103,-308 --crop-size 385,330 --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-kimono.mirror-vertical.rotate270.crop.avif: kimono.mirror-vertical.rotate270.png
-	$(CAVIF) -i $< -o $@ --crop-offset -308,103 --crop-size 330,385 --mirror vertical --rotation 90 --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-## Fox Parade
-
-### YUV420
-
-#### 8bit
-
-fox.profile0.8bpc.yuv420.avif: fox.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.8bpc.yuv420.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.8bpc.yuv420.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.8bpc.yuv420.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.8bpc.yuv420.monochrome.avif: fox.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.8bpc.yuv420.monochrome.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.8bpc.yuv420.monochrome.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-#### 10bit
-
-fox.profile0.10bpc.yuv420.avif: fox.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.10bpc.yuv420.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.10bpc.yuv420.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.10bpc.yuv420.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.10bpc.yuv420.monochrome.avif: fox.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.10bpc.yuv420.monochrome.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.10bpc.yuv420.monochrome.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-#### 12bit
-
-fox.profile2.12bpc.yuv420.avif: fox.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv420.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv420.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv420.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv420.monochrome.avif: fox.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv420.monochrome.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv420.monochrome.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-### YUV422
-
-#### 8bit
-
-fox.profile2.8bpc.yuv422.avif: fox.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.8bpc.yuv422.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.8bpc.yuv422.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.8bpc.yuv422.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.8bpc.yuv422.monochrome.avif: fox.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.8bpc.yuv422.monochrome.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.8bpc.yuv422.monochrome.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-#### 10bit
-
-fox.profile2.10bpc.yuv422.avif: fox.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.10bpc.yuv422.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.10bpc.yuv422.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.10bpc.yuv422.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.10bpc.yuv422.monochrome.avif: fox.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.10bpc.yuv422.monochrome.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.10bpc.yuv422.monochrome.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-#### 12bit
-
-fox.profile2.12bpc.yuv422.avif: fox.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv422.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv422.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv422.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv422.monochrome.avif: fox.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv422.monochrome.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv422.monochrome.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-### YUV444
-
-#### 8bit
-
-fox.profile1.8bpc.yuv444.avif: fox.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile1.8bpc.yuv444.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile1.8bpc.yuv444.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile1.8bpc.yuv444.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-#### 10bit
-
-fox.profile1.10bpc.yuv444.avif: fox.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile1.10bpc.yuv444.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile1.10bpc.yuv444.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile1.10bpc.yuv444.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-#### 12bit
-
-fox.profile2.12bpc.yuv444.avif: fox.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv444.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv444.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv444.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv444.monochrome.avif: fox.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv444.monochrome.odd-width.avif: fox.odd-width.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv444.monochrome.odd-height.avif: fox.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
-	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-## Alpha mask
-
-.alpha-masks:
-	mkdir -p .alpha-masks
-
-$(PLUM): | .alpha-masks
-
-## Plum blossom - large version
-
-### YUV420
-
-#### 8bit
-
-plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-#### 10bit
-
-plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-#### 12bit
-
-plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-## YUV422
-
-#### 8bit
-
-plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-#### 10bit
-
-plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-#### 12bit
-
-plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-### YUV444
-
-#### 8bit
-
-plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-#### 10bit
-
-plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-#### 12bit
-
-plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif: plum-blossom-large.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-## Plum blossom - small version
-
-### YUV420
-
-#### 8bit
-
-plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-#### 10bit
-
-plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-#### 12bit
-
-plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-## YUV422
-
-#### 8bit
-
-plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-#### 10bit
-
-plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-#### 12bit
-
-plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-### YUV444
-
-#### 8bit
-
-plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-#### 10bit
-
-plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-#### 12bit
-
-plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
-
-plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif: plum-blossom-small.png
-	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome --enable-full-color-range
-	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18 --monochrome
-
-star-8bpc.avifs: star.input.txt
-	$(eval TMP := $(shell mktemp -d))
-	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv420p -color_range jpeg -b:v 0 -crf 0 -lossless 1 $(TMP)/star.mp4
-	# You need the latest version of gpac.
-	# Go to https://github.com/gpac/gpac
-	# then, `make deb -j32`
-	MP4Box -add-image $(TMP)/star.mp4:id=1:primary -new $@
-	MP4Box -ab avis -ab msf1 -ab miaf -ab MA1B -rb mif1 -brand avis $@
-	MP4Box -add $(TMP)/star.mp4:hdlr=pict:ccst:name="GPAC avifs" $@
-	rm -Rfv $(TMP)
-
-# FIXME(ledya-z): WORK IN PROGRESS
-star-8bpc-with-alpha.avifs: star.input.txt
-	$(eval TMP := $(shell mktemp -d))
-	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv420p -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-video.mp4"
-	# FIXME(ledyba-z): It does not generate monochrome OBUs.
-	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt gray -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-alpha.mp4"
-	# You need the latest version of gpac.
-	# Go to https://github.com/gpac/gpac
-	# then, `make deb -j32`
-
-	MP4Box -raw-layer "1:output=$(TMP)/star-video" "$(TMP)/star-video.mp4"
-	MP4Box -raw-layer "1:output=$(TMP)/star-alpha" "$(TMP)/star-alpha.mp4"
-
-	MP4Box -add-image "$(TMP)/star-alpha.av1:id=3:ref=auxl,4:alpha:name=Alpha" -add-image "$(TMP)/star-video.av1:id=4:name=Color" -set-primary 4 -ab avif -new $@
-	MP4Box -add "$(TMP)/star-video.av1:hdlr=pict:ccst:name=\"GPAC avifs\"" -add "$(TMP)/star-alpha.av1:hdlr=auxv:ccst:alpha:name=\"GPAC avifs alpha\"" -ref 2:auxl:1 -ab msf1 -ab miaf -ab MA1B -brand avis $@
-	rm -Rfv $(TMP)
-
-star-10bpc.avifs: star.input.txt
-	$(eval TMP := $(shell mktemp -d))
-	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv422p10 -color_range jpeg -b:v 0 -crf 0 -lossless 1 $(TMP)/star.mp4
-	# You need the latest version of gpac.
-	# Go to https://github.com/gpac/gpac
-	# then, `make deb -j32`
-	MP4Box -add-image $(TMP)/star.mp4:id=1:primary -new $@
-	MP4Box -ab avis -ab msf1 -ab miaf -ab MA1B -rb mif1 -brand avis $@
-	MP4Box -add $(TMP)/star.mp4:hdlr=pict:ccst:name="GPAC avifs" $@
-	rm -Rfv $(TMP)
-
-# FIXME(ledya-z): WORK IN PROGRESS
-star-10bpc-with-alpha.avifs: star.input.txt
-	$(eval TMP := $(shell mktemp -d))
-	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv422p10 -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-video.mp4"
-	# FIXME(ledyba-z): It does not generate monochrome OBUs.
-	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt gray10 -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-alpha.mp4"
-	# You need the latest version of gpac.
-	# Go to https://github.com/gpac/gpac
-	# then, `make deb -j32`
-
-	MP4Box -raw-layer "1:output=$(TMP)/star-video" "$(TMP)/star-video.mp4"
-	MP4Box -raw-layer "1:output=$(TMP)/star-alpha" "$(TMP)/star-alpha.mp4"
-
-	MP4Box -add-image "$(TMP)/star-alpha.av1:id=3:ref=auxl,4:alpha:name=Alpha" -add-image "$(TMP)/star-video.av1:id=4:name=Color" -set-primary 4 -ab avif -new $@
-	MP4Box -add "$(TMP)/star-video.av1:hdlr=pict:ccst:name=\"GPAC avifs\"" -add "$(TMP)/star-alpha.av1:hdlr=auxv:ccst:alpha:name=\"GPAC avifs alpha\"" -ref 2:auxl:1 -ab msf1 -ab miaf -ab MA1B -brand avis $@
-	rm -Rfv $(TMP)
-
-star-12bpc.avifs: star.input.txt
-	$(eval TMP := $(shell mktemp -d))
-	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv444p12 -color_range jpeg -b:v 0 -crf 0 -lossless 1 $(TMP)/star.mp4
-	# You need the latest version of gpac.
-	# Go to https://github.com/gpac/gpac
-	# then, `make deb -j32`
-	MP4Box -add-image $(TMP)/star.mp4:id=1:primary -new $@
-	MP4Box -ab avis -ab msf1 -ab miaf -ab MA1B -rb mif1 -brand avis $@
-	MP4Box -add $(TMP)/star.mp4:hdlr=pict:ccst:name="GPAC avifs" $@
-	rm -Rfv $(TMP)
-
-# FIXME(ledya-z): WORK IN PROGRESS
-star-12bpc-with-alpha.avifs: star.input.txt
-	$(eval TMP := $(shell mktemp -d))
-	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv444p12 -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-video.mp4"
-	# FIXME(ledyba-z): It does not generate monochrome OBUs.
-	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt gray12 -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-alpha.mp4"
-	# You need the latest version of gpac.
-	# Go to https://github.com/gpac/gpac
-	# then, `make deb -j32`
-
-	MP4Box -raw-layer "1:output=$(TMP)/star-video" "$(TMP)/star-video.mp4"
-	MP4Box -raw-layer "1:output=$(TMP)/star-alpha" "$(TMP)/star-alpha.mp4"
-
-	MP4Box -add-image "$(TMP)/star-alpha.av1:id=3:ref=auxl,4:alpha:name=Alpha" -add-image "$(TMP)/star-video.av1:id=4:name=Color" -set-primary 4 -ab avif -new $@
-	MP4Box -add "$(TMP)/star-video.av1:hdlr=pict:ccst:name=\"GPAC avifs\"" -add "$(TMP)/star-alpha.av1:hdlr=auxv:ccst:alpha:name=\"GPAC avifs alpha\"" -ref 2:auxl:1 -ab msf1 -ab miaf -ab MA1B -brand avis $@
-	rm -Rfv $(TMP)
+CAVIF=../cavif/cmake-build-debug/cavif
+DAVIF=../davif/cmake-build-debug/davif
+
+all: hato kimono fox plum;
+
+HATO=\
+	hato.profile2.8bpc.yuv422.avif \
+	hato.profile2.8bpc.yuv422.monochrome.avif \
+	hato.profile2.10bpc.yuv422.avif \
+	hato.profile2.10bpc.yuv422.monochrome.avif \
+	hato.profile2.12bpc.yuv422.avif \
+	hato.profile2.12bpc.yuv422.monochrome.avif \
+	hato.profile0.8bpc.yuv420.avif \
+	hato.profile0.8bpc.yuv420.monochrome.avif \
+	hato.profile0.10bpc.yuv420.avif \
+	hato.profile0.10bpc.yuv420.monochrome.avif
+
+hato: $(HATO);
+
+KIMONO=\
+	kimono.avif \
+	kimono.rotate90.avif \
+	kimono.rotate270.avif \
+	kimono.mirror-horizontal.avif \
+	kimono.mirror-vertical.avif \
+	kimono.mirror-vertical.rotate270.avif \
+	kimono.crop.avif \
+	kimono.mirror-vertical.rotate270.crop.avif
+
+kimono: $(KIMONO);
+
+FOX=\
+	fox.profile0.8bpc.yuv420.avif \
+	fox.profile0.8bpc.yuv420.odd-width.avif \
+	fox.profile0.8bpc.yuv420.odd-height.avif \
+	fox.profile0.8bpc.yuv420.odd-width.odd-height.avif \
+	fox.profile0.8bpc.yuv420.monochrome.avif \
+	fox.profile0.8bpc.yuv420.monochrome.odd-width.avif \
+	fox.profile0.8bpc.yuv420.monochrome.odd-height.avif \
+	fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif \
+	fox.profile0.10bpc.yuv420.avif \
+	fox.profile0.10bpc.yuv420.odd-width.avif \
+	fox.profile0.10bpc.yuv420.odd-height.avif \
+	fox.profile0.10bpc.yuv420.odd-width.odd-height.avif \
+	fox.profile0.10bpc.yuv420.monochrome.avif \
+	fox.profile0.10bpc.yuv420.monochrome.odd-width.avif \
+	fox.profile0.10bpc.yuv420.monochrome.odd-height.avif \
+	fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif \
+	fox.profile2.12bpc.yuv420.avif \
+	fox.profile2.12bpc.yuv420.odd-width.avif \
+	fox.profile2.12bpc.yuv420.odd-height.avif \
+	fox.profile2.12bpc.yuv420.odd-width.odd-height.avif \
+	fox.profile2.12bpc.yuv420.monochrome.avif \
+	fox.profile2.12bpc.yuv420.monochrome.odd-width.avif \
+	fox.profile2.12bpc.yuv420.monochrome.odd-height.avif \
+	fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif \
+	fox.profile2.8bpc.yuv422.avif \
+	fox.profile2.8bpc.yuv422.odd-width.avif \
+	fox.profile2.8bpc.yuv422.odd-height.avif \
+	fox.profile2.8bpc.yuv422.odd-width.odd-height.avif \
+	fox.profile2.8bpc.yuv422.monochrome.avif \
+	fox.profile2.8bpc.yuv422.monochrome.odd-width.avif \
+	fox.profile2.8bpc.yuv422.monochrome.odd-height.avif \
+	fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif \
+	fox.profile2.10bpc.yuv422.avif \
+	fox.profile2.10bpc.yuv422.odd-width.avif \
+	fox.profile2.10bpc.yuv422.odd-height.avif \
+	fox.profile2.10bpc.yuv422.odd-width.odd-height.avif \
+	fox.profile2.10bpc.yuv422.monochrome.avif \
+	fox.profile2.10bpc.yuv422.monochrome.odd-width.avif \
+	fox.profile2.10bpc.yuv422.monochrome.odd-height.avif \
+	fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif \
+	fox.profile2.12bpc.yuv422.avif \
+	fox.profile2.12bpc.yuv422.odd-width.avif \
+	fox.profile2.12bpc.yuv422.odd-height.avif \
+	fox.profile2.12bpc.yuv422.odd-width.odd-height.avif \
+	fox.profile2.12bpc.yuv422.monochrome.avif \
+	fox.profile2.12bpc.yuv422.monochrome.odd-width.avif \
+	fox.profile2.12bpc.yuv422.monochrome.odd-height.avif \
+	fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif \
+	fox.profile1.8bpc.yuv444.avif \
+	fox.profile1.8bpc.yuv444.odd-width.avif \
+	fox.profile1.8bpc.yuv444.odd-height.avif \
+	fox.profile1.8bpc.yuv444.odd-width.odd-height.avif \
+	fox.profile1.10bpc.yuv444.avif \
+	fox.profile1.10bpc.yuv444.odd-width.avif \
+	fox.profile1.10bpc.yuv444.odd-height.avif \
+	fox.profile1.10bpc.yuv444.odd-width.odd-height.avif \
+	fox.profile2.12bpc.yuv444.avif \
+	fox.profile2.12bpc.yuv444.odd-width.avif \
+	fox.profile2.12bpc.yuv444.odd-height.avif \
+	fox.profile2.12bpc.yuv444.odd-width.odd-height.avif \
+	fox.profile2.12bpc.yuv444.monochrome.avif \
+	fox.profile2.12bpc.yuv444.monochrome.odd-width.avif \
+	fox.profile2.12bpc.yuv444.monochrome.odd-height.avif \
+	fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif
+
+fox: $(FOX);
+
+PLUM_LARGE=\
+	plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif \
+	plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif \
+	plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif \
+	plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif \
+	plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif \
+	plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif \
+	plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif \
+	plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif \
+	plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif \
+	plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif \
+	plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif \
+	plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif \
+	plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif \
+	plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif \
+	plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif \
+	plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif \
+	plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif \
+	plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif \
+	plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif \
+	plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif \
+	plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif \
+	plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif \
+	plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif \
+	plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif \
+	plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif \
+	plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif \
+	plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif \
+	plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif \
+	plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif \
+	plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif \
+	plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif \
+	plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif
+
+PLUM_SMALL=\
+	plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif \
+	plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif \
+	plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif \
+	plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif \
+	plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif \
+	plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif \
+	plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif \
+	plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif \
+	plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif \
+	plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif \
+	plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif \
+	plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif \
+	plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif \
+	plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif \
+	plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif \
+	plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif \
+	plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif \
+	plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif \
+	plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif \
+	plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif \
+	plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif \
+	plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif \
+	plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif \
+	plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif \
+	plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif \
+	plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif \
+	plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif \
+	plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif \
+	plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif \
+	plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif \
+	plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif \
+	plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif
+
+PLUM=$(PLUM_LARGE) $(PLUM_SMALL)
+
+plum: $(PLUM);
+
+STAR=\
+	star-8bpc.avifs \
+	star-8bpc-with-alpha.avifs \
+	star-10bpc.avifs \
+	star-10bpc-with-alpha.avifs \
+	star-12bpc.avifs \
+	star-12bpc-with-alpha.avifs
+
+star: $(STAR);
+
+ALL_AVIF=$(HATO) $(KIMONO) $(FOX) $(PLUM)
+ALL_AVIFS=$(STAR)
+DECODED_PNG=$(ALL_AVIF:%.avif=decoded/%.png)
+DUMMY_CHECK_TARGETS=$(ALL_AVIF:%.avif=%.check)
+
+.PHONY: all clean \
+    hato kimono fox plum \
+	star \
+	decode decode-clean decode-images \
+	url hato-url kimono-url fox-url plum-url\
+	compare $(DUMMY_CHECK_TARGETS)
+
+decode-clean:
+	rm -Rf decoded/
+
+$(DECODED_PNG): | decoded
+
+decoded:
+	mkdir -p decoded
+
+decode-images: $(DECODED_PNG);
+
+decode:
+	$(MAKE) decode-clean
+	$(MAKE) decode-images
+
+compare: $(DUMMY_CHECK_TARGETS);
+
+decoded/%.png: %.avif
+	$(DAVIF) -i $< -o $@
+
+$(DUMMY_CHECK_TARGETS): %.check: %.avif decoded/%.png
+	bash -e scripts/compare.sh $@ $(word 1,$^) $(word 2,$^)
+
+url:
+	cat Makefile | grep '^.*\?\.avif:' | sort -d | sed 's/^\(.*\)\:\s*\(.*\)$\/https\:\/\/raw.githubusercontent.com\/link-u\/avif-sample-images\/master\/\1, https\:\/\/raw.githubusercontent.com\/link-u\/avif-sample-images\/master\/\2/'
+
+hato-url:
+	$(MAKE) url | grep hato
+
+kimono-url:
+	$(MAKE) url | grep kimono
+
+fox-url:
+	$(MAKE) url | grep fox
+
+plum-url:
+	$(MAKE) url | grep plum-blossom
+
+clean:
+	rm -Rf *.avif decoded .alpha-masks
+
+## hato
+
+### YUV422
+
+hato.profile2.8bpc.yuv422.avif: hato.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+hato.profile2.8bpc.yuv422.monochrome.avif: hato.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --monochrome --cpu-used 0 --rate-control q --crf 18
+
+hato.profile2.10bpc.yuv422.avif: hato.16bpc.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+hato.profile2.10bpc.yuv422.monochrome.avif: hato.16bpc.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --monochrome --cpu-used 0 --rate-control q --crf 18
+
+hato.profile2.12bpc.yuv422.avif: hato.16bpc.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+hato.profile2.12bpc.yuv422.monochrome.avif: hato.16bpc.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --monochrome --cpu-used 0 --rate-control q --crf 18
+
+### YUV420
+
+hato.profile0.8bpc.yuv420.avif: hato.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+hato.profile0.8bpc.yuv420.monochrome.avif: hato.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --monochrome --cpu-used 0 --rate-control q --crf 18
+
+hato.profile0.10bpc.yuv420.avif: hato.16bpc.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+hato.profile0.10bpc.yuv420.monochrome.avif: hato.16bpc.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --monochrome --cpu-used 0 --rate-control q --crf 18
+
+## Kimono
+
+kimono.avif: kimono.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+kimono.rotate90.avif: kimono.rotate90.png
+	$(CAVIF) -i $< -o $@ --rotation 270 --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+kimono.rotate270.avif: kimono.rotate270.png
+	$(CAVIF) -i $< -o $@ --rotation 90 --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+kimono.mirror-horizontal.avif: kimono.mirror-horizontal.png
+	$(CAVIF) -i $< -o $@ --mirror horizontal --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+kimono.mirror-vertical.avif: kimono.mirror-vertical.png
+	$(CAVIF) -i $< -o $@ --mirror vertical --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+kimono.mirror-vertical.rotate270.avif: kimono.mirror-vertical.rotate270.png
+	$(CAVIF) -i $< -o $@ --mirror vertical --rotation 90 --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+kimono.crop.avif: kimono.png
+	$(CAVIF) -i $< -o $@ --crop-offset 103,-308 --crop-size 385,330 --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+kimono.mirror-vertical.rotate270.crop.avif: kimono.mirror-vertical.rotate270.png
+	$(CAVIF) -i $< -o $@ --crop-offset -308,103 --crop-size 330,385 --mirror vertical --rotation 90 --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+## Fox Parade
+
+### YUV420
+
+#### 8bit
+
+fox.profile0.8bpc.yuv420.avif: fox.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.8bpc.yuv420.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.8bpc.yuv420.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.8bpc.yuv420.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.8bpc.yuv420.monochrome.avif: fox.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.8bpc.yuv420.monochrome.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.8bpc.yuv420.monochrome.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+#### 10bit
+
+fox.profile0.10bpc.yuv420.avif: fox.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.10bpc.yuv420.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.10bpc.yuv420.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.10bpc.yuv420.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.10bpc.yuv420.monochrome.avif: fox.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.10bpc.yuv420.monochrome.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.10bpc.yuv420.monochrome.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+#### 12bit
+
+fox.profile2.12bpc.yuv420.avif: fox.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv420.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv420.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv420.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv420.monochrome.avif: fox.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv420.monochrome.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv420.monochrome.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+### YUV422
+
+#### 8bit
+
+fox.profile2.8bpc.yuv422.avif: fox.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.8bpc.yuv422.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.8bpc.yuv422.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.8bpc.yuv422.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.8bpc.yuv422.monochrome.avif: fox.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.8bpc.yuv422.monochrome.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.8bpc.yuv422.monochrome.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+#### 10bit
+
+fox.profile2.10bpc.yuv422.avif: fox.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.10bpc.yuv422.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.10bpc.yuv422.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.10bpc.yuv422.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.10bpc.yuv422.monochrome.avif: fox.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.10bpc.yuv422.monochrome.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.10bpc.yuv422.monochrome.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+#### 12bit
+
+fox.profile2.12bpc.yuv422.avif: fox.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv422.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv422.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv422.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv422.monochrome.avif: fox.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv422.monochrome.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv422.monochrome.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+### YUV444
+
+#### 8bit
+
+fox.profile1.8bpc.yuv444.avif: fox.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile1.8bpc.yuv444.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile1.8bpc.yuv444.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile1.8bpc.yuv444.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+#### 10bit
+
+fox.profile1.10bpc.yuv444.avif: fox.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile1.10bpc.yuv444.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile1.10bpc.yuv444.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile1.10bpc.yuv444.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+#### 12bit
+
+fox.profile2.12bpc.yuv444.avif: fox.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv444.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv444.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv444.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv444.monochrome.avif: fox.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv444.monochrome.odd-width.avif: fox.odd-width.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv444.monochrome.odd-height.avif: fox.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif: fox.odd-width.odd-height.png
+	$(CAVIF) -i $< -o $@ --monochrome --tune psnr --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+## Alpha mask
+
+.alpha-masks:
+	mkdir -p .alpha-masks
+
+$(PLUM): | .alpha-masks
+
+## Plum blossom - large version
+
+### YUV420
+
+#### 8bit
+
+plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+#### 10bit
+
+plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+#### 12bit
+
+plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+## YUV422
+
+#### 8bit
+
+plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+#### 10bit
+
+plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+#### 12bit
+
+plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+### YUV444
+
+#### 8bit
+
+plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+#### 10bit
+
+plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+#### 12bit
+
+plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif: plum-blossom-large.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+## Plum blossom - small version
+
+### YUV420
+
+#### 8bit
+
+plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 8 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+#### 10bit
+
+plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 0 --bit-depth 10 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+#### 12bit
+
+plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv420 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+## YUV422
+
+#### 8bit
+
+plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+#### 10bit
+
+plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+#### 12bit
+
+plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv422 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+### YUV444
+
+#### 8bit
+
+plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 8 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 8 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+#### 10bit
+
+plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 10 --pix-fmt yuv422 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 1 --bit-depth 10 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+#### 12bit
+
+plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18
+
+plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif: plum-blossom-small.png
+	$(CAVIF) -i $< -o .alpha-masks/$@ --encode-target alpha --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --lossless --monochrome --enable-full-color-range
+	$(CAVIF) -i $< -o $@ --tune psnr --encode-target image --attach-alpha .alpha-masks/$@ --profile 2 --bit-depth 12 --pix-fmt yuv444 --cpu-used 0 --rate-control q --crf 18 --monochrome
+
+star-8bpc.avifs: star.input.txt
+	$(eval TMP := $(shell mktemp -d))
+	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv420p -color_range jpeg -b:v 0 -crf 0 -lossless 1 $(TMP)/star.mp4
+	# You need the latest version of gpac.
+	# Go to https://github.com/gpac/gpac
+	# then, `make deb -j32`
+	MP4Box -add-image $(TMP)/star.mp4:id=1:primary -new $@
+	MP4Box -ab avis -ab msf1 -ab miaf -ab MA1B -rb mif1 -brand avis $@
+	MP4Box -add $(TMP)/star.mp4:hdlr=pict:ccst:name="GPAC avifs" $@
+	rm -Rfv $(TMP)
+
+# FIXME(ledya-z): WORK IN PROGRESS
+star-8bpc-with-alpha.avifs: star.input.txt
+	$(eval TMP := $(shell mktemp -d))
+	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv420p -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-video.mp4"
+	# FIXME(ledyba-z): It does not generate monochrome OBUs.
+	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt gray -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-alpha.mp4"
+	# You need the latest version of gpac.
+	# Go to https://github.com/gpac/gpac
+	# then, `make deb -j32`
+
+	MP4Box -raw-layer "1:output=$(TMP)/star-video" "$(TMP)/star-video.mp4"
+	MP4Box -raw-layer "1:output=$(TMP)/star-alpha" "$(TMP)/star-alpha.mp4"
+
+	MP4Box -add-image "$(TMP)/star-alpha.av1:id=3:ref=auxl,4:alpha:name=Alpha" -add-image "$(TMP)/star-video.av1:id=4:name=Color" -set-primary 4 -ab avif -new $@
+	MP4Box -add "$(TMP)/star-video.av1:hdlr=pict:ccst:name=\"GPAC avifs\"" -add "$(TMP)/star-alpha.av1:hdlr=auxv:ccst:alpha:name=\"GPAC avifs alpha\"" -ref 2:auxl:1 -ab msf1 -ab miaf -ab MA1B -brand avis $@
+	rm -Rfv $(TMP)
+
+star-10bpc.avifs: star.input.txt
+	$(eval TMP := $(shell mktemp -d))
+	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv422p10 -color_range jpeg -b:v 0 -crf 0 -lossless 1 $(TMP)/star.mp4
+	# You need the latest version of gpac.
+	# Go to https://github.com/gpac/gpac
+	# then, `make deb -j32`
+	MP4Box -add-image $(TMP)/star.mp4:id=1:primary -new $@
+	MP4Box -ab avis -ab msf1 -ab miaf -ab MA1B -rb mif1 -brand avis $@
+	MP4Box -add $(TMP)/star.mp4:hdlr=pict:ccst:name="GPAC avifs" $@
+	rm -Rfv $(TMP)
+
+# FIXME(ledya-z): WORK IN PROGRESS
+star-10bpc-with-alpha.avifs: star.input.txt
+	$(eval TMP := $(shell mktemp -d))
+	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv422p10 -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-video.mp4"
+	# FIXME(ledyba-z): It does not generate monochrome OBUs.
+	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt gray10 -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-alpha.mp4"
+	# You need the latest version of gpac.
+	# Go to https://github.com/gpac/gpac
+	# then, `make deb -j32`
+
+	MP4Box -raw-layer "1:output=$(TMP)/star-video" "$(TMP)/star-video.mp4"
+	MP4Box -raw-layer "1:output=$(TMP)/star-alpha" "$(TMP)/star-alpha.mp4"
+
+	MP4Box -add-image "$(TMP)/star-alpha.av1:id=3:ref=auxl,4:alpha:name=Alpha" -add-image "$(TMP)/star-video.av1:id=4:name=Color" -set-primary 4 -ab avif -new $@
+	MP4Box -add "$(TMP)/star-video.av1:hdlr=pict:ccst:name=\"GPAC avifs\"" -add "$(TMP)/star-alpha.av1:hdlr=auxv:ccst:alpha:name=\"GPAC avifs alpha\"" -ref 2:auxl:1 -ab msf1 -ab miaf -ab MA1B -brand avis $@
+	rm -Rfv $(TMP)
+
+star-12bpc.avifs: star.input.txt
+	$(eval TMP := $(shell mktemp -d))
+	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv444p12 -color_range jpeg -b:v 0 -crf 0 -lossless 1 $(TMP)/star.mp4
+	# You need the latest version of gpac.
+	# Go to https://github.com/gpac/gpac
+	# then, `make deb -j32`
+	MP4Box -add-image $(TMP)/star.mp4:id=1:primary -new $@
+	MP4Box -ab avis -ab msf1 -ab miaf -ab MA1B -rb mif1 -brand avis $@
+	MP4Box -add $(TMP)/star.mp4:hdlr=pict:ccst:name="GPAC avifs" $@
+	rm -Rfv $(TMP)
+
+# FIXME(ledya-z): WORK IN PROGRESS
+star-12bpc-with-alpha.avifs: star.input.txt
+	$(eval TMP := $(shell mktemp -d))
+	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt yuv444p12 -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-video.mp4"
+	# FIXME(ledyba-z): It does not generate monochrome OBUs.
+	~/umi/src/git.ffmpeg.org/ffmpeg/ffmpeg -r 10 -f concat -i star.input.txt -strict -2 -vcodec av1 -pix_fmt gray12 -color_range mpeg -b:v 0 -crf 0 -lossless 1 "$(TMP)/star-alpha.mp4"
+	# You need the latest version of gpac.
+	# Go to https://github.com/gpac/gpac
+	# then, `make deb -j32`
+
+	MP4Box -raw-layer "1:output=$(TMP)/star-video" "$(TMP)/star-video.mp4"
+	MP4Box -raw-layer "1:output=$(TMP)/star-alpha" "$(TMP)/star-alpha.mp4"
+
+	MP4Box -add-image "$(TMP)/star-alpha.av1:id=3:ref=auxl,4:alpha:name=Alpha" -add-image "$(TMP)/star-video.av1:id=4:name=Color" -set-primary 4 -ab avif -new $@
+	MP4Box -add "$(TMP)/star-video.av1:hdlr=pict:ccst:name=\"GPAC avifs\"" -add "$(TMP)/star-alpha.av1:hdlr=auxv:ccst:alpha:name=\"GPAC avifs alpha\"" -ref 2:auxl:1 -ab msf1 -ab miaf -ab MA1B -brand avis $@
+	rm -Rfv $(TMP)
diff --git a/third_party/rust/mp4parse/link-u-avif-sample-images/README.md b/third_party/rust/mp4parse/link-u-avif-sample-images/README.md
index 6b803ec823d0..3125518b98f2 100644
--- a/third_party/rust/mp4parse/link-u-avif-sample-images/README.md
+++ b/third_party/rust/mp4parse/link-u-avif-sample-images/README.md
@@ -1,582 +1,582 @@
-# AVIF Example files.
-
-![Encode all images and decode them again weekly.](https://github.com/link-u/avif-sample-images/workflows/Encode%20all%20images%20and%20decode%20them%20again%20weekly./badge.svg)
-
-- All files do not contain Exif metadata.
-- All files are tagged as MIAF compatible.
-- All files are tagged as compatible with the AVIF Baseline or Advanced Profile if possible.
-- All images have the "reduced_still_picture_header" and "still_picture" flags set to 1 in the AV1 Sequence Header.
-- Most images are licensed under [CC-BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.en), but some files are licensed different license. Please check.
-
-[Makefile](Makefile) describes how they were created. To generate files yourself, you have to install [cavif](https://github.com/link-u/cavif) and [davif](https://github.com/link-u/davif)
-
-## hato
-
-![hato.jpg](hato.jpg)
-
- - size: 3082x2048
- - License: [CC-BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.en)
-   - Author: Kaede Fujisaki ([@ledyba](https://github.com/ledyba))
-   - Retrieved from [her website](https://hexe.net/2017/11/27/12:27:02/).
-
-### AVIF version
-
-#### YUV 420
-
-| profile | bit depth | Monochrome | file                                             |
-|---------|-----------|------------|--------------------------------------------------|
-| 0       | 8         |            | [here](hato.profile0.8bpc.yuv420.avif)           |
-| 0       | 8         | YES        | [here](hato.profile0.8bpc.yuv420.monochromeavif) |
-| 0       | 10        |            | [here](hato.profile0.10bpc.yuv420.avif)          |
-| 0       | 10        | YES        | [here](hato.profile0.10bpc.yuv420.avif)          |
-
-#### YUV422
-
-| profile | bit depth | Monochrome | file                                              |
-|---------|-----------|------------|---------------------------------------------------|
-| 2       | 8         |            | [here](hato.profile2.8bpc.yuv422.avif)            |
-| 2       | 8         | YES        | [here](hato.profile2.8bpc.yuv422.monochrome.avif) |
-| 2       | 10        |            | [here](hato.profile2.10bpc.yuv422.avif)           |
-| 2       | 10        | YES        | [here](hato.profile2.10bpc.yuv422.avif)           |
-| 2       | 12        |            | [here](hato.profile2.12bpc.yuv422.avif)           |
-| 2       | 12        | YES        | [here](hato.profile2.12bpc.yuv422.avif)           |
-
-#### URLS
-
-You can obtain this list with `make hato-url`.
-
-```
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile0.10bpc.yuv420.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile0.10bpc.yuv420.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile0.8bpc.yuv420.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile0.8bpc.yuv420.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.10bpc.yuv422.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.10bpc.yuv422.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.12bpc.yuv422.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.12bpc.yuv422.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.8bpc.yuv422.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.8bpc.yuv422.monochrome.avif
-```
-
-## Kimono - Transformation tests
-
-[<img src="https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.jpg" alt="kimono.jpg" height="512">](kimono.jpg)
-
- - size: 722x1024
- - License: [CC-BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.en)
-   - Authors: Momiji Jinzamomi([@momiji-san](https://github.com/momiji-san)) and Kaede Fujisaki ([@ledyba](https://github.com/ledyba))
-   - Retrieved from [their website](https://hexe.net/2018/12/24/18:59:01/).
-
-
-Test images for rotation(`irot`), mirroring(`imir`), cropping(`clap`).
-
-All AVIF images are encoded in these settings:
-
- - Profile 0
- - YUV420
- - 8 bits per component
-
-### FYI: Transform operation order
-
-[MIAF](https://www.iso.org/standard/74417.html) defines the transform operation order(p.16):
-
-> These properties, if used, shall be indicated to be applied in the following order:  
->  clean aperture first, then rotation, then mirror.
-
-### Identity
-
-[kimono.avif](./kimono.avif)
-
-No operation is applied.
-
-### Rotation 90
-
-[kimono.rotate90.avif](./kimono.rotate90.avif)
-
-[Encoded image is rotated at 90 degree in counter-clockwise](kimono.rotate90.png), and marked to rotate it 270 degree in counter-clockwise when displaying. Thus, resulted image is as the same as the original.
-
-### Rotation 270
-
-[kimono.rotate270.avif](./kimono.rotate270.avif)
-
-[Encoded image is rotated at 270 degree in counter-clockwise](kimono.rotate270.png), and marked to rotate it 90 degree in counter-clockwise when displaying. Thus, resulted image is as the same as the original.
-
-
-### Mirroring horizontally
-
-[kimono.mirror-horizontal.avif](./kimono.mirror-horizontal.avif)
-
-[Encoded image is mirrored horizontally](kimono.mirror-horizontal.png), and marked to mirror it horizontally again when displaying. Thus, resulted image is as the same as the original.
-
-### Mirroring vertically
-
-[kimono.mirror-vertical.avif](./kimono.mirror-vertical.avif)
-
-Vertical version. Same as above.
-
-### Mirroring vertically + Rotating at 90 degrees.
-
-[kimono.mirror-vertical.rotate270.avif](./kimono.mirror-vertical.rotate270.avif)
-
-[Encoded image is mirrored vertically, then rorated at 90 degree in clockwise](kimono.mirror-vertical.rotate270.png), and marked to rotate it at 90 degree in counter-clockwise and then mirror it vertically when displaying.
-
-Thus, resulted image is as the same as the original.
-
-### Cropping
-
-[kimono.crop.avif](kimono.crop.avif)
-
-Displaying image will be cropped from the original image, using `CleanApertureBox`(See: ISO/IEC 14496-12:2015).
-
-Cropped under these condition:
-
- - cleanApertureWidthN: 385
- - cleanApertureWidthD: 1
- - cleanApertureHeightN: 330
- - cleanApertureHeightD: 1
- - horizOffN: 103
- - horizOffD: 1
- - vertOffN: -308 (This can be negative, as mensioned in ISO/IEC 14496-12:2015).
- - vertOffD: 1
-
-Resulted image should be:
-
-![kimono.crop.png](kimono.crop.png)
-
-### Cropping + Mirroring vertically + Rotating at 90 degrees.
-
-[kimono.mirror-vertical.rotate270.crop.avif](kimono.mirror-vertical.rotate270.crop.avif)
-
-[Encoded image is mirrored vertically, then rorated at 90 degree in clockwise](kimono.mirror-vertical.rotate270.png), and marked to crop it first, rotate it at 90 degree in counter-clockwise, and then mirror it vertically.
-
-Cropping condition is:
-
-- cleanApertureWidthN: 330
-- cleanApertureWidthD: 1
-- cleanApertureHeightN: 385
-- cleanApertureHeightD: 1
-- horizOffN: -308
-- horizOffD: 1
-- vertOffN: 103
-- vertOffD: 1
-
-Resulted image should be as the same as above.
-
-![kimono.crop.png](kimono.crop.png)
-
-### URLS
-
-You can obtain this list with `make kimono-url`.
-
-```
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.crop.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.mirror-horizontal.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.mirror-vertical.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.mirror-vertical.rotate270.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.mirror-vertical.rotate270.crop.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.rotate270.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.rotate90.avif
-```
-
-## Fox Parade - Odd dimensions images
-
-### Original
-
-[<img src="https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.jpg" alt="fox.jpg" height="512">](fox.jpg)
-
- - size: 1204 x 800
- - License: [CC-BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.en)
-   - Author: Kaede Fujisaki ([@ledyba](https://github.com/ledyba))
-   - Retrieved from [her website](https://hexe.net/2017/12/02/16:33:53/).
-
-#### Odd-Width
-
- - [fox.odd-width.png](fox.odd-width.png)
- - size: 1203 x 800
-
-#### Odd-Height
-
-  - [fox.odd-height.png](fox.odd-height.png)
-  - size: 1204 x 799
-
-#### Odd-Width x Odd-Height
-
-  - [fox.odd-width.odd-height.png](fox.odd-width.odd-height.png)
-  - size: 1203 x 799
-
-### AVIF version
-
-| profile | bit depth | pix fmt | Monochrome | odd width | odd height | file                                                                   |
-|---------|-----------|---------|------------|-----------|------------|------------------------------------------------------------------------|
-| 0       | 8         | YUV420  |            |           |            | [here](fox.profile0.8bpc.yuv420.avif)                                  |
-| 0       | 8         | YUV420  |            | YES       |            | [here](fox.profile0.8bpc.yuv420.odd-width.avif)                        |
-| 0       | 8         | YUV420  |            |           | YES        | [here](fox.profile0.8bpc.yuv420.odd-height.avif)                       |
-| 0       | 8         | YUV420  |            | YES       | YES        | [here](fox.profile0.8bpc.yuv420.odd-width.odd-height.avif)             |
-| 0       | 8         | YUV420  | YES        |           |            | [here](fox.profile0.8bpc.yuv420.monochrome.avif)                       |
-| 0       | 8         | YUV420  | YES        | YES       |            | [here](fox.profile0.8bpc.yuv420.monochrome.odd-width.avif)             |
-| 0       | 8         | YUV420  | YES        |           | YES        | [here](fox.profile0.8bpc.yuv420.monochrome.odd-height.avif)            |
-| 0       | 8         | YUV420  | YES        | YES       | YES        | [here](fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif)  |
-| 0       | 10        | YUV420  |            |           |            | [here](fox.profile0.10bpc.yuv420.avif)                                 |
-| 0       | 10        | YUV420  |            | YES       |            | [here](fox.profile0.10bpc.yuv420.odd-width.avif)                       |
-| 0       | 10        | YUV420  |            |           | YES        | [here](fox.profile0.10bpc.yuv420.odd-height.avif)                      |
-| 0       | 10        | YUV420  |            | YES       | YES        | [here](fox.profile0.10bpc.yuv420.odd-width.odd-height.avif)            |
-| 0       | 10        | YUV420  | YES        |           |            | [here](fox.profile0.10bpc.yuv420.monochrome.avif)                      |
-| 0       | 10        | YUV420  | YES        | YES       |            | [here](fox.profile0.10bpc.yuv420.monochrome.odd-width.avif)            |
-| 0       | 10        | YUV420  | YES        |           | YES        | [here](fox.profile0.10bpc.yuv420.monochrome.odd-height.avif)           |
-| 0       | 10        | YUV420  | YES        | YES       | YES        | [here](fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif) |
-| 2       | 12        | YUV420  |            |           |            | [here](fox.profile2.12bpc.yuv420.avif)                                 |
-| 2       | 12        | YUV420  |            | YES       |            | [here](fox.profile2.12bpc.yuv420.odd-width.avif)                       |
-| 2       | 12        | YUV420  |            |           | YES        | [here](fox.profile2.12bpc.yuv420.odd-height.avif)                      |
-| 2       | 12        | YUV420  |            | YES       | YES        | [here](fox.profile2.12bpc.yuv420.odd-width.odd-height.avif)            |
-| 2       | 12        | YUV420  | YES        |           |            | [here](fox.profile2.12bpc.yuv420.monochrome.avif)                      |
-| 2       | 12        | YUV420  | YES        | YES       |            | [here](fox.profile2.12bpc.yuv420.monochrome.odd-width.avif)            |
-| 2       | 12        | YUV420  | YES        |           | YES        | [here](fox.profile2.12bpc.yuv420.monochrome.odd-height.avif)           |
-| 2       | 12        | YUV420  | YES        | YES       | YES        | [here](fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif) |
-| 2       | 8         | YUV422  |            |           |            | [here](fox.profile2.8bpc.yuv422.avif)                                  |
-| 2       | 8         | YUV422  |            | YES       |            | [here](fox.profile2.8bpc.yuv422.odd-width.avif)                        |
-| 2       | 8         | YUV422  |            |           | YES        | [here](fox.profile2.8bpc.yuv422.odd-height.avif)                       |
-| 2       | 8         | YUV422  |            | YES       | YES        | [here](fox.profile2.8bpc.yuv422.odd-width.odd-height.avif)             |
-| 2       | 8         | YUV422  | YES        |           |            | [here](fox.profile2.8bpc.yuv422.monochrome.avif)                       |
-| 2       | 8         | YUV422  | YES        | YES       |            | [here](fox.profile2.8bpc.yuv422.monochrome.odd-width.avif)             |
-| 2       | 8         | YUV422  | YES        |           | YES        | [here](fox.profile2.8bpc.yuv422.monochrome.odd-height.avif)            |
-| 2       | 8         | YUV422  | YES        | YES       | YES        | [here](fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif)  |
-| 2       | 10        | YUV422  |            |           |            | [here](fox.profile2.10bpc.yuv422.avif)                                 |
-| 2       | 10        | YUV422  |            | YES       |            | [here](fox.profile2.10bpc.yuv422.odd-width.avif)                       |
-| 2       | 10        | YUV422  |            |           | YES        | [here](fox.profile2.10bpc.yuv422.odd-height.avif)                      |
-| 2       | 10        | YUV422  |            | YES       | YES        | [here](fox.profile2.10bpc.yuv422.odd-width.odd-height.avif)            |
-| 2       | 10        | YUV422  | YES        |           |            | [here](fox.profile2.10bpc.yuv422.monochrome.avif)                      |
-| 2       | 10        | YUV422  | YES        | YES       |            | [here](fox.profile2.10bpc.yuv422.monochrome.odd-width.avif)            |
-| 2       | 10        | YUV422  | YES        |           | YES        | [here](fox.profile2.10bpc.yuv422.monochrome.odd-height.avif)           |
-| 2       | 10        | YUV422  | YES        | YES       | YES        | [here](fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif) |
-| 2       | 12        | YUV422  |            |           |            | [here](fox.profile2.12bpc.yuv422.avif)                                 |
-| 2       | 12        | YUV422  |            | YES       |            | [here](fox.profile2.12bpc.yuv422.odd-width.avif)                       |
-| 2       | 12        | YUV422  |            |           | YES        | [here](fox.profile2.12bpc.yuv422.odd-height.avif)                      |
-| 2       | 12        | YUV422  |            | YES       | YES        | [here](fox.profile2.12bpc.yuv422.odd-width.odd-height.avif)            |
-| 2       | 12        | YUV422  | YES        |           |            | [here](fox.profile2.12bpc.yuv422.monochrome.avif)                      |
-| 2       | 12        | YUV422  | YES        | YES       |            | [here](fox.profile2.12bpc.yuv422.monochrome.odd-width.avif)            |
-| 2       | 12        | YUV422  | YES        |           | YES        | [here](fox.profile2.12bpc.yuv422.monochrome.odd-height.avif)           |
-| 2       | 12        | YUV422  | YES        | YES       | YES        | [here](fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif) |
-| 1       | 8         | YUV444  |            |           |            | [here](fox.profile1.8bpc.yuv444.avif)                                  |
-| 1       | 8         | YUV444  |            | YES       |            | [here](fox.profile1.8bpc.yuv444.odd-width.avif)                        |
-| 1       | 8         | YUV444  |            |           | YES        | [here](fox.profile1.8bpc.yuv444.odd-height.avif)                       |
-| 1       | 8         | YUV444  |            | YES       | YES        | [here](fox.profile1.8bpc.yuv444.odd-width.odd-height.avif)             |
-| 1       | 10        | YUV444  |            |           |            | [here](fox.profile1.10bpc.yuv444.avif)                                 |
-| 1       | 10        | YUV444  |            | YES       |            | [here](fox.profile1.10bpc.yuv444.odd-width.avif)                       |
-| 1       | 10        | YUV444  |            |           | YES        | [here](fox.profile1.10bpc.yuv444.odd-height.avif)                      |
-| 1       | 10        | YUV444  |            | YES       | YES        | [here](fox.profile1.10bpc.yuv444.odd-width.odd-height.avif)            |
-| 2       | 12        | YUV444  |            |           |            | [here](fox.profile2.12bpc.yuv444.avif)                                 |
-| 2       | 12        | YUV444  |            | YES       |            | [here](fox.profile2.12bpc.yuv444.odd-width.avif)                       |
-| 2       | 12        | YUV444  |            |           | YES        | [here](fox.profile2.12bpc.yuv444.odd-height.avif)                      |
-| 2       | 12        | YUV444  |            | YES       | YES        | [here](fox.profile2.12bpc.yuv444.odd-width.odd-height.avif)            |
-| 2       | 12        | YUV444  | YES        |           |            | [here](fox.profile2.12bpc.yuv444.monochrome.avif)                      |
-| 2       | 12        | YUV444  | YES        | YES       |            | [here](fox.profile2.12bpc.yuv444.monochrome.odd-width.avif)            |
-| 2       | 12        | YUV444  | YES        |           | YES        | [here](fox.profile2.12bpc.yuv444.monochrome.odd-height.avif)           |
-| 2       | 12        | YUV444  | YES        | YES       | YES        | [here](fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif) |
-
-### URLs
-
-You can obtain this list with `make fox-url`.
-
-```
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.monochrome.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.monochrome.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.monochrome.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.monochrome.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.10bpc.yuv444.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.10bpc.yuv444.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.10bpc.yuv444.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.10bpc.yuv444.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.8bpc.yuv444.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.8bpc.yuv444.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.8bpc.yuv444.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.8bpc.yuv444.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.monochrome.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.monochrome.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.monochrome.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.monochrome.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.monochrome.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.monochrome.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.monochrome.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.monochrome.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.monochrome.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.monochrome.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.odd-height.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.odd-width.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.odd-width.odd-height.avif
-```
-## Plum blossom - test images for alpha planes
-
-### Original (SVG)
-
-[![plum-blossom.svg](./plum-blossom.svg)](plum-blossom.svg)
-
- - License: [CC-BY](https://creativecommons.org/licenses/by/4.0/deed.en)
-   - Author: Ryo Hirafuji ([@ledyba-z](https://github.com/ledyba-z))
-
-#### Large Version (PNG)
-
- - [plum-blossom-large.png](plum-blossom-large.png)
- - size: 2048x2048
-
-#### Small Version (PNG)
-
- - [plum-blossom-small.png](plum-blossom-small.png)
- - size: 128x128
-
-### AVIF version (Large Version)
-
-#### Limited-ranged alpha
-
-| profile | bit depth | pix fmt | Monochrome | alpha   | file                                                                           |
-|---------|-----------|---------|------------|-------- |--------------------------------------------------------------------------------|
-| 0       | 8         | YUV420  |            | limited | [here](plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif)             |
-| 0       | 8         | YUV420  | YES        | limited | [here](plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif)  |
-| 0       | 10        | YUV420  |            | limited | [here](plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif)            |
-| 0       | 10        | YUV420  | YES        | limited | [here](plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif) |
-| 2       | 12        | YUV420  |            | limited | [here](plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif)            |
-| 2       | 12        | YUV420  | YES        | limited | [here](plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif) |
-| 2       | 8         | YUV422  |            | limited | [here](plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif)             |
-| 2       | 8         | YUV422  | YES        | limited | [here](plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif)  |
-| 2       | 10        | YUV422  |            | limited | [here](plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif)            |
-| 2       | 10        | YUV422  | YES        | limited | [here](plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif) |
-| 2       | 12        | YUV422  |            | limited | [here](plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif)            |
-| 2       | 12        | YUV422  | YES        | limited | [here](plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif) |
-| 1       | 8         | YUV444  |            | limited | [here](plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif)             |
-| 1       | 10        | YUV444  |            | limited | [here](plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif)            |
-| 2       | 12        | YUV444  |            | limited | [here](plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif)            |
-| 2       | 12        | YUV444  | YES        | limited | [here](plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif) |
-
-#### Full-ranged alpha
-
-| profile | bit depth | pix fmt | Monochrome | alpha   | file                                                                           |
-|---------|-----------|---------|------------|-------- |--------------------------------------------------------------------------------|
-| 0       | 8         | YUV420  |            | full    | [here](plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif)                |
-| 0       | 8         | YUV420  | YES        | full    | [here](plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif)     |
-| 0       | 10        | YUV420  |            | full    | [here](plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif)               |
-| 0       | 10        | YUV420  | YES        | full    | [here](plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif)    |
-| 2       | 12        | YUV420  |            | full    | [here](plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif)               |
-| 2       | 12        | YUV420  | YES        | full    | [here](plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif)    |
-| 2       | 8         | YUV422  |            | full    | [here](plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif)                |
-| 2       | 8         | YUV422  | YES        | full    | [here](plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif)     |
-| 2       | 10        | YUV422  |            | full    | [here](plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif)               |
-| 2       | 10        | YUV422  | YES        | full    | [here](plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif)    |
-| 2       | 12        | YUV422  |            | full    | [here](plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif)               |
-| 2       | 12        | YUV422  | YES        | full    | [here](plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif)    |
-| 1       | 8         | YUV444  |            | full    | [here](plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif)                |
-| 1       | 10        | YUV444  |            | full    | [here](plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif)               |
-| 2       | 12        | YUV444  |            | full    | [here](plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif)               |
-| 2       | 12        | YUV444  | YES        | full    | [here](plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif)    |
-
-### AVIF version (Small Version)
-
-#### Limited-ranged alpha
-
-| profile | bit depth | pix fmt | Monochrome | alpha   | file                                                                           |
-|---------|-----------|---------|------------|-------- |--------------------------------------------------------------------------------|
-| 0       | 8         | YUV420  |            | limited | [here](plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif)             |
-| 0       | 8         | YUV420  | YES        | limited | [here](plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif)  |
-| 0       | 10        | YUV420  |            | limited | [here](plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif)            |
-| 0       | 10        | YUV420  | YES        | limited | [here](plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif) |
-| 2       | 12        | YUV420  |            | limited | [here](plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif)            |
-| 2       | 12        | YUV420  | YES        | limited | [here](plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif) |
-| 2       | 8         | YUV422  |            | limited | [here](plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif)             |
-| 2       | 8         | YUV422  | YES        | limited | [here](plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif)  |
-| 2       | 10        | YUV422  |            | limited | [here](plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif)            |
-| 2       | 10        | YUV422  | YES        | limited | [here](plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif) |
-| 2       | 12        | YUV422  |            | limited | [here](plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif)            |
-| 2       | 12        | YUV422  | YES        | limited | [here](plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif) |
-| 1       | 8         | YUV444  |            | limited | [here](plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif)             |
-| 1       | 10        | YUV444  |            | limited | [here](plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif)            |
-| 2       | 12        | YUV444  |            | limited | [here](plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif)            |
-| 2       | 12        | YUV444  | YES        | limited | [here](plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif) |
-
-#### Full-ranged alpha
-
-| profile | bit depth | pix fmt | Monochrome | alpha   | file                                                                           |
-|---------|-----------|---------|------------|-------- |--------------------------------------------------------------------------------|
-| 0       | 8         | YUV420  |            | full    | [here](plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif)                |
-| 0       | 8         | YUV420  | YES        | full    | [here](plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif)     |
-| 0       | 10        | YUV420  |            | full    | [here](plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif)               |
-| 0       | 10        | YUV420  | YES        | full    | [here](plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif)    |
-| 2       | 12        | YUV420  |            | full    | [here](plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif)               |
-| 2       | 12        | YUV420  | YES        | full    | [here](plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif)    |
-| 2       | 8         | YUV422  |            | full    | [here](plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif)                |
-| 2       | 8         | YUV422  | YES        | full    | [here](plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif)     |
-| 2       | 10        | YUV422  |            | full    | [here](plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif)               |
-| 2       | 10        | YUV422  | YES        | full    | [here](plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif)    |
-| 2       | 12        | YUV422  |            | full    | [here](plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif)               |
-| 2       | 12        | YUV422  | YES        | full    | [here](plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif)    |
-| 1       | 8         | YUV444  |            | full    | [here](plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif)                |
-| 1       | 10        | YUV444  |            | full    | [here](plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif)               |
-| 2       | 12        | YUV444  |            | full    | [here](plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif)               |
-| 2       | 12        | YUV444  | YES        | full    | [here](plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif)    |
-
-### URLs
-
-You can obtain this list with `make plum-url`.
-
-```
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif
-https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif
-```
-
-## Red at 12 o'clock with color profile - ICC Profile tests
-
-![red-at-12-oclock-with-color-profile.jpg](red-at-12-oclock-with-color-profile)
-
- - License: GNU LGPL v2.1 or 2 claused BSD License
-   - Author: Tony Payne <tpayne@chromium.org>
-   - [commit](https://chromium.googlesource.com/chromium/src/+/e89ab1941644ff34b262cac05f23e82b7e249377)
-
-### AVIF version
-
- - [red-at-12-oclock-with-color-profile-lossy.avif](red-at-12-oclock-with-color-profile-lossy.avif)
- - [red-at-12-oclock-with-color-profile-8bpc.avif](red-at-12-oclock-with-color-profile-8bpc.avif)
- - [red-at-12-oclock-with-color-profile-10bpc.avif](red-at-12-oclock-with-color-profile-10bpc.avif)
- - [red-at-12-oclock-with-color-profile-12bpc.avif](red-at-12-oclock-with-color-profile-12bpc.avif)
-
-## Twinkle Star - Image Sequence Test
-
-[![star.gif](star.gif)](star.gif)
-
- - [AV1 mp4 version](star.mp4)
-
-### Original (SVG)
-
-[![star.svg](./star.svg)](star.svg)
-
- - License: [CC-BY](https://creativecommons.org/licenses/by/4.0/deed.en)
-   - Author: Ryo Hirafuji ([@ledyba-z](https://github.com/ledyba-z))
- - Special Thanks: [Shigatake's Pixel Art Lesson](http://shigatake.sakura.ne.jp/gallery/dot/dot_1.html)
-
-### AVIFS version
-
-#### Normal
-
-- [star-8bpc.avifs](star-8bpc.avifs)
-   - YUV420
-   - full-ranged color
-- [star-10bpc.avifs](star-10bpc.avifs)
-   - YUV422
-   - full-ranged color
-- [star-12bpc.avifs](star-12bpc.avifs)
-   - YUV444
-   - full-ranged color
-
-- [star-8bpc-with-alpha.avifs](star-8bpc-with-alpha.avifs)
-   - YUV420
-   - 8bit
-   - limited-ranged color
-   - limited-ranged alpha
-- [star-8bpc-with-alpha.avifs](star-10bpc-with-alpha.avifs)
-   - YUV422
-   - 10bit
-   - limited-ranged color
-   - limited-ranged alpha
-- [star-8bpc-with-alpha.avifs](star-12bpc-with-alpha.avifs)
-   - YUV444
-   - 12bit
-   - limited-ranged color
-   - limited-ranged alpha
+# AVIF Example files.
+
+![Encode all images and decode them again weekly.](https://github.com/link-u/avif-sample-images/workflows/Encode%20all%20images%20and%20decode%20them%20again%20weekly./badge.svg)
+
+- All files do not contain Exif metadata.
+- All files are tagged as MIAF compatible.
+- All files are tagged as compatible with the AVIF Baseline or Advanced Profile if possible.
+- All images have the "reduced_still_picture_header" and "still_picture" flags set to 1 in the AV1 Sequence Header.
+- Most images are licensed under [CC-BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.en), but some files are licensed different license. Please check.
+
+[Makefile](Makefile) describes how they were created. To generate files yourself, you have to install [cavif](https://github.com/link-u/cavif) and [davif](https://github.com/link-u/davif)
+
+## hato
+
+![hato.jpg](hato.jpg)
+
+ - size: 3082x2048
+ - License: [CC-BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.en)
+   - Author: Kaede Fujisaki ([@ledyba](https://github.com/ledyba))
+   - Retrieved from [her website](https://hexe.net/2017/11/27/12:27:02/).
+
+### AVIF version
+
+#### YUV 420
+
+| profile | bit depth | Monochrome | file                                             |
+|---------|-----------|------------|--------------------------------------------------|
+| 0       | 8         |            | [here](hato.profile0.8bpc.yuv420.avif)           |
+| 0       | 8         | YES        | [here](hato.profile0.8bpc.yuv420.monochromeavif) |
+| 0       | 10        |            | [here](hato.profile0.10bpc.yuv420.avif)          |
+| 0       | 10        | YES        | [here](hato.profile0.10bpc.yuv420.avif)          |
+
+#### YUV422
+
+| profile | bit depth | Monochrome | file                                              |
+|---------|-----------|------------|---------------------------------------------------|
+| 2       | 8         |            | [here](hato.profile2.8bpc.yuv422.avif)            |
+| 2       | 8         | YES        | [here](hato.profile2.8bpc.yuv422.monochrome.avif) |
+| 2       | 10        |            | [here](hato.profile2.10bpc.yuv422.avif)           |
+| 2       | 10        | YES        | [here](hato.profile2.10bpc.yuv422.avif)           |
+| 2       | 12        |            | [here](hato.profile2.12bpc.yuv422.avif)           |
+| 2       | 12        | YES        | [here](hato.profile2.12bpc.yuv422.avif)           |
+
+#### URLS
+
+You can obtain this list with `make hato-url`.
+
+```
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile0.10bpc.yuv420.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile0.10bpc.yuv420.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile0.8bpc.yuv420.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile0.8bpc.yuv420.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.10bpc.yuv422.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.10bpc.yuv422.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.12bpc.yuv422.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.12bpc.yuv422.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.8bpc.yuv422.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/hato.profile2.8bpc.yuv422.monochrome.avif
+```
+
+## Kimono - Transformation tests
+
+[<img src="https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.jpg" alt="kimono.jpg" height="512">](kimono.jpg)
+
+ - size: 722x1024
+ - License: [CC-BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.en)
+   - Authors: Momiji Jinzamomi([@momiji-san](https://github.com/momiji-san)) and Kaede Fujisaki ([@ledyba](https://github.com/ledyba))
+   - Retrieved from [their website](https://hexe.net/2018/12/24/18:59:01/).
+
+
+Test images for rotation(`irot`), mirroring(`imir`), cropping(`clap`).
+
+All AVIF images are encoded in these settings:
+
+ - Profile 0
+ - YUV420
+ - 8 bits per component
+
+### FYI: Transform operation order
+
+[MIAF](https://www.iso.org/standard/74417.html) defines the transform operation order(p.16):
+
+> These properties, if used, shall be indicated to be applied in the following order:  
+>  clean aperture first, then rotation, then mirror.
+
+### Identity
+
+[kimono.avif](./kimono.avif)
+
+No operation is applied.
+
+### Rotation 90
+
+[kimono.rotate90.avif](./kimono.rotate90.avif)
+
+[Encoded image is rotated at 90 degree in counter-clockwise](kimono.rotate90.png), and marked to rotate it 270 degree in counter-clockwise when displaying. Thus, resulted image is as the same as the original.
+
+### Rotation 270
+
+[kimono.rotate270.avif](./kimono.rotate270.avif)
+
+[Encoded image is rotated at 270 degree in counter-clockwise](kimono.rotate270.png), and marked to rotate it 90 degree in counter-clockwise when displaying. Thus, resulted image is as the same as the original.
+
+
+### Mirroring horizontally
+
+[kimono.mirror-horizontal.avif](./kimono.mirror-horizontal.avif)
+
+[Encoded image is mirrored horizontally](kimono.mirror-horizontal.png), and marked to mirror it horizontally again when displaying. Thus, resulted image is as the same as the original.
+
+### Mirroring vertically
+
+[kimono.mirror-vertical.avif](./kimono.mirror-vertical.avif)
+
+Vertical version. Same as above.
+
+### Mirroring vertically + Rotating at 90 degrees.
+
+[kimono.mirror-vertical.rotate270.avif](./kimono.mirror-vertical.rotate270.avif)
+
+[Encoded image is mirrored vertically, then rorated at 90 degree in clockwise](kimono.mirror-vertical.rotate270.png), and marked to rotate it at 90 degree in counter-clockwise and then mirror it vertically when displaying.
+
+Thus, resulted image is as the same as the original.
+
+### Cropping
+
+[kimono.crop.avif](kimono.crop.avif)
+
+Displaying image will be cropped from the original image, using `CleanApertureBox`(See: ISO/IEC 14496-12:2015).
+
+Cropped under these condition:
+
+ - cleanApertureWidthN: 385
+ - cleanApertureWidthD: 1
+ - cleanApertureHeightN: 330
+ - cleanApertureHeightD: 1
+ - horizOffN: 103
+ - horizOffD: 1
+ - vertOffN: -308 (This can be negative, as mensioned in ISO/IEC 14496-12:2015).
+ - vertOffD: 1
+
+Resulted image should be:
+
+![kimono.crop.png](kimono.crop.png)
+
+### Cropping + Mirroring vertically + Rotating at 90 degrees.
+
+[kimono.mirror-vertical.rotate270.crop.avif](kimono.mirror-vertical.rotate270.crop.avif)
+
+[Encoded image is mirrored vertically, then rorated at 90 degree in clockwise](kimono.mirror-vertical.rotate270.png), and marked to crop it first, rotate it at 90 degree in counter-clockwise, and then mirror it vertically.
+
+Cropping condition is:
+
+- cleanApertureWidthN: 330
+- cleanApertureWidthD: 1
+- cleanApertureHeightN: 385
+- cleanApertureHeightD: 1
+- horizOffN: -308
+- horizOffD: 1
+- vertOffN: 103
+- vertOffD: 1
+
+Resulted image should be as the same as above.
+
+![kimono.crop.png](kimono.crop.png)
+
+### URLS
+
+You can obtain this list with `make kimono-url`.
+
+```
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.crop.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.mirror-horizontal.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.mirror-vertical.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.mirror-vertical.rotate270.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.mirror-vertical.rotate270.crop.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.rotate270.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/kimono.rotate90.avif
+```
+
+## Fox Parade - Odd dimensions images
+
+### Original
+
+[<img src="https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.jpg" alt="fox.jpg" height="512">](fox.jpg)
+
+ - size: 1204 x 800
+ - License: [CC-BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.en)
+   - Author: Kaede Fujisaki ([@ledyba](https://github.com/ledyba))
+   - Retrieved from [her website](https://hexe.net/2017/12/02/16:33:53/).
+
+#### Odd-Width
+
+ - [fox.odd-width.png](fox.odd-width.png)
+ - size: 1203 x 800
+
+#### Odd-Height
+
+  - [fox.odd-height.png](fox.odd-height.png)
+  - size: 1204 x 799
+
+#### Odd-Width x Odd-Height
+
+  - [fox.odd-width.odd-height.png](fox.odd-width.odd-height.png)
+  - size: 1203 x 799
+
+### AVIF version
+
+| profile | bit depth | pix fmt | Monochrome | odd width | odd height | file                                                                   |
+|---------|-----------|---------|------------|-----------|------------|------------------------------------------------------------------------|
+| 0       | 8         | YUV420  |            |           |            | [here](fox.profile0.8bpc.yuv420.avif)                                  |
+| 0       | 8         | YUV420  |            | YES       |            | [here](fox.profile0.8bpc.yuv420.odd-width.avif)                        |
+| 0       | 8         | YUV420  |            |           | YES        | [here](fox.profile0.8bpc.yuv420.odd-height.avif)                       |
+| 0       | 8         | YUV420  |            | YES       | YES        | [here](fox.profile0.8bpc.yuv420.odd-width.odd-height.avif)             |
+| 0       | 8         | YUV420  | YES        |           |            | [here](fox.profile0.8bpc.yuv420.monochrome.avif)                       |
+| 0       | 8         | YUV420  | YES        | YES       |            | [here](fox.profile0.8bpc.yuv420.monochrome.odd-width.avif)             |
+| 0       | 8         | YUV420  | YES        |           | YES        | [here](fox.profile0.8bpc.yuv420.monochrome.odd-height.avif)            |
+| 0       | 8         | YUV420  | YES        | YES       | YES        | [here](fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif)  |
+| 0       | 10        | YUV420  |            |           |            | [here](fox.profile0.10bpc.yuv420.avif)                                 |
+| 0       | 10        | YUV420  |            | YES       |            | [here](fox.profile0.10bpc.yuv420.odd-width.avif)                       |
+| 0       | 10        | YUV420  |            |           | YES        | [here](fox.profile0.10bpc.yuv420.odd-height.avif)                      |
+| 0       | 10        | YUV420  |            | YES       | YES        | [here](fox.profile0.10bpc.yuv420.odd-width.odd-height.avif)            |
+| 0       | 10        | YUV420  | YES        |           |            | [here](fox.profile0.10bpc.yuv420.monochrome.avif)                      |
+| 0       | 10        | YUV420  | YES        | YES       |            | [here](fox.profile0.10bpc.yuv420.monochrome.odd-width.avif)            |
+| 0       | 10        | YUV420  | YES        |           | YES        | [here](fox.profile0.10bpc.yuv420.monochrome.odd-height.avif)           |
+| 0       | 10        | YUV420  | YES        | YES       | YES        | [here](fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif) |
+| 2       | 12        | YUV420  |            |           |            | [here](fox.profile2.12bpc.yuv420.avif)                                 |
+| 2       | 12        | YUV420  |            | YES       |            | [here](fox.profile2.12bpc.yuv420.odd-width.avif)                       |
+| 2       | 12        | YUV420  |            |           | YES        | [here](fox.profile2.12bpc.yuv420.odd-height.avif)                      |
+| 2       | 12        | YUV420  |            | YES       | YES        | [here](fox.profile2.12bpc.yuv420.odd-width.odd-height.avif)            |
+| 2       | 12        | YUV420  | YES        |           |            | [here](fox.profile2.12bpc.yuv420.monochrome.avif)                      |
+| 2       | 12        | YUV420  | YES        | YES       |            | [here](fox.profile2.12bpc.yuv420.monochrome.odd-width.avif)            |
+| 2       | 12        | YUV420  | YES        |           | YES        | [here](fox.profile2.12bpc.yuv420.monochrome.odd-height.avif)           |
+| 2       | 12        | YUV420  | YES        | YES       | YES        | [here](fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif) |
+| 2       | 8         | YUV422  |            |           |            | [here](fox.profile2.8bpc.yuv422.avif)                                  |
+| 2       | 8         | YUV422  |            | YES       |            | [here](fox.profile2.8bpc.yuv422.odd-width.avif)                        |
+| 2       | 8         | YUV422  |            |           | YES        | [here](fox.profile2.8bpc.yuv422.odd-height.avif)                       |
+| 2       | 8         | YUV422  |            | YES       | YES        | [here](fox.profile2.8bpc.yuv422.odd-width.odd-height.avif)             |
+| 2       | 8         | YUV422  | YES        |           |            | [here](fox.profile2.8bpc.yuv422.monochrome.avif)                       |
+| 2       | 8         | YUV422  | YES        | YES       |            | [here](fox.profile2.8bpc.yuv422.monochrome.odd-width.avif)             |
+| 2       | 8         | YUV422  | YES        |           | YES        | [here](fox.profile2.8bpc.yuv422.monochrome.odd-height.avif)            |
+| 2       | 8         | YUV422  | YES        | YES       | YES        | [here](fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif)  |
+| 2       | 10        | YUV422  |            |           |            | [here](fox.profile2.10bpc.yuv422.avif)                                 |
+| 2       | 10        | YUV422  |            | YES       |            | [here](fox.profile2.10bpc.yuv422.odd-width.avif)                       |
+| 2       | 10        | YUV422  |            |           | YES        | [here](fox.profile2.10bpc.yuv422.odd-height.avif)                      |
+| 2       | 10        | YUV422  |            | YES       | YES        | [here](fox.profile2.10bpc.yuv422.odd-width.odd-height.avif)            |
+| 2       | 10        | YUV422  | YES        |           |            | [here](fox.profile2.10bpc.yuv422.monochrome.avif)                      |
+| 2       | 10        | YUV422  | YES        | YES       |            | [here](fox.profile2.10bpc.yuv422.monochrome.odd-width.avif)            |
+| 2       | 10        | YUV422  | YES        |           | YES        | [here](fox.profile2.10bpc.yuv422.monochrome.odd-height.avif)           |
+| 2       | 10        | YUV422  | YES        | YES       | YES        | [here](fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif) |
+| 2       | 12        | YUV422  |            |           |            | [here](fox.profile2.12bpc.yuv422.avif)                                 |
+| 2       | 12        | YUV422  |            | YES       |            | [here](fox.profile2.12bpc.yuv422.odd-width.avif)                       |
+| 2       | 12        | YUV422  |            |           | YES        | [here](fox.profile2.12bpc.yuv422.odd-height.avif)                      |
+| 2       | 12        | YUV422  |            | YES       | YES        | [here](fox.profile2.12bpc.yuv422.odd-width.odd-height.avif)            |
+| 2       | 12        | YUV422  | YES        |           |            | [here](fox.profile2.12bpc.yuv422.monochrome.avif)                      |
+| 2       | 12        | YUV422  | YES        | YES       |            | [here](fox.profile2.12bpc.yuv422.monochrome.odd-width.avif)            |
+| 2       | 12        | YUV422  | YES        |           | YES        | [here](fox.profile2.12bpc.yuv422.monochrome.odd-height.avif)           |
+| 2       | 12        | YUV422  | YES        | YES       | YES        | [here](fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif) |
+| 1       | 8         | YUV444  |            |           |            | [here](fox.profile1.8bpc.yuv444.avif)                                  |
+| 1       | 8         | YUV444  |            | YES       |            | [here](fox.profile1.8bpc.yuv444.odd-width.avif)                        |
+| 1       | 8         | YUV444  |            |           | YES        | [here](fox.profile1.8bpc.yuv444.odd-height.avif)                       |
+| 1       | 8         | YUV444  |            | YES       | YES        | [here](fox.profile1.8bpc.yuv444.odd-width.odd-height.avif)             |
+| 1       | 10        | YUV444  |            |           |            | [here](fox.profile1.10bpc.yuv444.avif)                                 |
+| 1       | 10        | YUV444  |            | YES       |            | [here](fox.profile1.10bpc.yuv444.odd-width.avif)                       |
+| 1       | 10        | YUV444  |            |           | YES        | [here](fox.profile1.10bpc.yuv444.odd-height.avif)                      |
+| 1       | 10        | YUV444  |            | YES       | YES        | [here](fox.profile1.10bpc.yuv444.odd-width.odd-height.avif)            |
+| 2       | 12        | YUV444  |            |           |            | [here](fox.profile2.12bpc.yuv444.avif)                                 |
+| 2       | 12        | YUV444  |            | YES       |            | [here](fox.profile2.12bpc.yuv444.odd-width.avif)                       |
+| 2       | 12        | YUV444  |            |           | YES        | [here](fox.profile2.12bpc.yuv444.odd-height.avif)                      |
+| 2       | 12        | YUV444  |            | YES       | YES        | [here](fox.profile2.12bpc.yuv444.odd-width.odd-height.avif)            |
+| 2       | 12        | YUV444  | YES        |           |            | [here](fox.profile2.12bpc.yuv444.monochrome.avif)                      |
+| 2       | 12        | YUV444  | YES        | YES       |            | [here](fox.profile2.12bpc.yuv444.monochrome.odd-width.avif)            |
+| 2       | 12        | YUV444  | YES        |           | YES        | [here](fox.profile2.12bpc.yuv444.monochrome.odd-height.avif)           |
+| 2       | 12        | YUV444  | YES        | YES       | YES        | [here](fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif) |
+
+### URLs
+
+You can obtain this list with `make fox-url`.
+
+```
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.monochrome.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.monochrome.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.10bpc.yuv420.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.monochrome.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.monochrome.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile0.8bpc.yuv420.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.10bpc.yuv444.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.10bpc.yuv444.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.10bpc.yuv444.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.10bpc.yuv444.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.8bpc.yuv444.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.8bpc.yuv444.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.8bpc.yuv444.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile1.8bpc.yuv444.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.monochrome.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.monochrome.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.10bpc.yuv422.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.monochrome.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.monochrome.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv420.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.monochrome.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.monochrome.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv422.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.monochrome.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.monochrome.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.12bpc.yuv444.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.monochrome.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.monochrome.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.odd-height.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.odd-width.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/fox.profile2.8bpc.yuv422.odd-width.odd-height.avif
+```
+## Plum blossom - test images for alpha planes
+
+### Original (SVG)
+
+[![plum-blossom.svg](./plum-blossom.svg)](plum-blossom.svg)
+
+ - License: [CC-BY](https://creativecommons.org/licenses/by/4.0/deed.en)
+   - Author: Ryo Hirafuji ([@ledyba-z](https://github.com/ledyba-z))
+
+#### Large Version (PNG)
+
+ - [plum-blossom-large.png](plum-blossom-large.png)
+ - size: 2048x2048
+
+#### Small Version (PNG)
+
+ - [plum-blossom-small.png](plum-blossom-small.png)
+ - size: 128x128
+
+### AVIF version (Large Version)
+
+#### Limited-ranged alpha
+
+| profile | bit depth | pix fmt | Monochrome | alpha   | file                                                                           |
+|---------|-----------|---------|------------|-------- |--------------------------------------------------------------------------------|
+| 0       | 8         | YUV420  |            | limited | [here](plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif)             |
+| 0       | 8         | YUV420  | YES        | limited | [here](plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif)  |
+| 0       | 10        | YUV420  |            | limited | [here](plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif)            |
+| 0       | 10        | YUV420  | YES        | limited | [here](plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif) |
+| 2       | 12        | YUV420  |            | limited | [here](plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif)            |
+| 2       | 12        | YUV420  | YES        | limited | [here](plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif) |
+| 2       | 8         | YUV422  |            | limited | [here](plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif)             |
+| 2       | 8         | YUV422  | YES        | limited | [here](plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif)  |
+| 2       | 10        | YUV422  |            | limited | [here](plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif)            |
+| 2       | 10        | YUV422  | YES        | limited | [here](plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif) |
+| 2       | 12        | YUV422  |            | limited | [here](plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif)            |
+| 2       | 12        | YUV422  | YES        | limited | [here](plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif) |
+| 1       | 8         | YUV444  |            | limited | [here](plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif)             |
+| 1       | 10        | YUV444  |            | limited | [here](plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif)            |
+| 2       | 12        | YUV444  |            | limited | [here](plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif)            |
+| 2       | 12        | YUV444  | YES        | limited | [here](plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif) |
+
+#### Full-ranged alpha
+
+| profile | bit depth | pix fmt | Monochrome | alpha   | file                                                                           |
+|---------|-----------|---------|------------|-------- |--------------------------------------------------------------------------------|
+| 0       | 8         | YUV420  |            | full    | [here](plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif)                |
+| 0       | 8         | YUV420  | YES        | full    | [here](plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif)     |
+| 0       | 10        | YUV420  |            | full    | [here](plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif)               |
+| 0       | 10        | YUV420  | YES        | full    | [here](plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif)    |
+| 2       | 12        | YUV420  |            | full    | [here](plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif)               |
+| 2       | 12        | YUV420  | YES        | full    | [here](plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif)    |
+| 2       | 8         | YUV422  |            | full    | [here](plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif)                |
+| 2       | 8         | YUV422  | YES        | full    | [here](plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif)     |
+| 2       | 10        | YUV422  |            | full    | [here](plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif)               |
+| 2       | 10        | YUV422  | YES        | full    | [here](plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif)    |
+| 2       | 12        | YUV422  |            | full    | [here](plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif)               |
+| 2       | 12        | YUV422  | YES        | full    | [here](plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif)    |
+| 1       | 8         | YUV444  |            | full    | [here](plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif)                |
+| 1       | 10        | YUV444  |            | full    | [here](plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif)               |
+| 2       | 12        | YUV444  |            | full    | [here](plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif)               |
+| 2       | 12        | YUV444  | YES        | full    | [here](plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif)    |
+
+### AVIF version (Small Version)
+
+#### Limited-ranged alpha
+
+| profile | bit depth | pix fmt | Monochrome | alpha   | file                                                                           |
+|---------|-----------|---------|------------|-------- |--------------------------------------------------------------------------------|
+| 0       | 8         | YUV420  |            | limited | [here](plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif)             |
+| 0       | 8         | YUV420  | YES        | limited | [here](plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif)  |
+| 0       | 10        | YUV420  |            | limited | [here](plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif)            |
+| 0       | 10        | YUV420  | YES        | limited | [here](plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif) |
+| 2       | 12        | YUV420  |            | limited | [here](plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif)            |
+| 2       | 12        | YUV420  | YES        | limited | [here](plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif) |
+| 2       | 8         | YUV422  |            | limited | [here](plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif)             |
+| 2       | 8         | YUV422  | YES        | limited | [here](plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif)  |
+| 2       | 10        | YUV422  |            | limited | [here](plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif)            |
+| 2       | 10        | YUV422  | YES        | limited | [here](plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif) |
+| 2       | 12        | YUV422  |            | limited | [here](plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif)            |
+| 2       | 12        | YUV422  | YES        | limited | [here](plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif) |
+| 1       | 8         | YUV444  |            | limited | [here](plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif)             |
+| 1       | 10        | YUV444  |            | limited | [here](plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif)            |
+| 2       | 12        | YUV444  |            | limited | [here](plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif)            |
+| 2       | 12        | YUV444  | YES        | limited | [here](plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif) |
+
+#### Full-ranged alpha
+
+| profile | bit depth | pix fmt | Monochrome | alpha   | file                                                                           |
+|---------|-----------|---------|------------|-------- |--------------------------------------------------------------------------------|
+| 0       | 8         | YUV420  |            | full    | [here](plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif)                |
+| 0       | 8         | YUV420  | YES        | full    | [here](plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif)     |
+| 0       | 10        | YUV420  |            | full    | [here](plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif)               |
+| 0       | 10        | YUV420  | YES        | full    | [here](plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif)    |
+| 2       | 12        | YUV420  |            | full    | [here](plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif)               |
+| 2       | 12        | YUV420  | YES        | full    | [here](plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif)    |
+| 2       | 8         | YUV422  |            | full    | [here](plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif)                |
+| 2       | 8         | YUV422  | YES        | full    | [here](plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif)     |
+| 2       | 10        | YUV422  |            | full    | [here](plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif)               |
+| 2       | 10        | YUV422  | YES        | full    | [here](plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif)    |
+| 2       | 12        | YUV422  |            | full    | [here](plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif)               |
+| 2       | 12        | YUV422  | YES        | full    | [here](plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif)    |
+| 1       | 8         | YUV444  |            | full    | [here](plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif)                |
+| 1       | 10        | YUV444  |            | full    | [here](plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif)               |
+| 2       | 12        | YUV444  |            | full    | [here](plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif)               |
+| 2       | 12        | YUV444  | YES        | full    | [here](plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif)    |
+
+### URLs
+
+You can obtain this list with `make plum-url`.
+
+```
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif
+https://raw.githubusercontent.com/link-u/avif-sample-images/master/plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif
+```
+
+## Red at 12 o'clock with color profile - ICC Profile tests
+
+![red-at-12-oclock-with-color-profile.jpg](red-at-12-oclock-with-color-profile)
+
+ - License: GNU LGPL v2.1 or 2 claused BSD License
+   - Author: Tony Payne <tpayne@chromium.org>
+   - [commit](https://chromium.googlesource.com/chromium/src/+/e89ab1941644ff34b262cac05f23e82b7e249377)
+
+### AVIF version
+
+ - [red-at-12-oclock-with-color-profile-lossy.avif](red-at-12-oclock-with-color-profile-lossy.avif)
+ - [red-at-12-oclock-with-color-profile-8bpc.avif](red-at-12-oclock-with-color-profile-8bpc.avif)
+ - [red-at-12-oclock-with-color-profile-10bpc.avif](red-at-12-oclock-with-color-profile-10bpc.avif)
+ - [red-at-12-oclock-with-color-profile-12bpc.avif](red-at-12-oclock-with-color-profile-12bpc.avif)
+
+## Twinkle Star - Image Sequence Test
+
+[![star.gif](star.gif)](star.gif)
+
+ - [AV1 mp4 version](star.mp4)
+
+### Original (SVG)
+
+[![star.svg](./star.svg)](star.svg)
+
+ - License: [CC-BY](https://creativecommons.org/licenses/by/4.0/deed.en)
+   - Author: Ryo Hirafuji ([@ledyba-z](https://github.com/ledyba-z))
+ - Special Thanks: [Shigatake's Pixel Art Lesson](http://shigatake.sakura.ne.jp/gallery/dot/dot_1.html)
+
+### AVIFS version
+
+#### Normal
+
+- [star-8bpc.avifs](star-8bpc.avifs)
+   - YUV420
+   - full-ranged color
+- [star-10bpc.avifs](star-10bpc.avifs)
+   - YUV422
+   - full-ranged color
+- [star-12bpc.avifs](star-12bpc.avifs)
+   - YUV444
+   - full-ranged color
+
+- [star-8bpc-with-alpha.avifs](star-8bpc-with-alpha.avifs)
+   - YUV420
+   - 8bit
+   - limited-ranged color
+   - limited-ranged alpha
+- [star-8bpc-with-alpha.avifs](star-10bpc-with-alpha.avifs)
+   - YUV422
+   - 10bit
+   - limited-ranged color
+   - limited-ranged alpha
+- [star-8bpc-with-alpha.avifs](star-12bpc-with-alpha.avifs)
+   - YUV444
+   - 12bit
+   - limited-ranged color
+   - limited-ranged alpha
diff --git a/third_party/rust/mp4parse/link-u-avif-sample-images/images.html b/third_party/rust/mp4parse/link-u-avif-sample-images/images.html
index e5a69ae6db44..c4ea99f86f78 100644
--- a/third_party/rust/mp4parse/link-u-avif-sample-images/images.html
+++ b/third_party/rust/mp4parse/link-u-avif-sample-images/images.html
@@ -1,745 +1,745 @@
-<!DOCTYPE html>
-<html lang="en">
-  <head>
-    <title>All images</title>
-  </head>
-  <body>
-<h1>AVIF images</h1>
-  <h2>hato.profile2.8bpc.yuv422.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./hato.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./hato.profile2.8bpc.yuv422.avif" width="400">
-  <h2>hato.profile2.8bpc.yuv422.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./hato.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./hato.profile2.8bpc.yuv422.monochrome.avif" width="400">
-  <h2>hato.profile2.10bpc.yuv422.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./hato.16bpc.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./hato.profile2.10bpc.yuv422.avif" width="400">
-  <h2>hato.profile2.10bpc.yuv422.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./hato.16bpc.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./hato.profile2.10bpc.yuv422.monochrome.avif" width="400">
-  <h2>hato.profile2.12bpc.yuv422.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./hato.16bpc.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./hato.profile2.12bpc.yuv422.avif" width="400">
-  <h2>hato.profile2.12bpc.yuv422.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./hato.16bpc.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./hato.profile2.12bpc.yuv422.monochrome.avif" width="400">
-  <h2>hato.profile0.8bpc.yuv420.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./hato.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./hato.profile0.8bpc.yuv420.avif" width="400">
-  <h2>hato.profile0.8bpc.yuv420.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./hato.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./hato.profile0.8bpc.yuv420.monochrome.avif" width="400">
-  <h2>hato.profile0.10bpc.yuv420.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./hato.16bpc.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./hato.profile0.10bpc.yuv420.avif" width="400">
-  <h2>hato.profile0.10bpc.yuv420.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./hato.16bpc.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./hato.profile0.10bpc.yuv420.monochrome.avif" width="400">
-  <h2>fox.profile0.8bpc.yuv420.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.8bpc.yuv420.avif" width="400">
-  <h2>fox.profile0.8bpc.yuv420.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.8bpc.yuv420.odd-width.avif" width="400">
-  <h2>fox.profile0.8bpc.yuv420.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.8bpc.yuv420.odd-height.avif" width="400">
-  <h2>fox.profile0.8bpc.yuv420.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.8bpc.yuv420.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile0.8bpc.yuv420.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.8bpc.yuv420.monochrome.avif" width="400">
-  <h2>fox.profile0.8bpc.yuv420.monochrome.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.8bpc.yuv420.monochrome.odd-width.avif" width="400">
-  <h2>fox.profile0.8bpc.yuv420.monochrome.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.8bpc.yuv420.monochrome.odd-height.avif" width="400">
-  <h2>fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile0.10bpc.yuv420.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.10bpc.yuv420.avif" width="400">
-  <h2>fox.profile0.10bpc.yuv420.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.10bpc.yuv420.odd-width.avif" width="400">
-  <h2>fox.profile0.10bpc.yuv420.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.10bpc.yuv420.odd-height.avif" width="400">
-  <h2>fox.profile0.10bpc.yuv420.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.10bpc.yuv420.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile0.10bpc.yuv420.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.10bpc.yuv420.monochrome.avif" width="400">
-  <h2>fox.profile0.10bpc.yuv420.monochrome.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.10bpc.yuv420.monochrome.odd-width.avif" width="400">
-  <h2>fox.profile0.10bpc.yuv420.monochrome.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.10bpc.yuv420.monochrome.odd-height.avif" width="400">
-  <h2>fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv420.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv420.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv420.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv420.odd-width.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv420.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv420.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv420.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv420.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv420.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv420.monochrome.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv420.monochrome.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv420.monochrome.odd-width.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv420.monochrome.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv420.monochrome.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile2.8bpc.yuv422.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.8bpc.yuv422.avif" width="400">
-  <h2>fox.profile2.8bpc.yuv422.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.8bpc.yuv422.odd-width.avif" width="400">
-  <h2>fox.profile2.8bpc.yuv422.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.8bpc.yuv422.odd-height.avif" width="400">
-  <h2>fox.profile2.8bpc.yuv422.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.8bpc.yuv422.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile2.8bpc.yuv422.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.8bpc.yuv422.monochrome.avif" width="400">
-  <h2>fox.profile2.8bpc.yuv422.monochrome.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.8bpc.yuv422.monochrome.odd-width.avif" width="400">
-  <h2>fox.profile2.8bpc.yuv422.monochrome.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.8bpc.yuv422.monochrome.odd-height.avif" width="400">
-  <h2>fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile2.10bpc.yuv422.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.10bpc.yuv422.avif" width="400">
-  <h2>fox.profile2.10bpc.yuv422.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.10bpc.yuv422.odd-width.avif" width="400">
-  <h2>fox.profile2.10bpc.yuv422.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.10bpc.yuv422.odd-height.avif" width="400">
-  <h2>fox.profile2.10bpc.yuv422.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.10bpc.yuv422.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile2.10bpc.yuv422.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.10bpc.yuv422.monochrome.avif" width="400">
-  <h2>fox.profile2.10bpc.yuv422.monochrome.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.10bpc.yuv422.monochrome.odd-width.avif" width="400">
-  <h2>fox.profile2.10bpc.yuv422.monochrome.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.10bpc.yuv422.monochrome.odd-height.avif" width="400">
-  <h2>fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv422.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv422.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv422.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv422.odd-width.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv422.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv422.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv422.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv422.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv422.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv422.monochrome.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv422.monochrome.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv422.monochrome.odd-width.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv422.monochrome.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv422.monochrome.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile1.8bpc.yuv444.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile1.8bpc.yuv444.avif" width="400">
-  <h2>fox.profile1.8bpc.yuv444.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile1.8bpc.yuv444.odd-width.avif" width="400">
-  <h2>fox.profile1.8bpc.yuv444.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile1.8bpc.yuv444.odd-height.avif" width="400">
-  <h2>fox.profile1.8bpc.yuv444.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile1.8bpc.yuv444.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile1.10bpc.yuv444.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile1.10bpc.yuv444.avif" width="400">
-  <h2>fox.profile1.10bpc.yuv444.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile1.10bpc.yuv444.odd-width.avif" width="400">
-  <h2>fox.profile1.10bpc.yuv444.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile1.10bpc.yuv444.odd-height.avif" width="400">
-  <h2>fox.profile1.10bpc.yuv444.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile1.10bpc.yuv444.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv444.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv444.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv444.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv444.odd-width.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv444.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv444.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv444.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv444.odd-width.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv444.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv444.monochrome.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv444.monochrome.odd-width.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv444.monochrome.odd-width.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv444.monochrome.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv444.monochrome.odd-height.avif" width="400">
-  <h2>fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./fox.odd-width.odd-height.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif" width="400">
-  <h2>plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif" width="400">
-  <h2>plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif" width="400">
-  <h2>plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif" width="400">
-  <h2>plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif" width="400">
-  <h2>plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif" width="400">
-  <h2>plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif" width="400">
-  <h2>plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif" width="400">
-  <h2>plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif" width="400">
-  <h2>plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif" width="400">
-  <h2>plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif" width="400">
-  <h2>plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif" width="400">
-  <h2>plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif" width="400">
-  <h2>plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-large.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif" width="400">
-  <h2>plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif" width="400">
-  <h2>plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif" width="400">
-  <h2>plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif" width="400">
-  <h2>plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif" width="400">
-  <h2>plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif" width="400">
-  <h2>plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif" width="400">
-  <h2>plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif" width="400">
-  <h2>plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif" width="400">
-  <h2>plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif" width="400">
-  <h2>plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif" width="400">
-  <h2>plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif" width="400">
-  <h2>plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif<h2>
-    <h3>PNG version<h3>
-      <img src="./plum-blossom-small.png" width="400">
-    <h3>AVIF version<h3>
-      <img src="./plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif" width="400">
-<h2>kimono.avif</h2>
-  <h3>PNG version<h3>
-    <img src="./kimono.png" width="400">
-  <h3>AVIF version<h3>
-    <img src="./kimono.avif" width="400">
-<h2>kimono.rotate90.avif</h2>
-  <h3>PNG version<h3>
-    <img src="./kimono.png" width="400">
-  <h3>AVIF version<h3>
-    <img src="./kimono.rotate90.avif" width="400">
-<h2>kimono.rotate270.avif</h2>
-  <h3>PNG version<h3>
-    <img src="./kimono.png" width="400">
-  <h3>AVIF version<h3>
-    <img src="./kimono.rotate270.avif" width="400">
-<h2>kimono.mirror-horizontal.avif</h2>
-  <h3>PNG version<h3>
-    <img src="./kimono.png" width="400">
-  <h3>AVIF version<h3>
-    <img src="./kimono.mirror-horizontal.avif" width="400">
-<h2>kimono.mirror-vertical.rotate270.avif</h2>
-  <h3>PNG version<h3>
-    <img src="./kimono.png" width="400">
-  <h3>AVIF version<h3>
-    <img src="./kimono.mirror-vertical.rotate270.avif" width="400">
-<h2>kimono.crop.avif</h2>
-  <h3>PNG version<h3>
-    <img src="./kimono.crop.png" width="400">
-  <h3>AVIF version<h3>
-    <img src="./kimono.crop.avif" width="400">
-<h2>kimono.mirror-vertical.rotate270.crop.avif</h2>
-  <h3>PNG version<h3>
-    <img src="./kimono.crop.png" width="400">
-  <h3>AVIF version<h3>
-    <img src="./kimono.mirror-vertical.rotate270.crop.avif" width="400">
-<h1>AVIFS images</h1>
-<h2>star.avifs<h2>
-  <h3>GIF version</h3>
-    <img src="./star.gif" width="400">
-  <h3>AVIFS version (without alpha)</h3>
-    <img src="./star.avifs" width="400">
-<h2>star-with-alpha.avifs<h2>
-  <h3>GIF version</h3>
-    <img src="./star.gif" width="400">
-  <h3>AVIFS version (with alpha)</h3>
-    <img src="./star-with-alpha.avifs" width="400">
-  </body>
-</html>
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <title>All images</title>
+  </head>
+  <body>
+<h1>AVIF images</h1>
+  <h2>hato.profile2.8bpc.yuv422.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./hato.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./hato.profile2.8bpc.yuv422.avif" width="400">
+  <h2>hato.profile2.8bpc.yuv422.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./hato.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./hato.profile2.8bpc.yuv422.monochrome.avif" width="400">
+  <h2>hato.profile2.10bpc.yuv422.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./hato.16bpc.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./hato.profile2.10bpc.yuv422.avif" width="400">
+  <h2>hato.profile2.10bpc.yuv422.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./hato.16bpc.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./hato.profile2.10bpc.yuv422.monochrome.avif" width="400">
+  <h2>hato.profile2.12bpc.yuv422.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./hato.16bpc.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./hato.profile2.12bpc.yuv422.avif" width="400">
+  <h2>hato.profile2.12bpc.yuv422.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./hato.16bpc.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./hato.profile2.12bpc.yuv422.monochrome.avif" width="400">
+  <h2>hato.profile0.8bpc.yuv420.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./hato.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./hato.profile0.8bpc.yuv420.avif" width="400">
+  <h2>hato.profile0.8bpc.yuv420.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./hato.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./hato.profile0.8bpc.yuv420.monochrome.avif" width="400">
+  <h2>hato.profile0.10bpc.yuv420.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./hato.16bpc.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./hato.profile0.10bpc.yuv420.avif" width="400">
+  <h2>hato.profile0.10bpc.yuv420.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./hato.16bpc.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./hato.profile0.10bpc.yuv420.monochrome.avif" width="400">
+  <h2>fox.profile0.8bpc.yuv420.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.8bpc.yuv420.avif" width="400">
+  <h2>fox.profile0.8bpc.yuv420.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.8bpc.yuv420.odd-width.avif" width="400">
+  <h2>fox.profile0.8bpc.yuv420.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.8bpc.yuv420.odd-height.avif" width="400">
+  <h2>fox.profile0.8bpc.yuv420.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.8bpc.yuv420.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile0.8bpc.yuv420.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.8bpc.yuv420.monochrome.avif" width="400">
+  <h2>fox.profile0.8bpc.yuv420.monochrome.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.8bpc.yuv420.monochrome.odd-width.avif" width="400">
+  <h2>fox.profile0.8bpc.yuv420.monochrome.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.8bpc.yuv420.monochrome.odd-height.avif" width="400">
+  <h2>fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.8bpc.yuv420.monochrome.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile0.10bpc.yuv420.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.10bpc.yuv420.avif" width="400">
+  <h2>fox.profile0.10bpc.yuv420.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.10bpc.yuv420.odd-width.avif" width="400">
+  <h2>fox.profile0.10bpc.yuv420.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.10bpc.yuv420.odd-height.avif" width="400">
+  <h2>fox.profile0.10bpc.yuv420.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.10bpc.yuv420.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile0.10bpc.yuv420.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.10bpc.yuv420.monochrome.avif" width="400">
+  <h2>fox.profile0.10bpc.yuv420.monochrome.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.10bpc.yuv420.monochrome.odd-width.avif" width="400">
+  <h2>fox.profile0.10bpc.yuv420.monochrome.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.10bpc.yuv420.monochrome.odd-height.avif" width="400">
+  <h2>fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile0.10bpc.yuv420.monochrome.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv420.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv420.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv420.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv420.odd-width.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv420.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv420.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv420.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv420.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv420.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv420.monochrome.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv420.monochrome.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv420.monochrome.odd-width.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv420.monochrome.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv420.monochrome.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv420.monochrome.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile2.8bpc.yuv422.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.8bpc.yuv422.avif" width="400">
+  <h2>fox.profile2.8bpc.yuv422.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.8bpc.yuv422.odd-width.avif" width="400">
+  <h2>fox.profile2.8bpc.yuv422.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.8bpc.yuv422.odd-height.avif" width="400">
+  <h2>fox.profile2.8bpc.yuv422.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.8bpc.yuv422.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile2.8bpc.yuv422.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.8bpc.yuv422.monochrome.avif" width="400">
+  <h2>fox.profile2.8bpc.yuv422.monochrome.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.8bpc.yuv422.monochrome.odd-width.avif" width="400">
+  <h2>fox.profile2.8bpc.yuv422.monochrome.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.8bpc.yuv422.monochrome.odd-height.avif" width="400">
+  <h2>fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.8bpc.yuv422.monochrome.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile2.10bpc.yuv422.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.10bpc.yuv422.avif" width="400">
+  <h2>fox.profile2.10bpc.yuv422.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.10bpc.yuv422.odd-width.avif" width="400">
+  <h2>fox.profile2.10bpc.yuv422.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.10bpc.yuv422.odd-height.avif" width="400">
+  <h2>fox.profile2.10bpc.yuv422.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.10bpc.yuv422.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile2.10bpc.yuv422.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.10bpc.yuv422.monochrome.avif" width="400">
+  <h2>fox.profile2.10bpc.yuv422.monochrome.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.10bpc.yuv422.monochrome.odd-width.avif" width="400">
+  <h2>fox.profile2.10bpc.yuv422.monochrome.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.10bpc.yuv422.monochrome.odd-height.avif" width="400">
+  <h2>fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.10bpc.yuv422.monochrome.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv422.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv422.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv422.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv422.odd-width.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv422.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv422.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv422.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv422.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv422.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv422.monochrome.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv422.monochrome.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv422.monochrome.odd-width.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv422.monochrome.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv422.monochrome.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv422.monochrome.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile1.8bpc.yuv444.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile1.8bpc.yuv444.avif" width="400">
+  <h2>fox.profile1.8bpc.yuv444.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile1.8bpc.yuv444.odd-width.avif" width="400">
+  <h2>fox.profile1.8bpc.yuv444.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile1.8bpc.yuv444.odd-height.avif" width="400">
+  <h2>fox.profile1.8bpc.yuv444.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile1.8bpc.yuv444.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile1.10bpc.yuv444.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile1.10bpc.yuv444.avif" width="400">
+  <h2>fox.profile1.10bpc.yuv444.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile1.10bpc.yuv444.odd-width.avif" width="400">
+  <h2>fox.profile1.10bpc.yuv444.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile1.10bpc.yuv444.odd-height.avif" width="400">
+  <h2>fox.profile1.10bpc.yuv444.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile1.10bpc.yuv444.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv444.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv444.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv444.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv444.odd-width.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv444.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv444.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv444.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv444.odd-width.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv444.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv444.monochrome.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv444.monochrome.odd-width.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv444.monochrome.odd-width.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv444.monochrome.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv444.monochrome.odd-height.avif" width="400">
+  <h2>fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./fox.odd-width.odd-height.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./fox.profile2.12bpc.yuv444.monochrome.odd-width.odd-height.avif" width="400">
+  <h2>plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.avif" width="400">
+  <h2>plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile0.8bpc.yuv420.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile0.8bpc.yuv420.alpha-full.avif" width="400">
+  <h2>plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile0.8bpc.yuv420.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif" width="400">
+  <h2>plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif" width="400">
+  <h2>plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv420.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv420.alpha-full.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv420.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.avif" width="400">
+  <h2>plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.8bpc.yuv422.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.8bpc.yuv422.alpha-full.avif" width="400">
+  <h2>plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.8bpc.yuv422.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.avif" width="400">
+  <h2>plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.10bpc.yuv422.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.10bpc.yuv422.alpha-full.avif" width="400">
+  <h2>plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.10bpc.yuv422.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv422.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv422.alpha-full.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv422.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile1.8bpc.yuv444.alpha-limited.avif" width="400">
+  <h2>plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile1.8bpc.yuv444.alpha-full.avif" width="400">
+  <h2>plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile1.10bpc.yuv444.alpha-limited.avif" width="400">
+  <h2>plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile1.10bpc.yuv444.alpha-full.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv444.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv444.alpha-full.avif" width="400">
+  <h2>plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-large.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-large.profile2.12bpc.yuv444.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.avif" width="400">
+  <h2>plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile0.8bpc.yuv420.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile0.8bpc.yuv420.alpha-full.avif" width="400">
+  <h2>plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile0.8bpc.yuv420.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.avif" width="400">
+  <h2>plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile0.10bpc.yuv420.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile0.10bpc.yuv420.alpha-full.avif" width="400">
+  <h2>plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile0.10bpc.yuv420.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv420.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv420.alpha-full.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv420.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.avif" width="400">
+  <h2>plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.8bpc.yuv422.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.8bpc.yuv422.alpha-full.avif" width="400">
+  <h2>plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.8bpc.yuv422.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.avif" width="400">
+  <h2>plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.10bpc.yuv422.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.10bpc.yuv422.alpha-full.avif" width="400">
+  <h2>plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.10bpc.yuv422.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv422.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv422.alpha-full.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv422.alpha-full.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile1.8bpc.yuv444.alpha-limited.avif" width="400">
+  <h2>plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile1.8bpc.yuv444.alpha-full.avif" width="400">
+  <h2>plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile1.10bpc.yuv444.alpha-limited.avif" width="400">
+  <h2>plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile1.10bpc.yuv444.alpha-full.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv444.alpha-limited.monochrome.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv444.alpha-full.avif" width="400">
+  <h2>plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif<h2>
+    <h3>PNG version<h3>
+      <img src="./plum-blossom-small.png" width="400">
+    <h3>AVIF version<h3>
+      <img src="./plum-blossom-small.profile2.12bpc.yuv444.alpha-full.monochrome.avif" width="400">
+<h2>kimono.avif</h2>
+  <h3>PNG version<h3>
+    <img src="./kimono.png" width="400">
+  <h3>AVIF version<h3>
+    <img src="./kimono.avif" width="400">
+<h2>kimono.rotate90.avif</h2>
+  <h3>PNG version<h3>
+    <img src="./kimono.png" width="400">
+  <h3>AVIF version<h3>
+    <img src="./kimono.rotate90.avif" width="400">
+<h2>kimono.rotate270.avif</h2>
+  <h3>PNG version<h3>
+    <img src="./kimono.png" width="400">
+  <h3>AVIF version<h3>
+    <img src="./kimono.rotate270.avif" width="400">
+<h2>kimono.mirror-horizontal.avif</h2>
+  <h3>PNG version<h3>
+    <img src="./kimono.png" width="400">
+  <h3>AVIF version<h3>
+    <img src="./kimono.mirror-horizontal.avif" width="400">
+<h2>kimono.mirror-vertical.rotate270.avif</h2>
+  <h3>PNG version<h3>
+    <img src="./kimono.png" width="400">
+  <h3>AVIF version<h3>
+    <img src="./kimono.mirror-vertical.rotate270.avif" width="400">
+<h2>kimono.crop.avif</h2>
+  <h3>PNG version<h3>
+    <img src="./kimono.crop.png" width="400">
+  <h3>AVIF version<h3>
+    <img src="./kimono.crop.avif" width="400">
+<h2>kimono.mirror-vertical.rotate270.crop.avif</h2>
+  <h3>PNG version<h3>
+    <img src="./kimono.crop.png" width="400">
+  <h3>AVIF version<h3>
+    <img src="./kimono.mirror-vertical.rotate270.crop.avif" width="400">
+<h1>AVIFS images</h1>
+<h2>star.avifs<h2>
+  <h3>GIF version</h3>
+    <img src="./star.gif" width="400">
+  <h3>AVIFS version (without alpha)</h3>
+    <img src="./star.avifs" width="400">
+<h2>star-with-alpha.avifs<h2>
+  <h3>GIF version</h3>
+    <img src="./star.gif" width="400">
+  <h3>AVIFS version (with alpha)</h3>
+    <img src="./star-with-alpha.avifs" width="400">
+  </body>
+</html>
diff --git a/third_party/rust/mp4parse/link-u-avif-sample-images/plum-blossom.svg b/third_party/rust/mp4parse/link-u-avif-sample-images/plum-blossom.svg
index e6b9b07f2f6d..561310bc0bf9 100644
--- a/third_party/rust/mp4parse/link-u-avif-sample-images/plum-blossom.svg
+++ b/third_party/rust/mp4parse/link-u-avif-sample-images/plum-blossom.svg
@@ -1,176 +1,176 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<!-- Created with Inkscape (http://www.inkscape.org/) -->
-
-<svg
-   xmlns:dc="http://purl.org/dc/elements/1.1/"
-   xmlns:cc="http://creativecommons.org/ns#"
-   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
-   xmlns:svg="http://www.w3.org/2000/svg"
-   xmlns="http://www.w3.org/2000/svg"
-   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
-   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
-   width="1000mm"
-   height="1000mm"
-   viewBox="0 0 1000 1000"
-   version="1.1"
-   id="svg8"
-   inkscape:version="0.92.4 (5da689c313, 2019-01-14)"
-   sodipodi:docname="plum-blossom.svg"
-   inkscape:export-filename="/home/psi/src/github.com/link-u/avif-sample-images/plum-blossom-small.png"
-   inkscape:export-xdpi="13.0048"
-   inkscape:export-ydpi="13.0048">
-  <defs
-     id="defs2" />
-  <sodipodi:namedview
-     id="base"
-     pagecolor="#ffffff"
-     bordercolor="#666666"
-     borderopacity="1.0"
-     inkscape:pageopacity="0.0"
-     inkscape:pageshadow="2"
-     inkscape:zoom="0.35"
-     inkscape:cx="1367.1429"
-     inkscape:cy="2035.7143"
-     inkscape:document-units="mm"
-     inkscape:current-layer="layer1"
-     showgrid="false"
-     inkscape:window-width="2560"
-     inkscape:window-height="1403"
-     inkscape:window-x="2560"
-     inkscape:window-y="0"
-     inkscape:window-maximized="1" />
-  <metadata
-     id="metadata5">
-    <rdf:RDF>
-      <cc:Work
-         rdf:about="">
-        <dc:format>image/svg+xml</dc:format>
-        <dc:type
-           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
-        <dc:title></dc:title>
-      </cc:Work>
-    </rdf:RDF>
-  </metadata>
-  <g
-     inkscape:label="Layer 1"
-     inkscape:groupmode="layer"
-     id="layer1"
-     transform="translate(0,703)">
-    <circle
-       id="path10"
-       cx="500"
-       cy="-453"
-       style="fill:#ffd5d5;stroke-width:0.24955437"
-       r="200" />
-    <circle
-       id="path10-9"
-       cx="262.2359"
-       cy="-280.25427"
-       style="fill:#ffd5d5;stroke-width:0.24955437"
-       r="200" />
-    <circle
-       id="path10-9-1"
-       cx="737.76416"
-       cy="-280.25427"
-       style="fill:#ffd5d5;stroke-width:0.24955437"
-       r="200" />
-    <circle
-       id="path10-9-2"
-       cx="353.05371"
-       cy="-0.74575806"
-       style="fill:#ffd5d5;stroke-width:0.24955437"
-       r="200" />
-    <circle
-       id="path10-9-2-7"
-       cx="646.94629"
-       cy="-0.74575806"
-       style="fill:#ffd5d5;stroke-width:0.24955437"
-       r="200" />
-    <rect
-       style="fill:#ffffff;stroke-width:0.23664318"
-       id="rect215"
-       width="20"
-       height="160"
-       x="493.0238"
-       y="-430.27975" />
-    <rect
-       style="fill:#ffffff;stroke-width:0.26458332"
-       id="rect217"
-       width="2.2678571"
-       height="10.583333"
-       x="495.46429"
-       y="-374.6012" />
-    <circle
-       style="fill:#ffeeaa;stroke-width:0.22826084"
-       id="path221"
-       cx="503.0238"
-       cy="-437.10715"
-       r="30" />
-    <rect
-       style="fill:#ffffff;stroke-width:0.23664318"
-       id="rect215-0"
-       width="20"
-       height="160"
-       x="336.11542"
-       y="186.29741"
-       transform="rotate(-72.000001)" />
-    <circle
-       style="fill:#ffeeaa;stroke-width:0.22826084"
-       id="path221-9"
-       cx="346.11542"
-       cy="179.47002"
-       r="30.000002"
-       transform="rotate(-72.000001)" />
-    <rect
-       style="fill:#ffffff;stroke-width:0.23664318"
-       id="rect215-0-3"
-       width="20"
-       height="160"
-       x="-49.702778"
-       y="-764.44379"
-       transform="rotate(72)" />
-    <circle
-       style="fill:#ffeeaa;stroke-width:0.22826084"
-       id="path221-9-6"
-       cx="-39.702778"
-       cy="-771.27118"
-       r="30.000002"
-       transform="rotate(72)" />
-    <rect
-       style="fill:#ffffff;stroke-width:0.23664318"
-       id="rect215-0-3-0"
-       width="20"
-       height="160"
-       x="-539.49518"
-       y="-358.71228"
-       transform="rotate(144)" />
-    <circle
-       style="fill:#ffeeaa;stroke-width:0.22826084"
-       id="path221-9-6-6"
-       cx="-529.49518"
-       cy="-365.53967"
-       r="30.000002"
-       transform="rotate(144)" />
-    <rect
-       style="fill:#ffffff;stroke-width:0.23664318"
-       id="rect215-0-3-0-2"
-       width="20"
-       height="160"
-       x="-292.17621"
-       y="228.38646"
-       transform="rotate(-144)" />
-    <circle
-       style="fill:#ffeeaa;stroke-width:0.22826084"
-       id="path221-9-6-6-6"
-       cx="-282.17621"
-       cy="221.55907"
-       r="30.000002"
-       transform="rotate(-144)" />
-    <circle
-       style="fill:#ffeeaa;stroke-width:0.31818181"
-       id="path4004"
-       cx="500"
-       cy="-203"
-       r="70" />
-  </g>
-</svg>
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="1000mm"
+   height="1000mm"
+   viewBox="0 0 1000 1000"
+   version="1.1"
+   id="svg8"
+   inkscape:version="0.92.4 (5da689c313, 2019-01-14)"
+   sodipodi:docname="plum-blossom.svg"
+   inkscape:export-filename="/home/psi/src/github.com/link-u/avif-sample-images/plum-blossom-small.png"
+   inkscape:export-xdpi="13.0048"
+   inkscape:export-ydpi="13.0048">
+  <defs
+     id="defs2" />
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="0.35"
+     inkscape:cx="1367.1429"
+     inkscape:cy="2035.7143"
+     inkscape:document-units="mm"
+     inkscape:current-layer="layer1"
+     showgrid="false"
+     inkscape:window-width="2560"
+     inkscape:window-height="1403"
+     inkscape:window-x="2560"
+     inkscape:window-y="0"
+     inkscape:window-maximized="1" />
+  <metadata
+     id="metadata5">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title></dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="Layer 1"
+     inkscape:groupmode="layer"
+     id="layer1"
+     transform="translate(0,703)">
+    <circle
+       id="path10"
+       cx="500"
+       cy="-453"
+       style="fill:#ffd5d5;stroke-width:0.24955437"
+       r="200" />
+    <circle
+       id="path10-9"
+       cx="262.2359"
+       cy="-280.25427"
+       style="fill:#ffd5d5;stroke-width:0.24955437"
+       r="200" />
+    <circle
+       id="path10-9-1"
+       cx="737.76416"
+       cy="-280.25427"
+       style="fill:#ffd5d5;stroke-width:0.24955437"
+       r="200" />
+    <circle
+       id="path10-9-2"
+       cx="353.05371"
+       cy="-0.74575806"
+       style="fill:#ffd5d5;stroke-width:0.24955437"
+       r="200" />
+    <circle
+       id="path10-9-2-7"
+       cx="646.94629"
+       cy="-0.74575806"
+       style="fill:#ffd5d5;stroke-width:0.24955437"
+       r="200" />
+    <rect
+       style="fill:#ffffff;stroke-width:0.23664318"
+       id="rect215"
+       width="20"
+       height="160"
+       x="493.0238"
+       y="-430.27975" />
+    <rect
+       style="fill:#ffffff;stroke-width:0.26458332"
+       id="rect217"
+       width="2.2678571"
+       height="10.583333"
+       x="495.46429"
+       y="-374.6012" />
+    <circle
+       style="fill:#ffeeaa;stroke-width:0.22826084"
+       id="path221"
+       cx="503.0238"
+       cy="-437.10715"
+       r="30" />
+    <rect
+       style="fill:#ffffff;stroke-width:0.23664318"
+       id="rect215-0"
+       width="20"
+       height="160"
+       x="336.11542"
+       y="186.29741"
+       transform="rotate(-72.000001)" />
+    <circle
+       style="fill:#ffeeaa;stroke-width:0.22826084"
+       id="path221-9"
+       cx="346.11542"
+       cy="179.47002"
+       r="30.000002"
+       transform="rotate(-72.000001)" />
+    <rect
+       style="fill:#ffffff;stroke-width:0.23664318"
+       id="rect215-0-3"
+       width="20"
+       height="160"
+       x="-49.702778"
+       y="-764.44379"
+       transform="rotate(72)" />
+    <circle
+       style="fill:#ffeeaa;stroke-width:0.22826084"
+       id="path221-9-6"
+       cx="-39.702778"
+       cy="-771.27118"
+       r="30.000002"
+       transform="rotate(72)" />
+    <rect
+       style="fill:#ffffff;stroke-width:0.23664318"
+       id="rect215-0-3-0"
+       width="20"
+       height="160"
+       x="-539.49518"
+       y="-358.71228"
+       transform="rotate(144)" />
+    <circle
+       style="fill:#ffeeaa;stroke-width:0.22826084"
+       id="path221-9-6-6"
+       cx="-529.49518"
+       cy="-365.53967"
+       r="30.000002"
+       transform="rotate(144)" />
+    <rect
+       style="fill:#ffffff;stroke-width:0.23664318"
+       id="rect215-0-3-0-2"
+       width="20"
+       height="160"
+       x="-292.17621"
+       y="228.38646"
+       transform="rotate(-144)" />
+    <circle
+       style="fill:#ffeeaa;stroke-width:0.22826084"
+       id="path221-9-6-6-6"
+       cx="-282.17621"
+       cy="221.55907"
+       r="30.000002"
+       transform="rotate(-144)" />
+    <circle
+       style="fill:#ffeeaa;stroke-width:0.31818181"
+       id="path4004"
+       cx="500"
+       cy="-203"
+       r="70" />
+  </g>
+</svg>
diff --git a/third_party/rust/mp4parse/link-u-avif-sample-images/scripts/compare.sh b/third_party/rust/mp4parse/link-u-avif-sample-images/scripts/compare.sh
index 513d19fd2b2f..34b72019d4a6 100644
--- a/third_party/rust/mp4parse/link-u-avif-sample-images/scripts/compare.sh
+++ b/third_party/rust/mp4parse/link-u-avif-sample-images/scripts/compare.sh
@@ -1,23 +1,23 @@
-##!/usr/bin/env bash
-
-avif=$2
-decoded=$3
-
-orig=$(cat Makefile | grep "^${avif}" | sed "s/^${avif}: \(.*\)$/\1/")
-
-if (echo ${avif} | grep "monochrome"); then
-  # FIMXE(ledyba-z): compare monochrome images.
-  score="100.0"
-elif (echo ${avif} | grep "\(rotate\|mirror\|crop\)"); then
-  # FIMXE(ledyba-z): compare transformed images
-  score="100.0"
-else
-  score=$(compare -metric PSNR ${orig} ${decoded} NULL: 2>&1 || true)
-fi
-if test $(echo "${score} >= 35.0" | bc -l) -eq 1; then
-  echo "Passing: ${decoded}: ${score}"
-  exit 0
-else
-  echo "Failed: ${decoded}: ${score} (vs ${orig})"
-  exit -1
-fi
+##!/usr/bin/env bash
+
+avif=$2
+decoded=$3
+
+orig=$(cat Makefile | grep "^${avif}" | sed "s/^${avif}: \(.*\)$/\1/")
+
+if (echo ${avif} | grep "monochrome"); then
+  # FIMXE(ledyba-z): compare monochrome images.
+  score="100.0"
+elif (echo ${avif} | grep "\(rotate\|mirror\|crop\)"); then
+  # FIMXE(ledyba-z): compare transformed images
+  score="100.0"
+else
+  score=$(compare -metric PSNR ${orig} ${decoded} NULL: 2>&1 || true)
+fi
+if test $(echo "${score} >= 35.0" | bc -l) -eq 1; then
+  echo "Passing: ${decoded}: ${score}"
+  exit 0
+else
+  echo "Failed: ${decoded}: ${score} (vs ${orig})"
+  exit -1
+fi
diff --git a/third_party/rust/mp4parse/link-u-avif-sample-images/star.input.txt b/third_party/rust/mp4parse/link-u-avif-sample-images/star.input.txt
index ce797225f603..93d691e5079f 100644
--- a/third_party/rust/mp4parse/link-u-avif-sample-images/star.input.txt
+++ b/third_party/rust/mp4parse/link-u-avif-sample-images/star.input.txt
@@ -1,9 +1,9 @@
-file 'star.png'
-duration 0.1
-file 'star90.png'
-duration 0.1
-file 'star180.png'
-duration 0.1
-file 'star270.png'
-duration 0.1
-file 'star.png'
+file 'star.png'
+duration 0.1
+file 'star90.png'
+duration 0.1
+file 'star180.png'
+duration 0.1
+file 'star270.png'
+duration 0.1
+file 'star.png'
diff --git a/third_party/rust/mp4parse/link-u-avif-sample-images/star.svg b/third_party/rust/mp4parse/link-u-avif-sample-images/star.svg
index 8bca22a42055..e1352bc0bffa 100644
--- a/third_party/rust/mp4parse/link-u-avif-sample-images/star.svg
+++ b/third_party/rust/mp4parse/link-u-avif-sample-images/star.svg
@@ -1,83 +1,83 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<!-- Created with Inkscape (http://www.inkscape.org/) -->
-
-<svg
-   xmlns:dc="http://purl.org/dc/elements/1.1/"
-   xmlns:cc="http://creativecommons.org/ns#"
-   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
-   xmlns:svg="http://www.w3.org/2000/svg"
-   xmlns="http://www.w3.org/2000/svg"
-   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
-   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
-   width="310.57089mm"
-   height="310.57089mm"
-   viewBox="0 0 310.57089 310.57089"
-   version="1.1"
-   id="svg8"
-   inkscape:version="0.92.4 (5da689c313, 2019-01-14)"
-   sodipodi:docname="star.svg"
-   inkscape:export-filename="/home/psi/g/lu/avif-sample-images/star.png"
-   inkscape:export-xdpi="13.0048"
-   inkscape:export-ydpi="13.0048">
-  <defs
-     id="defs2" />
-  <sodipodi:namedview
-     id="base"
-     pagecolor="#ffffff"
-     bordercolor="#666666"
-     borderopacity="1.0"
-     inkscape:pageopacity="0.0"
-     inkscape:pageshadow="2"
-     inkscape:zoom="0.35"
-     inkscape:cx="-377.14283"
-     inkscape:cy="435.7143"
-     inkscape:document-units="mm"
-     inkscape:current-layer="layer1"
-     showgrid="false"
-     fit-margin-top="0"
-     fit-margin-left="0"
-     fit-margin-right="0"
-     fit-margin-bottom="0"
-     inkscape:window-width="2560"
-     inkscape:window-height="1369"
-     inkscape:window-x="2560"
-     inkscape:window-y="1474"
-     inkscape:window-maximized="1"
-     inkscape:snap-others="true" />
-  <metadata
-     id="metadata5">
-    <rdf:RDF>
-      <cc:Work
-         rdf:about="">
-        <dc:format>image/svg+xml</dc:format>
-        <dc:type
-           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
-        <dc:title></dc:title>
-      </cc:Work>
-    </rdf:RDF>
-  </metadata>
-  <g
-     inkscape:label="レイヤー 1"
-     inkscape:groupmode="layer"
-     id="layer1"
-     transform="translate(7.4768269e-6,13.570917)">
-    <path
-       sodipodi:type="star"
-       style="fill:#ffeeaa;stroke-width:0.26458332"
-       id="path10"
-       sodipodi:sides="5"
-       sodipodi:cx="155.28574"
-       sodipodi:cy="141.64303"
-       sodipodi:r1="154.21428"
-       sodipodi:r2="77.10714"
-       sodipodi:arg1="-1.5707963"
-       sodipodi:arg2="-0.9424778"
-       inkscape:flatsided="false"
-       inkscape:rounded="0.05"
-       inkscape:randomized="0"
-       d="m 155.28574,-12.571243 c 5.12042,0 41.17993,88.823585 45.32244,91.833292 4.1425,3.009707 99.76176,9.85635 101.34405,14.726158 1.5823,4.869808 -71.75095,66.612433 -73.33325,71.482243 -1.58229,4.86981 21.45414,97.92485 17.31163,100.93456 -4.1425,3.00971 -85.52445,-47.65483 -90.64487,-47.65483 -5.12042,0 -86.50238,50.66453 -90.644886,47.65483 C 60.498348,263.3953 83.534785,170.34026 81.952489,165.47045 80.370192,160.60064 7.0369457,98.858007 8.6192422,93.988199 10.201539,89.118391 105.82079,82.271756 109.9633,79.26205 c 4.1425,-3.009707 40.20202,-91.833293 45.32244,-91.833293 z"
-       inkscape:export-xdpi="13.0048"
-       inkscape:export-ydpi="13.0048"
-       inkscape:transform-center-y="-14.661668" />
-  </g>
-</svg>
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="310.57089mm"
+   height="310.57089mm"
+   viewBox="0 0 310.57089 310.57089"
+   version="1.1"
+   id="svg8"
+   inkscape:version="0.92.4 (5da689c313, 2019-01-14)"
+   sodipodi:docname="star.svg"
+   inkscape:export-filename="/home/psi/g/lu/avif-sample-images/star.png"
+   inkscape:export-xdpi="13.0048"
+   inkscape:export-ydpi="13.0048">
+  <defs
+     id="defs2" />
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="0.35"
+     inkscape:cx="-377.14283"
+     inkscape:cy="435.7143"
+     inkscape:document-units="mm"
+     inkscape:current-layer="layer1"
+     showgrid="false"
+     fit-margin-top="0"
+     fit-margin-left="0"
+     fit-margin-right="0"
+     fit-margin-bottom="0"
+     inkscape:window-width="2560"
+     inkscape:window-height="1369"
+     inkscape:window-x="2560"
+     inkscape:window-y="1474"
+     inkscape:window-maximized="1"
+     inkscape:snap-others="true" />
+  <metadata
+     id="metadata5">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title></dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="レイヤー 1"
+     inkscape:groupmode="layer"
+     id="layer1"
+     transform="translate(7.4768269e-6,13.570917)">
+    <path
+       sodipodi:type="star"
+       style="fill:#ffeeaa;stroke-width:0.26458332"
+       id="path10"
+       sodipodi:sides="5"
+       sodipodi:cx="155.28574"
+       sodipodi:cy="141.64303"
+       sodipodi:r1="154.21428"
+       sodipodi:r2="77.10714"
+       sodipodi:arg1="-1.5707963"
+       sodipodi:arg2="-0.9424778"
+       inkscape:flatsided="false"
+       inkscape:rounded="0.05"
+       inkscape:randomized="0"
+       d="m 155.28574,-12.571243 c 5.12042,0 41.17993,88.823585 45.32244,91.833292 4.1425,3.009707 99.76176,9.85635 101.34405,14.726158 1.5823,4.869808 -71.75095,66.612433 -73.33325,71.482243 -1.58229,4.86981 21.45414,97.92485 17.31163,100.93456 -4.1425,3.00971 -85.52445,-47.65483 -90.64487,-47.65483 -5.12042,0 -86.50238,50.66453 -90.644886,47.65483 C 60.498348,263.3953 83.534785,170.34026 81.952489,165.47045 80.370192,160.60064 7.0369457,98.858007 8.6192422,93.988199 10.201539,89.118391 105.82079,82.271756 109.9633,79.26205 c 4.1425,-3.009707 40.20202,-91.833293 45.32244,-91.833293 z"
+       inkscape:export-xdpi="13.0048"
+       inkscape:export-ydpi="13.0048"
+       inkscape:transform-center-y="-14.661668" />
+  </g>
+</svg>
diff --git a/third_party/rust/mp4parse/src/boxes.rs b/third_party/rust/mp4parse/src/boxes.rs
index ef4ba658e208..838df5db1940 100644
--- a/third_party/rust/mp4parse/src/boxes.rs
+++ b/third_party/rust/mp4parse/src/boxes.rs
@@ -15,7 +15,7 @@ struct String;
 
 macro_rules! box_database {
     ($($(#[$attr:meta])* $boxenum:ident $boxtype:expr),*,) => {
-        #[derive(Clone, Copy, PartialEq)]
+        #[derive(Clone, Copy, PartialEq, Eq)]
         pub enum BoxType {
             $($(#[$attr])* $boxenum),*,
             UnknownBox(u32),
@@ -110,6 +110,8 @@ box_database!(
     MovieHeaderBox                    0x6d76_6864, // "mvhd"
     TrackBox                          0x7472_616b, // "trak"
     TrackHeaderBox                    0x746b_6864, // "tkhd"
+    TrackReferenceBox                 0x7472_6566, // "tref"
+    AuxiliaryBox                      0x6175_786C, // "auxl"
     EditBox                           0x6564_7473, // "edts"
     MediaBox                          0x6d64_6961, // "mdia"
     EditListBox                       0x656c_7374, // "elst"
diff --git a/third_party/rust/mp4parse/src/lib.rs b/third_party/rust/mp4parse/src/lib.rs
index b5852dc7e695..290ff61ee432 100644
--- a/third_party/rust/mp4parse/src/lib.rs
+++ b/third_party/rust/mp4parse/src/lib.rs
@@ -35,7 +35,7 @@ use std::io::{Read, Take};
 mod macros;
 
 mod boxes;
-use boxes::{BoxType, FourCC};
+use crate::boxes::{BoxType, FourCC};
 
 // Unit tests.
 #[cfg(test)]
@@ -137,6 +137,7 @@ impl<'a, T> Offset for OffsetReader<'a, T> {
 impl<'a, T: Read> Read for OffsetReader<'a, T> {
     fn read(&mut self, buf: &mut [u8]) -> std::io::Result<usize> {
         let bytes_read = self.reader.read(buf)?;
+        trace!("Read {} bytes at offset {}", bytes_read, self.offset);
         self.offset = self
             .offset
             .checked_add(bytes_read.to_u64())
@@ -164,7 +165,7 @@ struct String;
 /// Any detail that needs to be communicated to the caller must be encoded here
 /// since the [`Error`] type's associated data is part of the FFI.
 #[repr(C)]
-#[derive(Clone, Copy, PartialEq, Debug)]
+#[derive(Clone, Copy, PartialEq, Eq, Debug)]
 pub enum Status {
     Ok = 0,
     BadArg = 1,
@@ -173,25 +174,108 @@ pub enum Status {
     Eof = 4,
     Io = 5,
     Oom = 6,
-    MissingBrand,
-    FtypNotFirst,
-    NoImage,
-    MultipleMoov,
-    NoMoov,
-    LselNoEssential,
-    A1opNoEssential,
     A1lxEssential,
-    TxformNoEssential,
-    NoPrimaryItem,
+    A1opNoEssential,
+    AlacBadMagicCookieSize,
+    AlacFlagsNonzero,
+    Av1cMissing,
+    BitReaderError,
+    BoxBadSize,
+    BoxBadWideSize,
+    CheckParserStateErr,
+    ColrBadQuantity,
+    ColrBadSize,
+    ColrBadType,
+    ColrReservedNonzero,
+    ConstructionMethod,
+    CttsBadSize,
+    CttsBadVersion,
+    DflaBadMetadataBlockSize,
+    DflaFlagsNonzero,
+    DflaMissingMetadata,
+    DflaStreamInfoBadSize,
+    DflaStreamInfoNotFirst,
+    DopsChannelMappingWriteErr,
+    DopsOpusHeadWriteErr,
+    ElstBadVersion,
+    EsdsBadAudioSampleEntry,
+    EsdsBadDescriptor,
+    EsdsDecSpecificIntoTagQuantity,
+    FtypBadSize,
+    FtypNotFirst,
+    HdlrNameMultipleNul,
+    HdlrNameNoNul,
+    HdlrNameNotUtf8,
+    HdlrNotFirst,
+    HdlrPredefinedNonzero,
+    HdlrReservedNonzero,
+    HdlrTypeNotPict,
+    HdlrUnsupportedVersion,
+    HdrlBadQuantity,
+    IdatBadQuantity,
+    IdatMissing,
+    IinfBadChild,
+    IinfBadQuantity,
+    IlocBadConstructionMethod,
+    IlocBadExtent,
+    IlocBadExtentCount,
+    IlocBadFieldSize,
+    IlocBadQuantity,
+    IlocBadSize,
+    IlocDuplicateItemId,
+    IlocMissing,
+    IlocNotFound,
+    IlocOffsetOverflow,
     ImageItemType,
+    InfeFlagsNonzero,
+    InvalidUtf8,
+    IpcoIndexOverflow,
+    IpmaBadIndex,
+    IpmaBadItemOrder,
+    IpmaBadQuantity,
+    IpmaBadVersion,
+    IpmaDuplicateItemId,
+    IpmaFlagsNonzero,
+    IpmaIndexZeroNoEssential,
+    IpmaTooBig,
+    IpmaTooSmall,
+    IprpBadChild,
+    IprpBadQuantity,
+    IprpConflict,
+    IrefBadQuantity,
+    IrefRecursion,
+    IspeMissing,
     ItemTypeMissing,
-    ConstructionMethod,
-    ItemLocNotFound,
-    NoItemDataBox,
+    LselNoEssential,
+    MdhdBadTimescale,
+    MdhdBadVersion,
+    MehdBadVersion,
+    MetaBadQuantity,
+    MissingAvifOrAvisBrand,
+    MissingMif1Brand,
+    MoovBadQuantity,
+    MoovMissing,
+    MultipleAlpha,
+    MvhdBadTimescale,
+    MvhdBadVersion,
+    NoImage,
+    PitmBadQuantity,
+    PitmMissing,
+    PixiBadChannelCount,
+    PixiMissing,
+    PsshSizeOverflow,
+    ReadBufErr,
+    SchiQuantity,
+    StsdBadAudioSampleEntry,
+    StsdBadVideoSampleEntry,
+    TkhdBadVersion,
+    TxformBeforeIspe,
+    TxformNoEssential,
+    TxformOrder,
 }
 
 #[repr(C)]
-#[derive(Clone, Copy, Debug, PartialEq)]
+#[derive(Clone, Copy, Debug, PartialEq, Eq)]
 pub enum Feature {
     A1lx,
     A1op,
@@ -215,19 +299,14 @@ impl Feature {
         match self {
             Self::Auxc
             | Self::Av1c
+            | Self::Avis
             | Self::Colr
             | Self::Imir
             | Self::Irot
             | Self::Ispe
             | Self::Pasp
             | Self::Pixi => true,
-            Self::A1lx
-            | Self::A1op
-            | Self::Clap
-            | Self::Grid
-            | Self::Ipro
-            | Self::Lsel
-            | Self::Avis => false,
+            Self::A1lx | Self::A1op | Self::Clap | Self::Grid | Self::Ipro | Self::Lsel => false,
         }
     }
 }
@@ -300,17 +379,15 @@ impl UnsupportedFeatures {
 impl<T> From<Status> for Result<T> {
     /// A convenience method to enable shortcuts like
     /// ```
-    /// # extern crate mp4parse;
     /// # use mp4parse::{Result,Status};
     /// # let _: Result<()> =
-    /// Status::MissingBrand.into();
+    /// Status::MissingAvifOrAvisBrand.into();
     /// ```
     /// instead of
     /// ```
-    /// # extern crate mp4parse;
     /// # use mp4parse::{Error,Result,Status};
     /// # let _: Result<()> =
-    /// Err(Error::from(Status::MissingBrand));
+    /// Err(Error::from(Status::MissingAvifOrAvisBrand));
     /// ```
     /// Note that `Status::Ok` can't be supported this way and will panic.
     fn from(parse_status: Status) -> Self {
@@ -333,23 +410,9 @@ impl From<Status> for Error {
             | Status::Eof
             | Status::Io
             | Status::Oom => {
-                panic!("Status -> Error is only for Status:InvalidDataDetail errors")
-            }
-            Status::MissingBrand
-            | Status::FtypNotFirst
-            | Status::NoImage
-            | Status::MultipleMoov
-            | Status::NoMoov
-            | Status::LselNoEssential
-            | Status::A1opNoEssential
-            | Status::A1lxEssential
-            | Status::TxformNoEssential
-            | Status::NoPrimaryItem
-            | Status::ImageItemType
-            | Status::ItemTypeMissing
-            | Status::ConstructionMethod
-            | Status::ItemLocNotFound
-            | Status::NoItemDataBox => Self::InvalidDataDetail(parse_status),
+                panic!("Status -> Error is only for Status:InvalidData errors")
+            }
+            _ => Self::InvalidData(parse_status),
         }
     }
 }
@@ -366,63 +429,358 @@ impl From<Status> for &str {
             | Status::Oom => {
                 panic!("Status -> Error is only for specific parsing errors")
             }
-            Status::MissingBrand => {
-                "The file shall list 'avif' or 'avis' in the compatible_brands field
-                 of the FileTypeBox \
-                 per https://aomediacodec.github.io/av1-avif/#file-constraints"
+            Status::A1lxEssential => {
+                "AV1LayeredImageIndexingProperty (a1lx) shall not be marked as essential \
+                 per https://aomediacodec.github.io/av1-avif/#layered-image-indexing-property-description"
+            }
+            Status::A1opNoEssential => {
+                "OperatingPointSelectorProperty (a1op) shall be marked as essential \
+                 per https://aomediacodec.github.io/av1-avif/#operating-point-selector-property-description"
+            }
+            Status::AlacBadMagicCookieSize => {
+                "ALACSpecificBox magic cookie is the wrong size"
+            }
+            Status::AlacFlagsNonzero => {
+                "no-zero alac (ALAC) flags"
+            }
+            Status::Av1cMissing => {
+                "One AV1 Item Configuration Property (av1C) is mandatory for an \
+                 image item of type 'av01' \
+                 per AVIF specification § 2.2.1"
+            }
+            Status::BitReaderError => {
+                "Bitwise read failed"
+            }
+            Status::BoxBadSize => {
+                "malformed size"
+            }
+            Status::BoxBadWideSize => {
+                "malformed wide size"
+            }
+            Status::CheckParserStateErr => {
+                "unread box content or bad parser sync"
+            }
+            Status::ColrBadQuantity => {
+                "Each item shall have at most one property association with a
+                 ColourInformationBox (colr) for a given value of colour_type \
+                 per HEIF (ISO/IEC DIS 23008-12) § 6.5.5.1"
+            }
+            Status::ColrBadSize => {
+                "Unexpected size for colr box"
+            }
+            Status::ColrBadType => {
+                "Unsupported colour_type for ColourInformationBox"
+            }
+            Status::ColrReservedNonzero => {
+                "The 7 reserved bits at the end of the ColourInformationBox \
+                 for colour_type == 'nclx' must be 0 \
+                 per ISOBMFF (ISO 14496-12:2020) § 12.1.5.2"
+            }
+            Status::ConstructionMethod => {
+                "construction_method shall be 0 (file) or 1 (idat) per MIAF (ISO 23000-22:2019) § 7.2.1.7"
+            }
+            Status::CttsBadSize => {
+                "insufficient data in 'ctts' box"
+            }
+            Status::CttsBadVersion => {
+                "unsupported version in 'ctts' box"
+            }
+            Status::DflaBadMetadataBlockSize => {
+                "FLACMetadataBlock larger than parent box"
+            }
+            Status::DflaFlagsNonzero => {
+                "no-zero dfLa (FLAC) flags"
+            }
+            Status::DflaMissingMetadata => {
+                "FLACSpecificBox missing metadata"
+            }
+            Status::DflaStreamInfoBadSize => {
+                "FLACSpecificBox STREAMINFO block is the wrong size"
+            }
+            Status::DflaStreamInfoNotFirst => {
+                "FLACSpecificBox must have STREAMINFO metadata first"
+            }
+            Status::DopsChannelMappingWriteErr => {
+                "Couldn't write channel mapping table data."
+            }
+            Status::DopsOpusHeadWriteErr => {
+                "Couldn't write OpusHead tag."
+            }
+            Status::ElstBadVersion => {
+                "unhandled elst version"
+            }
+            Status::EsdsBadAudioSampleEntry => {
+                "malformed audio sample entry"
+            }
+            Status::EsdsBadDescriptor => {
+                "Invalid descriptor."
+            }
+            Status::EsdsDecSpecificIntoTagQuantity => {
+                "There can be only one DecSpecificInfoTag descriptor"
+            }
+            Status::FtypBadSize => {
+                "invalid ftyp size"
             }
             Status::FtypNotFirst => {
                 "The FileTypeBox shall be placed as early as possible in the file \
                  per ISOBMFF (ISO 14496-12:2020) § 4.3.1"
             }
-            Status::NoImage => "No primary image or image sequence found",
-            Status::NoMoov => {
-                "No moov box found; \
+            Status::HdlrNameMultipleNul => {
+                "The HandlerBox 'name' field shall have a NUL byte \
+                 only in the final position \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2"
+            }
+            Status::HdlrNameNoNul => {
+                "The HandlerBox 'name' field shall be null-terminated \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2"
+            }
+            Status::HdlrNameNotUtf8 => {
+                "The HandlerBox 'name' field shall be valid utf8 \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2"
+            }
+            Status::HdlrNotFirst => {
+                "The HandlerBox shall be the first contained box within the MetaBox \
+                 per MIAF (ISO 23000-22:2019) § 7.2.1.5"
+            }
+            Status::HdlrPredefinedNonzero => {
+                "The HandlerBox 'pre_defined' field shall be 0 \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2"
+            }
+            Status::HdlrReservedNonzero => {
+                "The HandlerBox 'reserved' fields shall be 0 \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2"
+            }
+            Status::HdlrTypeNotPict => {
+                "The HandlerBox handler_type must be 'pict' \
+                 per MIAF (ISO 23000-22:2019) § 7.2.1.5"
+            }
+            Status::HdlrUnsupportedVersion => {
+                "The HandlerBox version shall be 0 (zero) \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2"
+            }
+            Status::HdrlBadQuantity => {
+                "There shall be exactly one hdlr box \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.4.3.1"
+            }
+            Status::IdatBadQuantity => {
+                "There shall be zero or one idat boxes \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.11"
+            }
+            Status::IdatMissing => {
+                "ItemLocationBox (iloc) construction_method indicates 1 (idat), \
+                 but no idat box is present."
+            }
+            Status::IinfBadChild => {
+                "iinf box shall contain only infe boxes \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.6.2"
+            }
+            Status::IinfBadQuantity => {
+                "There shall be zero or one iinf boxes \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.6.1"
+            }
+            Status::IlocBadConstructionMethod => {
+                "construction_method is taken from the set 0, 1 or 2 \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.3.3"
+            }
+            Status::IlocBadExtent => {
+                "extent_count != 1 requires explicit offset and length \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.3.3"
+            }
+            Status::IlocBadExtentCount => {
+                "extent_count must have a value 1 or greater \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.3.3"
+            }
+            Status::IlocBadFieldSize => {
+                "value must be in the set {0, 4, 8}"
+            }
+            Status::IlocBadQuantity => {
+                "There shall be zero or one iloc boxes \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.3.1"
+            }
+            Status::IlocBadSize => {
+                "invalid iloc size"
+            }
+            Status::IlocDuplicateItemId => {
+                "duplicate item_ID in iloc"
+            }
+            Status::IlocMissing => {
+                "iloc missing"
+            }
+            Status::IlocNotFound => {
+                "ItemLocationBox (iloc) contains an extent not present in any mdat or idat box"
+            }
+            Status::IlocOffsetOverflow => {
+                "offset calculation overflow"
+            }
+            Status::ImageItemType => {
+                "Image item type is neither 'av01' nor 'grid'"
+            }
+            Status::InfeFlagsNonzero => {
+                "'infe' flags field shall be 0 \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.6.2"
+            }
+            Status::InvalidUtf8 => {
+                "invalid utf8"
+            }
+            Status::IpcoIndexOverflow => {
+                "ipco index overflow"
+            }
+            Status::IpmaBadIndex => {
+                "Invalid property index in ipma"
+            }
+            Status::IpmaBadItemOrder => {
+                "Each ItemPropertyAssociation box shall be ordered by increasing item_ID"
+            }
+            Status::IpmaBadQuantity => {
+                "There shall be at most one ItemPropertyAssociationbox with a given pair of \
+                 values of version and flags \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.14.1"
+            }
+            Status::IpmaBadVersion => {
+                "The ipma version 0 should be used unless 32-bit item_ID values are needed \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.14.1"
+            }
+            Status::IpmaDuplicateItemId => {
+                "There shall be at most one occurrence of a given item_ID, \
+                 in the set of ItemPropertyAssociationBox boxes \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.14.1"
+            }
+            Status::IpmaFlagsNonzero => {
+                "Unless there are more than 127 properties in the ItemPropertyContainerBox, \
+                 flags should be equal to 0 \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.14.1"
+            }
+            Status::IpmaIndexZeroNoEssential => {
+                "the essential indicator shall be 0 for property index 0 \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.14.3"
+            }
+            Status::IpmaTooBig => {
+                "ipma box exceeds maximum size for entry_count"
+            }
+            Status::IpmaTooSmall => {
+                "ipma box below minimum size for entry_count"
+            }
+            Status::IprpBadChild => {
+                "unexpected iprp child"
+            }
+            Status::IprpBadQuantity => {
+                "There shall be zero or one iprp boxes \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.14.1"
+            }
+            Status::IprpConflict => {
+                "conflicting item property values"
+            }
+            Status::IrefBadQuantity => {
+                "There shall be zero or one iref boxes \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.12.1"
+            }
+            Status::IrefRecursion => {
+                "from_item_id and to_item_id must be different"
+            }
+            Status::IspeMissing => {
+                "Missing 'ispe' property for image item, required \
+                 per HEIF (ISO/IEC 23008-12:2017) § 6.5.3.1"
+            }
+            Status::ItemTypeMissing => {
+                "No ItemInfoEntry for item_ID"
+            }
+            Status::LselNoEssential => {
+                "LayerSelectorProperty (lsel) shall be marked as essential \
+                 per HEIF (ISO/IEC 23008-12:2017) § 6.5.11.1"
+            }
+            Status::MdhdBadTimescale => {
+                "zero timescale in mdhd"
+            }
+            Status::MdhdBadVersion => {
+                "unhandled mdhd version"
+            }
+            Status::MehdBadVersion => {
+                "unhandled mehd version"
+            }
+            Status::MetaBadQuantity => {
+                "There should be zero or one meta boxes \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.1.1"
+            }
+            Status::MissingAvifOrAvisBrand => {
+                "The file shall list 'avif' or 'avis' in the compatible_brands field
+                 of the FileTypeBox \
+                 per https://aomediacodec.github.io/av1-avif/#file-constraints"
+            }
+            Status::MissingMif1Brand => {
+                "The FileTypeBox should contain 'mif1' in the compatible_brands list \
+                 per MIAF (ISO 23000-22:2019/Amd. 2:2021) § 7.2.1.2"
+            }
+            Status::MoovBadQuantity => {
+                "Multiple moov boxes found; \
                  files with avis or msf1 brands shall contain exactly one moov box \
                  per ISOBMFF (ISO 14496-12:2020) § 8.2.1.1"
             }
-            Status::MultipleMoov => {
-                "Multiple moov boxes found; \
+            Status::MoovMissing => {
+                "No moov box found; \
                  files with avis or msf1 brands shall contain exactly one moov box \
                  per ISOBMFF (ISO 14496-12:2020) § 8.2.1.1"
             }
-            Status::LselNoEssential => {
-                "LayerSelectorProperty (lsel) shall be marked as essential \
-                 per HEIF (ISO/IEC 23008-12:2017) § 6.5.11.1"
+            Status::MultipleAlpha => {
+                "multiple alpha planes"
             }
-            Status::A1opNoEssential => {
-                "OperatingPointSelectorProperty (a1op) shall be marked as essential \
-                 per https://aomediacodec.github.io/av1-avif/#operating-point-selector-property-description"
+            Status::MvhdBadTimescale => {
+                "zero timescale in mvhd"
             }
-            Status::A1lxEssential => {
-                "AV1LayeredImageIndexingProperty (a1lx) shall not be marked as essential \
-                 per https://aomediacodec.github.io/av1-avif/#layered-image-indexing-property-description"
+            Status::MvhdBadVersion => {
+                "unhandled mvhd version"
             }
-            Status::TxformNoEssential => {
-                "All transformative properties associated with coded and \
-                 derived images required or conditionally required by this \
-                 document shall be marked as essential \
-                 per MIAF (ISO 23000-22:2019) § 7.3.9"
+            Status::NoImage => "No primary image or image sequence found",
+            Status::PitmBadQuantity => {
+                "There shall be zero or one pitm boxes \
+                 per ISOBMFF (ISO 14496-12:2020) § 8.11.4.1"
             }
-            Status::NoPrimaryItem => {
+            Status::PitmMissing => {
                 "Missing required PrimaryItemBox (pitm), required \
                  per HEIF (ISO/IEC 23008-12:2017) § 10.2.1"
             }
-            Status::ImageItemType => {
-                "Image item type is neither 'av01' nor 'grid'"
+            Status::PixiBadChannelCount => {
+                "invalid num_channels"
             }
-            Status::ItemTypeMissing => {
-                "No ItemInfoEntry for item_ID"
+            Status::PixiMissing => {
+                "The pixel information property shall be associated with every image \
+                 that is displayable (not hidden) \
+                 per MIAF (ISO/IEC 23000-22:2019) specification § 7.3.6.6"
             }
-            Status::ConstructionMethod => {
-                "construction_method shall be 0 (file) or 1 (idat) per MIAF (ISO 23000-22:2019) § 7.2.1.7"
+            Status::PsshSizeOverflow => {
+                "overflow in read_pssh"
             }
-            Status::ItemLocNotFound => {
-                "ItemLocationBox (iloc) contains an extent not present in any mdat or idat box"
+            Status::ReadBufErr => {
+                "failed buffer read"
             }
-            Status::NoItemDataBox => {
-                "ItemLocationBox (iloc) construction_method indicates 1 (idat), \
-                 but no idat box is present."
+            Status::SchiQuantity => {
+                "tenc box should be only one at most in sinf box"
+            }
+            Status::StsdBadAudioSampleEntry => {
+                "malformed audio sample entry"
+            }
+            Status::StsdBadVideoSampleEntry => {
+                "malformed video sample entry"
+            }
+            Status::TkhdBadVersion => {
+                "unhandled tkhd version"
+            }
+            Status::TxformBeforeIspe => {
+                "Every image item shall be associated with one property of \
+                 type ImageSpatialExtentsProperty (ispe), prior to the \
+                 association of all transformative properties. \
+                 per HEIF (ISO/IEC 23008-12:2017) § 6.5.3.1"
+            }
+            Status::TxformNoEssential => {
+                "All transformative properties associated with coded and \
+                 derived images required or conditionally required by this \
+                 document shall be marked as essential \
+                 per MIAF (ISO 23000-22:2019) § 7.3.9"
+            }
+            Status::TxformOrder => {
+                "These properties, if used, shall be indicated to be applied \
+                 in the following order: clean aperture first, then rotation, \
+                 then mirror. \
+                 per MIAF (ISO/IEC 23000-22:2019) § 7.3.6.7"
             }
         }
     }
@@ -431,9 +789,8 @@ impl From<Status> for &str {
 impl From<Error> for Status {
     fn from(error: Error) -> Self {
         match error {
-            Error::InvalidData(_) => Self::Invalid,
             Error::Unsupported(_) => Self::Unsupported,
-            Error::InvalidDataDetail(parse_status) => parse_status,
+            Error::InvalidData(parse_status) => parse_status,
             Error::UnexpectedEOF => Self::Eof,
             Error::Io(_) => {
                 // Getting std::io::ErrorKind::UnexpectedEof is normal
@@ -441,7 +798,7 @@ impl From<Error> for Status {
                 // those to our Error::UnexpectedEOF variant.
                 Self::Io
             }
-            Error::NoMoov => Self::NoMoov,
+            Error::MoovMissing => Self::MoovMissing,
             Error::OutOfMemory => Self::Oom,
         }
     }
@@ -485,11 +842,8 @@ impl From<std::io::Error> for Status {
 #[derive(Debug)]
 pub enum Error {
     /// Parse error caused by corrupt or malformed data.
-    InvalidData(&'static str),
-    /// Similar to [`Self::InvalidData`], but for errors that have a specific
-    /// [`Status`] variant for communicating the detail across FFI.
     /// See the helper [`From<Status> for Error`](enum.Error.html#impl-From<Status>)
-    InvalidDataDetail(Status),
+    InvalidData(Status),
     /// Parse error caused by limited parser support rather than invalid data.
     Unsupported(&'static str),
     /// Reflect `std::io::ErrorKind::UnexpectedEof` for short data.
@@ -497,7 +851,7 @@ pub enum Error {
     /// Propagate underlying errors from `std::io`.
     Io(std::io::Error),
     /// read_mp4 terminated without detecting a moov box.
-    NoMoov,
+    MoovMissing,
     /// Out of memory
     OutOfMemory,
 }
@@ -512,7 +866,7 @@ impl std::error::Error for Error {}
 
 impl From<bitreader::BitReaderError> for Error {
     fn from(_: bitreader::BitReaderError) -> Error {
-        Error::InvalidData("invalid data")
+        Status::BitReaderError.into()
     }
 }
 
@@ -527,13 +881,13 @@ impl From<std::io::Error> for Error {
 
 impl From<std::string::FromUtf8Error> for Error {
     fn from(_: std::string::FromUtf8Error) -> Error {
-        Error::InvalidData("invalid utf8")
+        Status::InvalidUtf8.into()
     }
 }
 
 impl From<std::str::Utf8Error> for Error {
     fn from(_: std::str::Utf8Error) -> Error {
-        Error::InvalidData("invalid utf8")
+        Status::InvalidUtf8.into()
     }
 }
 
@@ -546,7 +900,6 @@ impl From<std::num::TryFromIntError> for Error {
 impl From<Error> for std::io::Error {
     fn from(err: Error) -> Self {
         let kind = match err {
-            Error::InvalidData(_) => std::io::ErrorKind::InvalidData,
             Error::UnexpectedEOF => std::io::ErrorKind::UnexpectedEof,
             Error::Io(io_err) => return io_err,
             _ => std::io::ErrorKind::Other,
@@ -742,6 +1095,29 @@ pub enum SampleEntry {
     Unknown,
 }
 
+#[derive(Debug)]
+pub struct TrackReferenceBox {
+    pub references: TryVec<TrackReferenceEntry>,
+}
+
+impl TrackReferenceBox {
+    pub fn has_auxl_reference(&self, track_id: u32) -> bool {
+        self.references.iter().any(|entry| match entry {
+            TrackReferenceEntry::Auxiliary(aux_entry) => aux_entry.track_ids.contains(&track_id),
+        })
+    }
+}
+
+#[derive(Debug)]
+pub enum TrackReferenceEntry {
+    Auxiliary(TrackReference),
+}
+
+#[derive(Debug)]
+pub struct TrackReference {
+    pub track_ids: TryVec<u32>,
+}
+
 /// An Elementary Stream Descriptor
 /// See MPEG-4 Systems (ISO 14496-1:2010) § 7.2.6.5
 #[allow(non_camel_case_types)]
@@ -1146,10 +1522,10 @@ pub struct MediaContext {
 
 /// An ISOBMFF item as described by an iloc box. For the sake of avoiding copies,
 /// this can either be represented by the `Location` variant, which indicates
-/// where the data exists within a `MediaDataBox` stored separately, or the
-/// `Data` variant which owns the data. Unfortunately, it's not simple to
-/// represent this as a [`std::borrow::Cow`], or other reference-based type, because
-/// multiple instances may references different parts of the same [`MediaDataBox`]
+/// where the data exists within a `DataBox` stored separately, or the `Data`
+/// variant which owns the data. Unfortunately, it's not simple to represent
+/// this as a [`std::borrow::Cow`], or other reference-based type, because
+/// multiple instances may references different parts of the same [`DataBox`]
 /// and we want to avoid the copy that splitting the storage would entail.
 enum IsobmffItem {
     MdatLocation(Extent),
@@ -1192,12 +1568,17 @@ impl AvifItem {
     }
 }
 
-#[derive(Debug)]
+#[derive(Default, Debug)]
 pub struct AvifContext {
     /// Level of deviation from the specification before failing the parse
     strictness: ParseStrictness,
-    /// Referred to by the `IsobmffItem::*Location` variants of the `AvifItem`s in this struct
-    media_storage: TryVec<MediaDataBox>,
+    /// Storage elements which can be located anywhere within the "file" identified by
+    /// [`BoxType::ItemLocationBox`]es using [`ConstructionMethod::File`].
+    /// Referred to by the [`IsobmffItem`]`::*Location` variants of the `AvifItem`s in this struct
+    media_storage: TryVec<DataBox>,
+    /// Similar to `media_storage`, but for a single optional chunk of storage within the
+    /// MetaBox itentified by [`BoxType::ItemLocationBox`]es using [`ConstructionMethod::Idat`].
+    item_data_box: Option<DataBox>,
     /// The item indicated by the `pitm` box, See ISOBMFF (ISO 14496-12:2020) § 8.11.4
     /// May be `None` in the pure image sequence case.
     primary_item: Option<AvifItem>,
@@ -1211,13 +1592,17 @@ pub struct AvifContext {
     /// Should probably only ever be [`AVIF_BRAND`] or [`AVIS_BRAND`], but other values
     /// are legal as long as one of the two is the `compatible_brand` list.
     pub major_brand: FourCC,
-    /// True if a `moov` box is present
-    pub has_sequence: bool,
+    /// Information on the sequence contained in the image, or None if not present
+    pub sequence: Option<MediaContext>,
     /// A collection of unsupported features encountered during the parse
     pub unsupported_features: UnsupportedFeatures,
 }
 
 impl AvifContext {
+    pub fn primary_item_is_present(&self) -> bool {
+        self.primary_item.is_some()
+    }
+
     pub fn primary_item_coded_data(&self) -> Option<&[u8]> {
         self.primary_item
             .as_ref()
@@ -1230,6 +1615,10 @@ impl AvifContext {
             .map(|item| self.image_bits_per_channel(item.id))
     }
 
+    pub fn alpha_item_is_present(&self) -> bool {
+        self.alpha_item.is_some()
+    }
+
     pub fn alpha_item_coded_data(&self) -> Option<&[u8]> {
         self.alpha_item
             .as_ref()
@@ -1262,9 +1651,9 @@ impl AvifContext {
                 Some(ItemProperty::ImageSpatialExtents(ispe)) => Ok(ispe),
                 Some(other_property) => panic!("property key mismatch: {:?}", other_property),
                 None => {
-                    fail_if(
+                    fail_with_status_if(
                         self.strictness != ParseStrictness::Permissive,
-                        "ispe is a mandatory property",
+                        Status::IspeMissing,
                     )?;
                     Ok(std::ptr::null())
                 }
@@ -1376,10 +1765,15 @@ impl AvifContext {
                     }
                 }
                 unreachable!(
-                    "IsobmffItem::Location requires the location exists in AvifContext::media_storage"
+                    "IsobmffItem::MdatLocation requires the location exists in AvifContext::media_storage"
                 );
             }
-            IsobmffItem::IdatLocation(_) => unimplemented!(),
+            IsobmffItem::IdatLocation(extent) => {
+                self.item_data_box
+                    .as_ref()
+                    .and_then(|idat| idat.get(extent))
+                    .unwrap_or_else(|| unreachable!("IsobmffItem::IdatLocation equires the location exists in AvifContext::item_data_box"))
+            }
             IsobmffItem::Data(data) => data.as_slice(),
         }
     }
@@ -1393,29 +1787,31 @@ struct AvifMeta {
     primary_item_id: Option<ItemId>,
     item_infos: TryVec<ItemInfoEntry>,
     iloc_items: TryHashMap<ItemId, ItemLocationBoxItem>,
-    item_data_box: Option<ItemDataBox>,
+    item_data_box: Option<DataBox>,
 }
 
-/// An Item Data Box
-/// See ISOBMFF (ISO 14496-12:2020) § 8.11.11
-struct ItemDataBox {
-    data: TryVec<u8>,
-}
-
-/// A Media Data Box
-/// See ISOBMFF (ISO 14496-12:2020) § 8.1.1
-struct MediaDataBox {
-    /// Offset of `data` from the beginning of the "file". See ConstructionMethod::File.
-    /// Note: the file may not be an actual file, read_avif supports any `&mut impl Read`
-    /// source for input. However we try to match the terminology used in the spec.
-    file_offset: u64,
+#[derive(Debug)]
+enum DataBoxMetadata {
+    Idat,
+    Mdat {
+        /// Offset of `data` from the beginning of the "file". See ConstructionMethod::File.
+        /// Note: the file may not be an actual file, read_avif supports any `&mut impl Read`
+        /// source for input. However we try to match the terminology used in the spec.
+        file_offset: u64,
+    },
+}
+
+/// Represents either an Item Data Box (ISOBMFF (ISO 14496-12:2020) § 8.11.11)
+/// Or a Media Data Box (ISOBMFF (ISO 14496-12:2020) § 8.1.1)
+struct DataBox {
+    metadata: DataBoxMetadata,
     data: TryVec<u8>,
 }
 
-impl fmt::Debug for MediaDataBox {
+impl fmt::Debug for DataBox {
     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
-        f.debug_struct("MediaDataBox")
-            .field("file_offset", &self.file_offset)
+        f.debug_struct("DataBox")
+            .field("metadata", &self.metadata)
             .field("data", &format_args!("{} bytes", self.data.len()))
             .finish()
     }
@@ -1431,18 +1827,49 @@ fn u64_to_usize_logged(x: u64) -> Option<usize> {
     }
 }
 
-/// Generalizes the different data boxes a [`ItemLocationBoxItem`] can refer to
-trait DataBox {
-    fn data(&self) -> &[u8];
+impl DataBox {
+    fn from_mdat(file_offset: u64, data: TryVec<u8>) -> Self {
+        Self {
+            metadata: DataBoxMetadata::Mdat { file_offset },
+            data,
+        }
+    }
+
+    fn from_idat(data: TryVec<u8>) -> Self {
+        Self {
+            metadata: DataBoxMetadata::Idat,
+            data,
+        }
+    }
+
+    fn data(&self) -> &[u8] {
+        &self.data
+    }
 
     /// Convert an absolute offset to an offset relative to the beginning of the
     /// slice [`DataBox::data`] returns. Returns None if the offset would be
     /// negative or if the offset would overflow a `usize`.
-    fn start(&self, offset: u64) -> Option<usize>;
+    fn start(&self, offset: u64) -> Option<usize> {
+        match self.metadata {
+            DataBoxMetadata::Idat => u64_to_usize_logged(offset),
+            DataBoxMetadata::Mdat { file_offset } => {
+                let start = offset.checked_sub(file_offset);
+                if start.is_none() {
+                    error!("Overflow subtracting {} + {}", offset, file_offset);
+                }
+                u64_to_usize_logged(start?)
+            }
+        }
+    }
 
     /// Returns an appropriate variant of [`IsobmffItem`] to describe the extent
     /// referencing data within this type of box.
-    fn location(&self, extent: &Extent) -> IsobmffItem;
+    fn location(&self, extent: &Extent) -> IsobmffItem {
+        match self.metadata {
+            DataBoxMetadata::Idat => IsobmffItem::IdatLocation(extent.clone()),
+            DataBoxMetadata::Mdat { .. } => IsobmffItem::MdatLocation(extent.clone()),
+        }
+    }
 
     /// Return a slice from the DataBox specified by the provided `extent`.
     /// Returns `None` if the extent isn't fully contained by the DataBox or if
@@ -1466,46 +1893,14 @@ trait DataBox {
     }
 }
 
-impl DataBox for ItemDataBox {
-    fn data(&self) -> &[u8] {
-        &self.data
-    }
-
-    fn start(&self, offset: u64) -> Option<usize> {
-        u64_to_usize_logged(offset)
-    }
-
-    fn location(&self, extent: &Extent) -> IsobmffItem {
-        IsobmffItem::IdatLocation(extent.clone())
-    }
-}
-
-impl DataBox for MediaDataBox {
-    fn data(&self) -> &[u8] {
-        &self.data
-    }
-
-    fn start(&self, offset: u64) -> Option<usize> {
-        let start = offset.checked_sub(self.file_offset);
-        if start.is_none() {
-            error!("Overflow subtracting {} + {}", offset, self.file_offset);
-        }
-        u64_to_usize_logged(start?)
-    }
-
-    fn location(&self, extent: &Extent) -> IsobmffItem {
-        IsobmffItem::MdatLocation(extent.clone())
-    }
-}
-
 #[cfg(test)]
 mod media_data_box_tests {
     use super::*;
 
-    impl MediaDataBox {
+    impl DataBox {
         fn at_offset(file_offset: u64, data: std::vec::Vec<u8>) -> Self {
-            MediaDataBox {
-                file_offset,
+            DataBox {
+                metadata: DataBoxMetadata::Mdat { file_offset },
                 data: data.into(),
             }
         }
@@ -1513,7 +1908,7 @@ mod media_data_box_tests {
 
     #[test]
     fn extent_with_length_before_mdat_returns_none() {
-        let mdat = MediaDataBox::at_offset(100, vec![1; 5]);
+        let mdat = DataBox::at_offset(100, vec![1; 5]);
         let extent = Extent::WithLength { offset: 0, len: 2 };
 
         assert!(mdat.get(&extent).is_none());
@@ -1521,7 +1916,7 @@ mod media_data_box_tests {
 
     #[test]
     fn extent_to_end_before_mdat_returns_none() {
-        let mdat = MediaDataBox::at_offset(100, vec![1; 5]);
+        let mdat = DataBox::at_offset(100, vec![1; 5]);
         let extent = Extent::ToEnd { offset: 0 };
 
         assert!(mdat.get(&extent).is_none());
@@ -1529,7 +1924,7 @@ mod media_data_box_tests {
 
     #[test]
     fn extent_with_length_crossing_front_mdat_boundary_returns_none() {
-        let mdat = MediaDataBox::at_offset(100, vec![1; 5]);
+        let mdat = DataBox::at_offset(100, vec![1; 5]);
         let extent = Extent::WithLength { offset: 99, len: 3 };
 
         assert!(mdat.get(&extent).is_none());
@@ -1537,7 +1932,7 @@ mod media_data_box_tests {
 
     #[test]
     fn extent_with_length_which_is_subset_of_mdat() {
-        let mdat = MediaDataBox::at_offset(100, vec![1; 5]);
+        let mdat = DataBox::at_offset(100, vec![1; 5]);
         let extent = Extent::WithLength {
             offset: 101,
             len: 2,
@@ -1548,7 +1943,7 @@ mod media_data_box_tests {
 
     #[test]
     fn extent_to_end_which_is_subset_of_mdat() {
-        let mdat = MediaDataBox::at_offset(100, vec![1; 5]);
+        let mdat = DataBox::at_offset(100, vec![1; 5]);
         let extent = Extent::ToEnd { offset: 101 };
 
         assert_eq!(mdat.get(&extent), Some(&[1, 1, 1, 1][..]));
@@ -1556,7 +1951,7 @@ mod media_data_box_tests {
 
     #[test]
     fn extent_with_length_which_is_all_of_mdat() {
-        let mdat = MediaDataBox::at_offset(100, vec![1; 5]);
+        let mdat = DataBox::at_offset(100, vec![1; 5]);
         let extent = Extent::WithLength {
             offset: 100,
             len: 5,
@@ -1567,7 +1962,7 @@ mod media_data_box_tests {
 
     #[test]
     fn extent_to_end_which_is_all_of_mdat() {
-        let mdat = MediaDataBox::at_offset(100, vec![1; 5]);
+        let mdat = DataBox::at_offset(100, vec![1; 5]);
         let extent = Extent::ToEnd { offset: 100 };
 
         assert_eq!(mdat.get(&extent), Some(mdat.data.as_slice()));
@@ -1575,7 +1970,7 @@ mod media_data_box_tests {
 
     #[test]
     fn extent_with_length_crossing_back_mdat_boundary_returns_none() {
-        let mdat = MediaDataBox::at_offset(100, vec![1; 5]);
+        let mdat = DataBox::at_offset(100, vec![1; 5]);
         let extent = Extent::WithLength {
             offset: 103,
             len: 3,
@@ -1586,7 +1981,7 @@ mod media_data_box_tests {
 
     #[test]
     fn extent_with_length_after_mdat_returns_none() {
-        let mdat = MediaDataBox::at_offset(100, vec![1; 5]);
+        let mdat = DataBox::at_offset(100, vec![1; 5]);
         let extent = Extent::WithLength {
             offset: 200,
             len: 2,
@@ -1597,7 +1992,7 @@ mod media_data_box_tests {
 
     #[test]
     fn extent_to_end_after_mdat_returns_none() {
-        let mdat = MediaDataBox::at_offset(100, vec![1; 5]);
+        let mdat = DataBox::at_offset(100, vec![1; 5]);
         let extent = Extent::ToEnd { offset: 200 };
 
         assert!(mdat.get(&extent).is_none());
@@ -1605,7 +2000,7 @@ mod media_data_box_tests {
 
     #[test]
     fn extent_with_length_which_overflows_usize() {
-        let mdat = MediaDataBox::at_offset(std::u64::MAX - 1, vec![1; 5]);
+        let mdat = DataBox::at_offset(std::u64::MAX - 1, vec![1; 5]);
         let extent = Extent::WithLength {
             offset: std::u64::MAX,
             len: std::usize::MAX,
@@ -1618,7 +2013,7 @@ mod media_data_box_tests {
     // because the range end is unbounded, we don't calculate it.
     #[test]
     fn extent_to_end_which_overflows_usize() {
-        let mdat = MediaDataBox::at_offset(std::u64::MAX - 1, vec![1; 5]);
+        let mdat = DataBox::at_offset(std::u64::MAX - 1, vec![1; 5]);
         let extent = Extent::ToEnd {
             offset: std::u64::MAX,
         };
@@ -1661,7 +2056,7 @@ struct SingleItemTypeReferenceBox {
 
 /// Potential sizes (in bytes) of variable-sized fields of the 'iloc' box
 /// See ISOBMFF (ISO 14496-12:2020) § 8.11.3
-#[derive(Debug, Clone, Copy, PartialEq)]
+#[derive(Debug, Clone, Copy, PartialEq, Eq)]
 enum IlocFieldSize {
     Zero,
     Four,
@@ -1686,12 +2081,12 @@ impl TryFrom<u8> for IlocFieldSize {
             0 => Ok(Self::Zero),
             4 => Ok(Self::Four),
             8 => Ok(Self::Eight),
-            _ => Err(Error::InvalidData("value must be in the set {0, 4, 8}")),
+            _ => Status::IlocBadFieldSize.into(),
         }
     }
 }
 
-#[derive(Debug, PartialEq)]
+#[derive(Debug, PartialEq, Eq)]
 enum IlocVersion {
     Zero,
     One,
@@ -1728,7 +2123,7 @@ struct ItemLocationBoxItem {
 /// > MIAF image items are constrained as follows:<br />
 /// > — `construction_method` shall be equal to 0 for MIAF image items that are coded image items.<br />
 /// > — `construction_method` shall be equal to 0 or 1 for MIAF image items that are derived image items.
-#[derive(Clone, Copy, Debug, PartialEq)]
+#[derive(Clone, Copy, Debug, PartialEq, Eq)]
 enum ConstructionMethod {
     File = 0,
     Idat = 1,
@@ -1737,7 +2132,7 @@ enum ConstructionMethod {
 
 /// Describes a region where a item specified by an `ItemLocationBoxItem` is stored.
 /// The offset is `u64` since that's the maximum possible size and since the relative
-/// nature of `MediaDataBox` means this can still possibly succeed even in the case
+/// nature of `DataBox` means this can still possibly succeed even in the case
 /// that the raw value exceeds std::usize::MAX on platforms where that type is smaller
 /// than u64. However, `len` is stored as a `usize` since no value larger than
 /// `std::usize::MAX` can be used in a successful indexing operation in rust.
@@ -1749,10 +2144,12 @@ enum Extent {
     ToEnd { offset: u64 },
 }
 
-#[derive(Debug, PartialEq)]
+#[derive(Debug, PartialEq, Eq)]
 pub enum TrackType {
     Audio,
     Video,
+    Picture,
+    AuxiliaryVideo,
     Metadata,
     Unknown,
 }
@@ -1766,25 +2163,21 @@ impl Default for TrackType {
 // This type is used by mp4parse_capi since it needs to be passed from FFI consumers
 // The C-visible struct is renamed via mp4parse_capi/cbindgen.toml to match naming conventions
 #[repr(C)]
-#[derive(Clone, Copy, Debug, PartialEq)]
+#[derive(Clone, Copy, Debug, PartialEq, Eq)]
 pub enum ParseStrictness {
     Permissive, // Error only on ambiguous inputs
     Normal,     // Error on "shall" directives, log warnings for "should"
     Strict,     // Error on "should" directives
 }
 
-/// Prefer [`fail_with_error_if`] so all the explanatory strings can be collected
-/// in `From<Status> for &str`.
-fn fail_if(violation: bool, message: &'static str) -> Result<()> {
-    if violation {
-        Err(Error::InvalidData(message))
-    } else {
-        warn!("{}", message);
-        Ok(())
+impl Default for ParseStrictness {
+    fn default() -> Self {
+        ParseStrictness::Normal
     }
 }
 
-fn fail_with_error_if(violation: bool, error: Error) -> Result<()> {
+fn fail_with_status_if(violation: bool, status: Status) -> Result<()> {
+    let error = Error::from(status);
     if violation {
         Err(error)
     } else {
@@ -1793,7 +2186,7 @@ fn fail_with_error_if(violation: bool, error: Error) -> Result<()> {
     }
 }
 
-#[derive(Debug, Clone, Copy, PartialEq)]
+#[derive(Debug, Clone, Copy, PartialEq, Eq)]
 pub enum CodecType {
     Unknown,
     MP3,
@@ -1823,21 +2216,21 @@ impl Default for CodecType {
 }
 
 /// The media's global (mvhd) timescale in units per second.
-#[derive(Debug, Copy, Clone, PartialEq)]
+#[derive(Debug, Copy, Clone, PartialEq, Eq)]
 pub struct MediaTimeScale(pub u64);
 
 /// A time to be scaled by the media's global (mvhd) timescale.
-#[derive(Debug, Copy, Clone, PartialEq)]
+#[derive(Debug, Copy, Clone, PartialEq, Eq)]
 pub struct MediaScaledTime(pub u64);
 
 /// The track's local (mdhd) timescale.
 /// Members are timescale units per second and the track id.
-#[derive(Debug, Copy, Clone, PartialEq)]
+#[derive(Debug, Copy, Clone, PartialEq, Eq)]
 pub struct TrackTimeScale<T: Num>(pub T, pub usize);
 
 /// A time to be scaled by the track's local (mdhd) timescale.
 /// Members are time in scale units and the track id.
-#[derive(Debug, Copy, Clone, PartialEq)]
+#[derive(Debug, Copy, Clone, PartialEq, Eq)]
 pub struct TrackScaledTime<T>(pub T, pub usize);
 
 impl<T> std::ops::Add for TrackScaledTime<T>
@@ -1868,6 +2261,7 @@ pub struct Track {
     pub stco: Option<ChunkOffsetBox>, // It is for stco or co64.
     pub stss: Option<SyncSampleBox>,
     pub ctts: Option<CompositionOffsetBox>,
+    pub tref: Option<TrackReferenceBox>,
 }
 
 impl Track {
@@ -1965,17 +2359,18 @@ fn read_box_header<T: ReadBytesExt>(src: &mut T) -> Result<BoxHeader> {
         1 => {
             let size64 = be_u64(src)?;
             if size64 < BoxHeader::MIN_LARGE_SIZE {
-                return Err(Error::InvalidData("malformed wide size"));
+                return Status::BoxBadWideSize.into();
             }
             size64
         }
         _ => {
             if u64::from(size32) < BoxHeader::MIN_SIZE {
-                return Err(Error::InvalidData("malformed size"));
+                return Status::BoxBadSize.into();
             }
             u64::from(size32)
         }
     };
+    trace!("read_box_header: name: {:?}, size: {}", name, size);
     let mut offset = match size32 {
         1 => BoxHeader::MIN_LARGE_SIZE,
         _ => BoxHeader::MIN_SIZE,
@@ -2081,8 +2476,6 @@ impl AvifImageType {
 
 /// Read the contents of an AVIF file
 pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<AvifContext> {
-    let _ = env_logger::try_init();
-
     debug!("read_avif(strictness: {:?})", strictness);
 
     let mut f = OffsetReader::new(f);
@@ -2115,21 +2508,16 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
             debug!("expected_image_type: {:?}", expected_image_type);
 
             if primary_image_expected && !has_mif1_brand {
-                // This mandatory inclusion of this brand is in the process of being changed
-                // to optional. In anticipation of that, only give an error in strict mode
-                // See https://github.com/MPEGGroup/MIAF/issues/5
-                // and https://github.com/MPEGGroup/FileFormat/issues/23
-                fail_if(
+                fail_with_status_if(
                     strictness == ParseStrictness::Strict,
-                    "The FileTypeBox should contain 'mif1' in the compatible_brands list \
-                     per MIAF (ISO 23000-22:2019) § 7.2.1.2",
+                    Status::MissingMif1Brand,
                 )?;
             }
 
             if !has_avif_brand && !has_avis_brand {
-                fail_with_error_if(
+                fail_with_status_if(
                     strictness != ParseStrictness::Permissive,
-                    Status::MissingBrand.into(),
+                    Status::MissingAvifOrAvisBrand,
                 )?;
             }
 
@@ -2141,10 +2529,6 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
         return Status::FtypNotFirst.into();
     };
 
-    if major_brand == AVIS_BRAND {
-        unsupported_features.insert(Feature::Avis);
-    }
-
     let mut meta = None;
     let mut image_sequence = None;
     let mut media_storage = TryVec::new();
@@ -2154,9 +2538,7 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
         match b.head.name {
             BoxType::MetadataBox => {
                 if meta.is_some() {
-                    return Err(Error::InvalidData(
-                        "There should be zero or one meta boxes per ISOBMFF (ISO 14496-12:2020) § 8.11.1.1",
-                    ));
+                    return Status::MetaBadQuantity.into();
                 }
                 meta = Some(read_avif_meta(
                     &mut b,
@@ -2166,16 +2548,14 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
             }
             BoxType::MovieBox if expected_image_type.has_sequence() => {
                 if image_sequence.is_some() {
-                    return Status::MultipleMoov.into();
+                    return Status::MoovBadQuantity.into();
                 }
                 image_sequence = Some(read_moov(&mut b, None)?);
             }
             BoxType::MediaDataBox => {
-                if b.bytes_left() > 0 {
-                    let file_offset = b.offset();
-                    let data = b.read_into_try_vec()?;
-                    media_storage.push(MediaDataBox { file_offset, data })?;
-                }
+                let file_offset = b.offset();
+                let data = b.read_into_try_vec()?;
+                media_storage.push(DataBox::from_mdat(file_offset, data))?;
             }
             _ => skip_box_content(&mut b)?,
         }
@@ -2190,7 +2570,7 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
         item_infos,
         iloc_items,
         item_data_box,
-    } = meta.ok_or(Error::InvalidData("missing meta"))?;
+    } = meta.ok_or_else(|| Error::from(Status::MetaBadQuantity))?;
 
     let (alpha_item_id, premultiplied_alpha) = if let Some(primary_item_id) = primary_item_id {
         let mut alpha_item_ids = item_references
@@ -2206,7 +2586,7 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
             .filter(|&item_id| item_properties.is_alpha(item_id));
         let alpha_item_id = alpha_item_ids.next();
         if alpha_item_ids.next().is_some() {
-            return Err(Error::InvalidData("multiple alpha planes"));
+            return Status::MultipleAlpha.into();
         }
 
         let premultiplied_alpha = alpha_item_id.map_or(false, |alpha_item_id| {
@@ -2254,7 +2634,7 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
 
         // Generalize the process of connecting items to their data; returns
         // true if the extent is successfully added to the AvifItem
-        let mut find_and_add_to_item = |extent: &Extent, dat: &dyn DataBox| -> Result<bool> {
+        let mut find_and_add_to_item = |extent: &Extent, dat: &DataBox| -> Result<bool> {
             if let Some(extent_slice) = dat.get(extent) {
                 match item {
                     None => {
@@ -2294,7 +2674,7 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
                     }
 
                     if !found {
-                        return Status::ItemLocNotFound.into();
+                        return Status::IlocNotFound.into();
                     }
                 }
             }
@@ -2303,17 +2683,17 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
                     for extent in loc.extents {
                         let found = find_and_add_to_item(&extent, idat)?;
                         if !found {
-                            return Status::ItemLocNotFound.into();
+                            return Status::IlocNotFound.into();
                         }
                     }
                 } else {
-                    return Status::NoItemDataBox.into();
+                    return Status::IdatMissing.into();
                 }
             }
             ConstructionMethod::Item => {
-                fail_with_error_if(
+                fail_with_status_if(
                     strictness != ParseStrictness::Permissive,
-                    Status::ConstructionMethod.into(),
+                    Status::ConstructionMethod,
                 )?;
             }
         }
@@ -2325,18 +2705,18 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
     assert!(alpha_item.is_none() || alpha_item_id.is_some());
 
     if expected_image_type.has_primary() && primary_item_id.is_none() {
-        fail_with_error_if(
+        fail_with_status_if(
             strictness != ParseStrictness::Permissive,
-            Status::NoPrimaryItem.into(),
+            Status::PitmMissing,
         )?;
     }
 
     // Lacking a brand that requires them, it's fine for moov boxes to exist in
     // BMFF files; they're simply ignored
     if expected_image_type.has_sequence() && image_sequence.is_none() {
-        fail_with_error_if(
+        fail_with_status_if(
             strictness != ParseStrictness::Permissive,
-            Status::NoMoov.into(),
+            Status::MoovMissing,
         )?;
     }
 
@@ -2349,15 +2729,6 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
         })
     };
 
-    // TODO: add ispe check for alpha https://github.com/mozilla/mp4parse-rust/issues/353
-    if missing_property_for(primary_item_id, BoxType::ImageSpatialExtentsProperty) {
-        fail_if(
-            strictness != ParseStrictness::Permissive,
-            "Missing 'ispe' property for primary item, required \
-             per HEIF (ISO/IEC 23008-12:2017) § 6.5.3.1",
-        )?;
-    }
-
     // Generalize the property checks so we can apply them to primary and alpha items
     let mut check_image_item = |item: &mut Option<AvifItem>| -> Result<()> {
         let item_id = item.as_ref().map(|item| item.id);
@@ -2371,11 +2742,9 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
         match item_type.map(u32::to_be_bytes).as_ref() {
             Some(b"av01") => {
                 if missing_property_for(item_id, BoxType::AV1CodecConfigurationBox) {
-                    fail_if(
+                    fail_with_status_if(
                         strictness != ParseStrictness::Permissive,
-                        "One AV1 Item Configuration Property (av1C) is mandatory for an \
-                         image item of type 'av01' \
-                         per AVIF specification § 2.2.1",
+                        Status::Av1cMissing,
                     )?;
                 }
 
@@ -2384,15 +2753,20 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
                     // to allowing its omission to imply a default value. In anticipation
                     // of that, only give an error in strict mode
                     // See https://github.com/MPEGGroup/MIAF/issues/9
-                    fail_if(
+                    fail_with_status_if(
                         if cfg!(feature = "missing-pixi-permitted") {
                             strictness == ParseStrictness::Strict
                         } else {
                             strictness != ParseStrictness::Permissive
                         },
-                        "The pixel information property shall be associated with every image \
-                         that is displayable (not hidden) \
-                         per MIAF (ISO/IEC 23000-22:2019) specification § 7.3.6.6",
+                        Status::PixiMissing,
+                    )?;
+                }
+
+                if missing_property_for(item_id, BoxType::ImageSpatialExtentsProperty) {
+                    fail_with_status_if(
+                        strictness != ParseStrictness::Permissive,
+                        Status::IspeMissing,
                     )?;
                 }
             }
@@ -2425,12 +2799,13 @@ pub fn read_avif<T: Read>(f: &mut T, strictness: ParseStrictness) -> Result<Avif
     Ok(AvifContext {
         strictness,
         media_storage,
+        item_data_box,
         primary_item,
         alpha_item,
         premultiplied_alpha,
         item_properties,
         major_brand,
-        has_sequence: image_sequence.is_some(),
+        sequence: image_sequence,
         unsupported_features,
     })
 }
@@ -2463,63 +2838,53 @@ fn read_avif_meta<T: Read + Offset>(
         trace!("read_avif_meta parsing {:?} box", b.head.name);
 
         if !read_handler_box && b.head.name != BoxType::HandlerBox {
-            fail_if(
+            fail_with_status_if(
                 strictness != ParseStrictness::Permissive,
-                "The HandlerBox shall be the first contained box within the MetaBox \
-                 per MIAF (ISO 23000-22:2019) § 7.2.1.5",
+                Status::HdlrNotFirst,
             )?;
         }
 
         match b.head.name {
             BoxType::HandlerBox => {
                 if read_handler_box {
-                    return Err(Error::InvalidData(
-                        "There shall be exactly one hdlr box per ISOBMFF (ISO 14496-12:2020) § 8.4.3.1",
-                    ));
+                    return Status::HdrlBadQuantity.into();
                 }
                 let HandlerBox { handler_type } = read_hdlr(&mut b, strictness)?;
                 if handler_type != b"pict" {
-                    fail_if(
+                    fail_with_status_if(
                         strictness != ParseStrictness::Permissive,
-                        "The HandlerBox handler_type must be 'pict' \
-                         per MIAF (ISO 23000-22:2019) § 7.2.1.5",
+                        Status::HdlrTypeNotPict,
                     )?;
                 }
                 read_handler_box = true;
             }
             BoxType::ItemInfoBox => {
                 if item_infos.is_some() {
-                    return Err(Error::InvalidData(
-                        "There shall be zero or one iinf boxes per ISOBMFF (ISO 14496-12:2020) § 8.11.6.1",
-                    ));
+                    return Status::IinfBadQuantity.into();
                 }
                 item_infos = Some(read_iinf(&mut b, strictness, unsupported_features)?);
             }
             BoxType::ItemLocationBox => {
                 if iloc_items.is_some() {
-                    return Err(Error::InvalidData(
-                        "There shall be zero or one iloc boxes per ISOBMFF (ISO 14496-12:2020) § 8.11.3.1",
-                    ));
+                    return Status::IlocBadQuantity.into();
                 }
                 iloc_items = Some(read_iloc(&mut b)?);
             }
             BoxType::PrimaryItemBox => {
                 if primary_item_id.is_some() {
-                    return Err(Error::InvalidData(
-                        "There shall be zero or one pitm boxes per ISOBMFF (ISO 14496-12:2020) § 8.11.4.1",
-                    ));
+                    return Status::PitmBadQuantity.into();
                 }
                 primary_item_id = Some(read_pitm(&mut b)?);
             }
             BoxType::ItemReferenceBox => {
                 if item_references.is_some() {
-                    return Err(Error::InvalidData("There shall be zero or one iref boxes per ISOBMFF (ISO 14496-12:2020) § 8.11.12.1"));
+                    return Status::IrefBadQuantity.into();
                 }
                 item_references = Some(read_iref(&mut b)?);
             }
             BoxType::ItemPropertiesBox => {
                 if item_properties.is_some() {
-                    return Err(Error::InvalidData("There shall be zero or one iprp boxes per ISOBMFF (ISO 14496-12:2020) § 8.11.14.1"));
+                    return Status::IprpBadQuantity.into();
                 }
                 item_properties = Some(read_iprp(
                     &mut b,
@@ -2530,13 +2895,10 @@ fn read_avif_meta<T: Read + Offset>(
             }
             BoxType::ItemDataBox => {
                 if item_data_box.is_some() {
-                    return Err(Error::InvalidData(
-                        "There shall be zero or one idat boxes per ISOBMFF (ISO 14496-12:2020) § 8.11.11",
-                    ));
+                    return Status::IdatBadQuantity.into();
                 }
-                item_data_box = Some(ItemDataBox {
-                    data: b.read_into_try_vec()?,
-                });
+                let data = b.read_into_try_vec()?;
+                item_data_box = Some(DataBox::from_idat(data));
             }
             _ => skip_box_content(&mut b)?,
         }
@@ -2549,7 +2911,7 @@ fn read_avif_meta<T: Read + Offset>(
         item_references: item_references.unwrap_or_default(),
         primary_item_id,
         item_infos: item_infos.unwrap_or_default(),
-        iloc_items: iloc_items.ok_or(Error::InvalidData("iloc missing"))?,
+        iloc_items: iloc_items.ok_or_else(|| Error::from(Status::IlocMissing))?,
         item_data_box,
     })
 }
@@ -2592,9 +2954,7 @@ fn read_iinf<T: Read>(
     let mut iter = src.box_iter();
     while let Some(mut b) = iter.next_box()? {
         if b.head.name != BoxType::ItemInfoEntry {
-            return Err(Error::InvalidData(
-                "iinf box shall contain only infe boxes per ISOBMFF (ISO 14496-12:2020) § 8.11.6.2",
-            ));
+            return Status::IinfBadChild.into();
         }
 
         if let Some(infe) = read_infe(&mut b, strictness, unsupported_features)? {
@@ -2633,10 +2993,9 @@ fn read_infe<T: Read>(
     // least one sample AVIF image has a nonzero value.
     // See https://github.com/AOMediaCodec/av1-avif/issues/146
     if flags != 0 {
-        fail_if(
+        fail_with_status_if(
             strictness == ParseStrictness::Strict,
-            "'infe' flags field shall be 0 \
-             per ISOBMFF (ISO 14496-12:2020) § 8.11.6.2",
+            Status::InfeFlagsNonzero,
         )?;
     }
 
@@ -2681,9 +3040,7 @@ fn read_iref<T: Read>(src: &mut BMFFBox<T>) -> Result<TryVec<SingleItemTypeRefer
         for _ in 0..reference_count {
             let to_item_id = ItemId::read(&mut b, version)?;
             if from_item_id == to_item_id {
-                return Err(Error::InvalidData(
-                    "from_item_id and to_item_id must be different",
-                ));
+                return Status::IrefRecursion.into();
             }
             item_references.push(SingleItemTypeReferenceBox {
                 item_type: b.head.name.into(),
@@ -2701,7 +3058,7 @@ fn read_iref<T: Read>(src: &mut BMFFBox<T>) -> Result<TryVec<SingleItemTypeRefer
 
 /// Parse an Item Properties Box
 ///
-/// See ISOBMFF (ISO 14496-12:2020 § 8.11.14)
+/// See ISOBMFF (ISO 14496-12:2020) § 8.11.14)
 ///
 /// Note: HEIF (ISO 23008-12:2017) § 9.3.1 also defines the `iprp` box and
 /// related types, but lacks additional requirements specified in 14496-12:2020.
@@ -2722,7 +3079,7 @@ fn read_iprp<T: Read>(
         Some(mut b) if b.head.name == BoxType::ItemPropertyContainerBox => {
             read_ipco(&mut b, strictness)
         }
-        Some(_) => Err(Error::InvalidData("unexpected iprp child")),
+        Some(_) => Status::IprpBadChild.into(),
         None => Err(Error::UnexpectedEOF),
     }?;
 
@@ -2732,24 +3089,20 @@ fn read_iprp<T: Read>(
 
     while let Some(mut b) = iter.next_box()? {
         if b.head.name != BoxType::ItemPropertyAssociationBox {
-            return Err(Error::InvalidData("unexpected iprp child"));
+            return Status::IprpBadChild.into();
         }
 
         let (version, flags) = read_fullbox_extra(&mut b)?;
         if ipma_version_and_flag_values_seen.contains(&(version, flags)) {
-            fail_if(
+            fail_with_status_if(
                 strictness != ParseStrictness::Permissive,
-                "There shall be at most one ItemPropertyAssociationbox with a given pair of \
-                 values of version and flags \
-                 per ISOBMFF (ISO 14496-12:2020 § 8.11.14.1",
+                Status::IpmaBadQuantity,
             )?;
         }
         if flags != 0 && properties.len() <= 127 {
-            fail_if(
+            fail_with_status_if(
                 strictness == ParseStrictness::Strict,
-                "Unless there are more than 127 properties in the ItemPropertyContainerBox, \
-                 flags should be equal to 0 \
-                 per ISOBMFF (ISO 14496-12:2020 § 8.11.14.1",
+                Status::IpmaFlagsNonzero,
             )?;
         }
         ipma_version_and_flag_values_seen.push((version, flags))?;
@@ -2772,19 +3125,11 @@ fn read_iprp<T: Read>(
                 // It's technically possible to make sense of this situation by merging ipma
                 // boxes, but this is a "shall" requirement, so we'd only do it in
                 // ParseStrictness::Permissive mode, and this hasn't shown up in the wild
-                return Err(Error::InvalidData(
-                    "There shall be at most one occurrence of a given item_ID, \
-                     in the set of ItemPropertyAssociationBox boxes \
-                     per ISOBMFF (ISO 14496-12:2020) § 8.11.14.1",
-                ));
+                return Status::IpmaDuplicateItemId.into();
             }
 
-            const TRANSFORM_ORDER_ERROR: &str =
-                "These properties, if used, shall be indicated to be applied \
-                 in the following order: clean aperture first, then rotation, \
-                 then mirror. \
-                 per MIAF (ISO/IEC 23000-22:2019) § 7.3.6.7";
             const TRANSFORM_ORDER: &[BoxType] = &[
+                BoxType::ImageSpatialExtentsProperty,
                 BoxType::CleanApertureBox,
                 BoxType::ImageRotation,
                 BoxType::ImageMirror,
@@ -2797,10 +3142,9 @@ fn read_iprp<T: Read>(
             for a in &association_entry.associations {
                 if a.property_index == PropertyIndex(0) {
                     if a.essential {
-                        fail_if(
+                        fail_with_status_if(
                             strictness != ParseStrictness::Permissive,
-                            "the essential indicator shall be 0 for property index 0 \
-                             per ISOBMFF (ISO 14496-12:2020 § 8.11.14.3",
+                            Status::IpmaIndexZeroNoEssential,
                         )?;
                     }
                     continue;
@@ -2850,9 +3194,9 @@ fn read_iprp<T: Read>(
                                 // This is a "shall", but it is likely to change, so only
                                 // fail if using strict parsing.
                                 // See https://github.com/mozilla/mp4parse-rust/issues/284
-                                fail_with_error_if(
+                                fail_with_status_if(
                                     strictness == ParseStrictness::Strict,
-                                    Status::TxformNoEssential.into(),
+                                    Status::TxformNoEssential,
                                 )?;
                             }
                         }
@@ -2869,11 +3213,9 @@ fn read_iprp<T: Read>(
                                     a.property_index,
                                     prev_colr_index
                                 );
-                                fail_if(
+                                fail_with_status_if(
                                     strictness != ParseStrictness::Permissive,
-                                    "Each item shall have at most one property association with a
-                                     ColourInformationBox (colr) for a given value of colour_type \
-                                     per HEIF (ISO/IEC DIS 23008-12) § 6.5.5.1",
+                                    Status::ColrBadQuantity,
                                 )?;
                             } else {
                                 colour_type_indexes.insert(colour_type, a.property_index)?;
@@ -2885,9 +3227,9 @@ fn read_iprp<T: Read>(
                         ItemProperty::LayeredImageIndexing => {
                             assert!(feature.is_ok() && unsupported_features.contains(feature?));
                             if a.essential {
-                                fail_with_error_if(
+                                fail_with_status_if(
                                     strictness != ParseStrictness::Permissive,
-                                    Status::A1lxEssential.into(),
+                                    Status::A1lxEssential,
                                 )?;
                             }
                         }
@@ -2900,9 +3242,9 @@ fn read_iprp<T: Read>(
                                         || strictness == ParseStrictness::Permissive
                                 );
                             } else {
-                                fail_with_error_if(
+                                fail_with_status_if(
                                     strictness != ParseStrictness::Permissive,
-                                    Status::LselNoEssential.into(),
+                                    Status::LselNoEssential,
                                 )?;
                             }
                         }
@@ -2915,9 +3257,9 @@ fn read_iprp<T: Read>(
                                         || strictness == ParseStrictness::Permissive
                                 );
                             } else {
-                                fail_with_error_if(
+                                fail_with_status_if(
                                     strictness != ParseStrictness::Permissive,
-                                    Status::A1opNoEssential.into(),
+                                    Status::A1opNoEssential,
                                 )?;
                             }
                         }
@@ -2934,10 +3276,19 @@ fn read_iprp<T: Read>(
                         if let Some(prev) = prev_transform_index {
                             if prev >= transform_index {
                                 error!(
-                                    "{:?} after {:?}",
+                                    "Invalid property order: {:?} after {:?}",
                                     TRANSFORM_ORDER[transform_index], TRANSFORM_ORDER[prev]
                                 );
-                                return Err(Error::InvalidData(TRANSFORM_ORDER_ERROR));
+                                fail_with_status_if(
+                                    strictness != ParseStrictness::Permissive,
+                                    if TRANSFORM_ORDER[transform_index]
+                                        == BoxType::ImageSpatialExtentsProperty
+                                    {
+                                        Status::TxformBeforeIspe
+                                    } else {
+                                        Status::TxformOrder
+                                    },
+                                )?;
                             }
                         }
                         prev_transform_index = Some(transform_index);
@@ -2947,9 +3298,9 @@ fn read_iprp<T: Read>(
                         "Missing property at {:?} for {:?}",
                         a.property_index, association_entry.item_id
                     );
-                    fail_if(
+                    fail_with_status_if(
                         strictness != ParseStrictness::Permissive,
-                        "Invalid property index in ipma",
+                        Status::IpmaBadIndex,
                     )?;
                 }
             }
@@ -2968,7 +3319,7 @@ fn read_iprp<T: Read>(
     Ok(iprp)
 }
 
-/// See ISOBMFF (ISO 14496-12:2020 § 8.11.14.1
+/// See ISOBMFF (ISO 14496-12:2020) § 8.11.14.1
 /// Variants with no associated data are recognized but not necessarily supported.
 /// See [`Feature`] to determine support.
 #[derive(Debug)]
@@ -3016,14 +3367,14 @@ struct ItemPropertyAssociationEntry {
 }
 
 /// For storing ItemPropertyAssociation data
-/// See ISOBMFF (ISO 14496-12:2020 § 8.11.14.1
+/// See ISOBMFF (ISO 14496-12:2020) § 8.11.14.1
 #[derive(Debug)]
 struct Association {
     essential: bool,
     property_index: PropertyIndex,
 }
 
-/// See ISOBMFF (ISO 14496-12:2020 § 8.11.14.1
+/// See ISOBMFF (ISO 14496-12:2020) § 8.11.14.1
 ///
 /// The properties themselves are stored in `properties`, but the items they're
 /// associated with are stored in `association_entries`. It's necessary to
@@ -3077,7 +3428,7 @@ impl ItemPropertiesBox {
                     property_type, multiple_values
                 );
                 // TODO: add test
-                Err(Error::InvalidData("conflicting item property values"))
+                Status::IprpConflict.into()
             }
         }
     }
@@ -3158,7 +3509,7 @@ macro_rules! impl_bounded_product {
 }
 
 mod bounded_uints {
-    use UpperBounded;
+    use crate::UpperBounded;
 
     impl_bounded!(U8, u8);
     impl_bounded!(U16, u16);
@@ -3173,7 +3524,7 @@ mod bounded_uints {
     }
 }
 
-use bounded_uints::*;
+use crate::bounded_uints::*;
 
 /// Implement the multiplication operator for $lhs * $rhs giving $output, which
 /// is internally represented as $inner. The operation is statically checked
@@ -3184,8 +3535,13 @@ macro_rules! impl_mul {
             type Output = $output;
 
             fn mul(self, rhs: $rhs) -> Self::Output {
-                static_assertions::const_assert!(<$output>::MAX <= <$inner>::MAX as u64);
-                static_assertions::const_assert!(<$lhs>::MAX * <$rhs>::MAX <= <$output>::MAX);
+                static_assertions::const_assert!(
+                    <$output as UpperBounded>::MAX <= <$inner>::MAX as u64
+                );
+                static_assertions::const_assert!(
+                    <$lhs as UpperBounded>::MAX * <$rhs as UpperBounded>::MAX
+                        <= <$output as UpperBounded>::MAX
+                );
 
                 let lhs: $inner = self.get().into();
                 let rhs: $inner = rhs.get().into();
@@ -3219,7 +3575,7 @@ const MAX_IPMA_ASSOCIATION_COUNT: U8 = U8::new(u8::MAX);
 /// types implementing the UpperBounded trait. Types are declared explicitly to
 /// show there isn't any accidental inference to primitive types.
 ///
-/// See ISOBMFF (ISO 14496-12:2020 § 8.11.14.1
+/// See ISOBMFF (ISO 14496-12:2020) § 8.11.14.1
 fn calculate_ipma_total_associations(
     version: u8,
     bytes_left: u64,
@@ -3236,9 +3592,7 @@ fn calculate_ipma_total_associations(
             // All the storage for the `essential` and `property_index` parts (assuming a valid ipma box size)
             difference
         } else {
-            return Err(Error::InvalidData(
-                "ipma box below minimum size for entry_count",
-            ));
+            return Status::IpmaTooSmall.into();
         };
 
     let max_association_bytes_per_entry: U16 = MAX_IPMA_ASSOCIATION_COUNT * num_association_bytes;
@@ -3246,9 +3600,7 @@ fn calculate_ipma_total_associations(
     let max_bytes_left: U64 = total_non_association_bytes + max_total_association_bytes;
 
     if bytes_left > max_bytes_left.get() {
-        return Err(Error::InvalidData(
-            "ipma box exceeds maximum size for entry_count",
-        ));
+        return Status::IpmaTooBig.into();
     }
 
     let total_associations: u64 = total_association_bytes / u64::from(num_association_bytes.get());
@@ -3258,7 +3610,7 @@ fn calculate_ipma_total_associations(
 
 /// Parse an ItemPropertyAssociation box
 ///
-/// See ISOBMFF (ISO 14496-12:2020 § 8.11.14.1
+/// See ISOBMFF (ISO 14496-12:2020) § 8.11.14.1
 fn read_ipma<T: Read>(
     src: &mut BMFFBox<T>,
     strictness: ParseStrictness,
@@ -3290,11 +3642,9 @@ fn read_ipma<T: Read>(
         if let Some(previous_association) = entries.last() {
             #[allow(clippy::comparison_chain)]
             if previous_association.item_id > item_id {
-                return Err(Error::InvalidData(
-                    "Each ItemPropertyAssociation box shall be ordered by increasing item_ID",
-                ));
+                return Status::IpmaBadItemOrder.into();
             } else if previous_association.item_id == item_id {
-                return Err(Error::InvalidData("There shall be at most one association box for each item_ID, in any ItemPropertyAssociation box"));
+                return Status::IpmaDuplicateItemId.into();
             }
         }
 
@@ -3329,10 +3679,9 @@ fn read_ipma<T: Read>(
         }) = entries.last()
         {
             if *max_item_id <= ItemId(u16::MAX.into()) {
-                fail_if(
+                fail_with_status_if(
                     strictness == ParseStrictness::Strict,
-                    "The ipma version 0 should be used unless 32-bit item_ID values are needed \
-                     per ISOBMFF (ISO 14496-12:2020 § 8.11.14.1",
+                    Status::IpmaBadVersion,
                 )?;
             }
         }
@@ -3345,7 +3694,7 @@ fn read_ipma<T: Read>(
 
 /// Parse an ItemPropertyContainerBox
 ///
-/// See ISOBMFF (ISO 14496-12:2020 § 8.11.14.1
+/// See ISOBMFF (ISO 14496-12:2020) § 8.11.14.1
 fn read_ipco<T: Read>(
     src: &mut BMFFBox<T>,
     strictness: ParseStrictness,
@@ -3391,7 +3740,7 @@ fn read_ipco<T: Read>(
             index
                 .0
                 .checked_add(1) // must include ignored properties to have correct indexes
-                .ok_or(Error::InvalidData("ipco index overflow"))?,
+                .ok_or_else(|| Error::from(Status::IpcoIndexOverflow))?,
         );
 
         check_parser_state!(b.content);
@@ -3401,7 +3750,7 @@ fn read_ipco<T: Read>(
 }
 
 #[repr(C)]
-#[derive(Clone, Copy, Debug, PartialEq)]
+#[derive(Clone, Copy, Debug, PartialEq, Eq)]
 pub struct ImageSpatialExtentsProperty {
     image_width: u32,
     image_height: u32,
@@ -3463,7 +3812,7 @@ fn read_pixi<T: Read>(src: &mut BMFFBox<T>) -> Result<PixelInformation> {
     let num_channels_read = src.try_read_to_end(&mut bits_per_channel)?;
 
     if u8::try_from(num_channels_read)? != num_channels {
-        return Err(Error::InvalidData("invalid num_channels"));
+        return Status::PixiBadChannelCount.into();
     }
 
     check_parser_state!(src.content);
@@ -3539,14 +3888,12 @@ fn read_colr<T: Read>(
                     NUM_RESERVED_BITS,
                     bit_reader.remaining()
                 );
-                return Err(Error::InvalidData("Unexpected size for colr box"));
+                return Status::ColrBadSize.into();
             }
             if bit_reader.read_u8(NUM_RESERVED_BITS)? != 0 {
-                fail_if(
+                fail_with_status_if(
                     strictness != ParseStrictness::Permissive,
-                    "The 7 reserved bits at the end of the ColourInformationBox \
-                     for colour_type == 'nclx' must be 0 \
-                     per ISOBMFF (ISO 14496-12:2020) § 12.1.5.2",
+                    Status::ColrReservedNonzero,
                 )?;
             }
 
@@ -3565,9 +3912,7 @@ fn read_colr<T: Read>(
         )),
         _ => {
             error!("read_colr colour_type: {:?}", colour_type);
-            Err(Error::InvalidData(
-                "Unsupported colour_type for ColourInformationBox",
-            ))
+            Status::ColrBadType.into()
         }
     }
 }
@@ -3676,7 +4021,7 @@ fn read_auxc<T: Read>(src: &mut BMFFBox<T>) -> Result<AuxiliaryTypeProperty> {
     if let Some(nul_byte_pos) = aux.iter().position(|&b| b == b'\0') {
         let (a, b) = aux.as_slice().split_at(nul_byte_pos);
         aux_type = a.try_into()?;
-        aux_subtype = (&b[1..]).try_into()?;
+        aux_subtype = (b[1..]).try_into()?;
     } else {
         aux_type = aux;
         aux_subtype = TryVec::new();
@@ -3734,7 +4079,7 @@ fn read_iloc<T: Read>(src: &mut BMFFBox<T>) -> Result<TryHashMap<ItemId, ItemLoc
                     0 => ConstructionMethod::File,
                     1 => ConstructionMethod::Idat,
                     2 => ConstructionMethod::Item,
-                    _ => return Err(Error::InvalidData("construction_method is taken from the set 0, 1 or 2 per ISOBMFF (ISO 14496-12:2020) § 8.11.3.3"))
+                    _ => return Status::IlocBadConstructionMethod.into(),
                 }
             }
         };
@@ -3749,9 +4094,7 @@ fn read_iloc<T: Read>(src: &mut BMFFBox<T>) -> Result<TryHashMap<ItemId, ItemLoc
         let extent_count = iloc.read_u16(16)?;
 
         if extent_count < 1 {
-            return Err(Error::InvalidData(
-                "extent_count must have a value 1 or greater per ISOBMFF (ISO 14496-12:2020) § 8.11.3.3",
-            ));
+            return Status::IlocBadExtentCount.into();
         }
 
         // "If only one extent is used (extent_count = 1) then either or both of the
@@ -3759,9 +4102,7 @@ fn read_iloc<T: Read>(src: &mut BMFFBox<T>) -> Result<TryHashMap<ItemId, ItemLoc
         if extent_count != 1
             && (offset_size == IlocFieldSize::Zero || length_size == IlocFieldSize::Zero)
         {
-            return Err(Error::InvalidData(
-                "extent_count != 1 requires explicit offset and length per ISOBMFF (ISO 14496-12:2020) § 8.11.3.3",
-            ));
+            return Status::IlocBadExtent.into();
         }
 
         let mut extents = TryVec::with_capacity(extent_count.to_usize())?;
@@ -3787,7 +4128,7 @@ fn read_iloc<T: Read>(src: &mut BMFFBox<T>) -> Result<TryHashMap<ItemId, ItemLoc
             //  the source is implied" (ibid)
             let offset = base_offset
                 .checked_add(extent_offset)
-                .ok_or(Error::InvalidData("offset calculation overflow"))?;
+                .ok_or_else(|| Error::from(Status::IlocOffsetOverflow))?;
             let extent = if extent_length == 0 {
                 Extent::ToEnd { offset }
             } else {
@@ -3806,14 +4147,14 @@ fn read_iloc<T: Read>(src: &mut BMFFBox<T>) -> Result<TryHashMap<ItemId, ItemLoc
         };
 
         if items.insert(item_id, loc)?.is_some() {
-            return Err(Error::InvalidData("duplicate item_ID in iloc"));
+            return Status::IlocDuplicateItemId.into();
         }
     }
 
     if iloc.remaining() == 0 {
         Ok(items)
     } else {
-        Err(Error::InvalidData("invalid iloc size"))
+        Status::IlocBadSize.into()
     }
 }
 
@@ -3873,7 +4214,7 @@ pub fn read_mp4<T: Read>(f: &mut T) -> Result<MediaContext> {
     // XXX(kinetik): This isn't perfect, as a "moov" with no contents is
     // treated as okay but we haven't found anything useful.  Needs more
     // thought for clearer behaviour here.
-    context.ok_or(Error::NoMoov)
+    context.ok_or(Error::MoovMissing)
 }
 
 /// Parse a Movie Header Box
@@ -3882,7 +4223,7 @@ fn parse_mvhd<T: Read>(f: &mut BMFFBox<T>) -> Result<Option<MediaTimeScale>> {
     let mvhd = read_mvhd(f)?;
     debug!("{:?}", mvhd);
     if mvhd.timescale == 0 {
-        return Err(Error::InvalidData("zero timescale in mdhd"));
+        return Status::MvhdBadTimescale.into();
     }
     let timescale = Some(MediaTimeScale(u64::from(mvhd.timescale)));
     Ok(timescale)
@@ -3961,9 +4302,15 @@ fn read_pssh<T: Read>(src: &mut BMFFBox<T>) -> Result<ProtectionSystemSpecificHe
 
         let mut kid = TryVec::<ByteData>::new();
         if version > 0 {
-            let count = be_u32(pssh)?;
+            const KID_ELEMENT_SIZE: usize = 16;
+            let count = be_u32(pssh)?.to_usize();
+            kid.reserve(
+                count
+                    .checked_mul(KID_ELEMENT_SIZE)
+                    .ok_or_else(|| Error::from(Status::PsshSizeOverflow))?,
+            )?;
             for _ in 0..count {
-                let item = read_buf(pssh, 16)?;
+                let item = read_buf(pssh, KID_ELEMENT_SIZE.to_u64())?;
                 kid.push(item)?;
             }
         }
@@ -4009,7 +4356,7 @@ fn read_mehd<T: Read>(src: &mut BMFFBox<T>) -> Result<MediaScaledTime> {
     let fragment_duration = match version {
         1 => be_u64(src)?,
         0 => u64::from(be_u32(src)?),
-        _ => return Err(Error::InvalidData("unhandled mehd version")),
+        _ => return Status::MehdBadVersion.into(),
     };
     Ok(MediaScaledTime(fragment_duration))
 }
@@ -4028,6 +4375,7 @@ fn read_trak<T: Read>(f: &mut BMFFBox<T>, track: &mut Track) -> Result<()> {
             }
             BoxType::EditBox => read_edts(&mut b, track)?,
             BoxType::MediaBox => read_mdia(&mut b, track)?,
+            BoxType::TrackReferenceBox => track.tref = Some(read_tref(&mut b)?),
             _ => skip_box_content(&mut b)?,
         };
         check_parser_state!(b.content);
@@ -4091,7 +4439,7 @@ fn parse_mdhd<T: Read>(
         duration => Some(TrackScaledTime::<u64>(duration, track.id)),
     };
     if mdhd.timescale == 0 {
-        return Err(Error::InvalidData("zero timescale in mdhd"));
+        return Status::MdhdBadTimescale.into();
     }
     let timescale = Some(TrackTimeScale::<u64>(u64::from(mdhd.timescale), track.id));
     Ok((mdhd, duration, timescale))
@@ -4112,6 +4460,8 @@ fn read_mdia<T: Read>(f: &mut BMFFBox<T>, track: &mut Track) -> Result<()> {
 
                 match hdlr.handler_type.value.as_ref() {
                     b"vide" => track.track_type = TrackType::Video,
+                    b"pict" => track.track_type = TrackType::Picture,
+                    b"auxv" => track.track_type = TrackType::AuxiliaryVideo,
                     b"soun" => track.track_type = TrackType::Audio,
                     b"meta" => track.track_type = TrackType::Metadata,
                     _ => (),
@@ -4126,6 +4476,32 @@ fn read_mdia<T: Read>(f: &mut BMFFBox<T>, track: &mut Track) -> Result<()> {
     Ok(())
 }
 
+fn read_tref<T: Read>(f: &mut BMFFBox<T>) -> Result<TrackReferenceBox> {
+    // Will likely only see trefs with one auxl
+    let mut references = TryVec::with_capacity(1)?;
+    let mut iter = f.box_iter();
+    while let Some(mut b) = iter.next_box()? {
+        match b.head.name {
+            BoxType::AuxiliaryBox => {
+                references.push(TrackReferenceEntry::Auxiliary(read_tref_auxl(&mut b)?))?
+            }
+            _ => skip_box_content(&mut b)?,
+        };
+        check_parser_state!(b.content);
+    }
+    Ok(TrackReferenceBox { references })
+}
+
+fn read_tref_auxl<T: Read>(f: &mut BMFFBox<T>) -> Result<TrackReference> {
+    let num_track_ids = (f.bytes_left() / std::mem::size_of::<u32>().to_u64()).try_into()?;
+    let mut track_ids = TryVec::with_capacity(num_track_ids)?;
+    for _ in 0..num_track_ids {
+        track_ids.push(be_u32(f)?)?;
+    }
+
+    Ok(TrackReference { track_ids })
+}
+
 fn read_minf<T: Read>(f: &mut BMFFBox<T>, track: &mut Track) -> Result<()> {
     let mut iter = f.box_iter();
     while let Some(mut b) = iter.next_box()? {
@@ -4196,7 +4572,7 @@ fn read_ftyp<T: Read>(src: &mut BMFFBox<T>) -> Result<FileTypeBox> {
     let minor = be_u32(src)?;
     let bytes_left = src.bytes_left();
     if bytes_left % 4 != 0 {
-        return Err(Error::InvalidData("invalid ftyp size"));
+        return Status::FtypBadSize.into();
     }
     // Is a brand_count of zero valid?
     let brand_count = bytes_left / 4;
@@ -4223,7 +4599,7 @@ fn read_mvhd<T: Read>(src: &mut BMFFBox<T>) -> Result<MovieHeaderBox> {
         0 => {
             skip(src, 8)?;
         }
-        _ => return Err(Error::InvalidData("unhandled mvhd version")),
+        _ => return Status::MvhdBadVersion.into(),
     }
     let timescale = be_u32(src)?;
     let duration = match version {
@@ -4236,7 +4612,7 @@ fn read_mvhd<T: Read>(src: &mut BMFFBox<T>) -> Result<MovieHeaderBox> {
                 u64::from(d)
             }
         }
-        _ => return Err(Error::InvalidData("unhandled mvhd version")),
+        _ => unreachable!("Should have returned Status::MvhdBadVersion"),
     };
     // Skip remaining fields.
     skip(src, 80)?;
@@ -4259,14 +4635,14 @@ fn read_tkhd<T: Read>(src: &mut BMFFBox<T>) -> Result<TrackHeaderBox> {
         0 => {
             skip(src, 8)?;
         }
-        _ => return Err(Error::InvalidData("unhandled tkhd version")),
+        _ => return Status::TkhdBadVersion.into(),
     }
     let track_id = be_u32(src)?;
     skip(src, 4)?;
     let duration = match version {
         1 => be_u64(src)?,
         0 => u64::from(be_u32(src)?),
-        _ => return Err(Error::InvalidData("unhandled tkhd version")),
+        _ => unreachable!("Should have returned Status::TkhdBadVersion"),
     };
     // Skip uninteresting fields.
     skip(src, 16)?;
@@ -4311,7 +4687,7 @@ fn read_elst<T: Read>(src: &mut BMFFBox<T>) -> Result<EditListBox> {
                 // 32 bit segment duration and media times.
                 (u64::from(be_u32(src)?), i64::from(be_i32(src)?))
             }
-            _ => return Err(Error::InvalidData("unhandled elst version")),
+            _ => return Status::ElstBadVersion.into(),
         };
         let media_rate_integer = be_i16(src)?;
         let media_rate_fraction = be_i16(src)?;
@@ -4359,7 +4735,7 @@ fn read_mdhd<T: Read>(src: &mut BMFFBox<T>) -> Result<MediaHeaderBox> {
             };
             (timescale, duration)
         }
-        _ => return Err(Error::InvalidData("unhandled mdhd version")),
+        _ => return Status::MdhdBadVersion.into(),
     };
 
     // Skip uninteresting fields.
@@ -4453,7 +4829,7 @@ fn read_ctts<T: Read>(src: &mut BMFFBox<T>) -> Result<CompositionOffsetBox> {
         .checked_mul(8)
         .map_or(true, |bytes| u64::from(bytes) > src.bytes_left())
     {
-        return Err(Error::InvalidData("insufficient data in 'ctts' box"));
+        return Status::CttsBadSize.into();
     }
 
     let mut offsets = TryVec::with_capacity(counts.to_usize())?;
@@ -4468,7 +4844,7 @@ fn read_ctts<T: Read>(src: &mut BMFFBox<T>) -> Result<CompositionOffsetBox> {
                 (count, offset)
             }
             _ => {
-                return Err(Error::InvalidData("unsupported version in 'ctts' box"));
+                return Status::CttsBadVersion.into();
             }
         };
         offsets.push(TimeOffset {
@@ -4652,9 +5028,7 @@ fn read_flac_metadata<T: Read>(src: &mut BMFFBox<T>) -> Result<FLACMetadataBlock
     let block_type = temp & 0x7f;
     let length = be_u24(src)?.into();
     if length > src.bytes_left() {
-        return Err(Error::InvalidData(
-            "FLACMetadataBlock larger than parent box",
-        ));
+        return Status::DflaBadMetadataBlockSize.into();
     }
     let data = read_buf(src, length)?;
     Ok(FLACMetadataBlock { block_type, data })
@@ -4694,7 +5068,7 @@ fn find_descriptor(data: &[u8], esds: &mut ES_Descriptor) -> Result<()> {
         }
 
         if end.to_usize() > remains.len() || u64::from(end) < des.position() {
-            return Err(Error::InvalidData("Invalid descriptor."));
+            return Status::EsdsBadDescriptor.into();
         }
 
         let descriptor = &remains[des.position().try_into()?..end.to_usize()];
@@ -4889,9 +5263,7 @@ fn read_ds_descriptor(data: &[u8], esds: &mut ES_Descriptor) -> Result<()> {
             esds.audio_sample_rate = Some(sample_frequency_value);
             esds.audio_channel_count = Some(channel_counts);
             if !esds.decoder_specific_data.is_empty() {
-                return Err(Error::InvalidData(
-                    "There can be only one DecSpecificInfoTag descriptor",
-                ));
+                return Status::EsdsDecSpecificIntoTagQuantity.into();
             }
             esds.decoder_specific_data.extend_from_slice(data)?;
 
@@ -4995,7 +5367,7 @@ fn read_dfla<T: Read>(src: &mut BMFFBox<T>) -> Result<FLACSpecificBox> {
         return Err(Error::Unsupported("unknown dfLa (FLAC) version"));
     }
     if flags != 0 {
-        return Err(Error::InvalidData("no-zero dfLa (FLAC) flags"));
+        return Status::DflaFlagsNonzero.into();
     }
     let mut blocks = TryVec::new();
     while src.bytes_left() > 0 {
@@ -5005,15 +5377,11 @@ fn read_dfla<T: Read>(src: &mut BMFFBox<T>) -> Result<FLACSpecificBox> {
     // The box must have at least one meta block, and the first block
     // must be the METADATA_BLOCK_STREAMINFO
     if blocks.is_empty() {
-        return Err(Error::InvalidData("FLACSpecificBox missing metadata"));
+        return Status::DflaMissingMetadata.into();
     } else if blocks[0].block_type != 0 {
-        return Err(Error::InvalidData(
-            "FLACSpecificBox must have STREAMINFO metadata first",
-        ));
+        return Status::DflaStreamInfoNotFirst.into();
     } else if blocks[0].data.len() != 34 {
-        return Err(Error::InvalidData(
-            "FLACSpecificBox STREAMINFO block is the wrong size",
-        ));
+        return Status::DflaStreamInfoBadSize.into();
     }
     Ok(FLACSpecificBox { version, blocks })
 }
@@ -5071,7 +5439,7 @@ pub fn serialize_opus_header<W: byteorder::WriteBytesExt + std::io::Write>(
         Err(e) => return Err(Error::from(e)),
         Ok(bytes) => {
             if bytes != 8 {
-                return Err(Error::InvalidData("Couldn't write OpusHead tag."));
+                return Status::DopsOpusHeadWriteErr.into();
             }
         }
     }
@@ -5094,9 +5462,7 @@ pub fn serialize_opus_header<W: byteorder::WriteBytesExt + std::io::Write>(
                 Err(e) => return Err(Error::from(e)),
                 Ok(bytes) => {
                     if bytes != table.channel_mapping.len() {
-                        return Err(Error::InvalidData(
-                            "Couldn't write channel mapping table data.",
-                        ));
+                        return Status::DopsChannelMappingWriteErr.into();
                     }
                 }
             }
@@ -5112,15 +5478,13 @@ fn read_alac<T: Read>(src: &mut BMFFBox<T>) -> Result<ALACSpecificBox> {
         return Err(Error::Unsupported("unknown alac (ALAC) version"));
     }
     if flags != 0 {
-        return Err(Error::InvalidData("no-zero alac (ALAC) flags"));
+        return Status::AlacFlagsNonzero.into();
     }
 
     let length = match src.bytes_left() {
         x @ 24 | x @ 48 => x,
         _ => {
-            return Err(Error::InvalidData(
-                "ALACSpecificBox magic cookie is the wrong size",
-            ))
+            return Status::AlacBadMagicCookieSize.into();
         }
     };
     let data = read_buf(src, length)?;
@@ -5133,15 +5497,14 @@ fn read_alac<T: Read>(src: &mut BMFFBox<T>) -> Result<ALACSpecificBox> {
 /// See [\[ISOBMFF\]: reserved (field = 0;) handling is ambiguous](https://github.com/MPEGGroup/FileFormat/issues/36)
 fn read_hdlr<T: Read>(src: &mut BMFFBox<T>, strictness: ParseStrictness) -> Result<HandlerBox> {
     if read_fullbox_version_no_flags(src)? != 0 {
-        return Err(Error::Unsupported("hdlr version"));
+        return Status::HdlrUnsupportedVersion.into();
     }
 
     let pre_defined = be_u32(src)?;
     if pre_defined != 0 {
-        fail_if(
+        fail_with_status_if(
             strictness == ParseStrictness::Strict,
-            "The HandlerBox 'pre_defined' field shall be 0 \
-             per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2",
+            Status::HdlrPredefinedNonzero,
         )?;
     }
 
@@ -5150,10 +5513,9 @@ fn read_hdlr<T: Read>(src: &mut BMFFBox<T>, strictness: ParseStrictness) -> Resu
     for _ in 1..=3 {
         let reserved = be_u32(src)?;
         if reserved != 0 {
-            fail_if(
+            fail_with_status_if(
                 strictness == ParseStrictness::Strict,
-                "The HandlerBox 'reserved' fields shall be 0 \
-                 per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2",
+                Status::HdlrReservedNonzero,
             )?;
         }
     }
@@ -5161,29 +5523,25 @@ fn read_hdlr<T: Read>(src: &mut BMFFBox<T>, strictness: ParseStrictness) -> Resu
     match std::str::from_utf8(src.read_into_try_vec()?.as_slice()) {
         Ok(name) => {
             match name.bytes().filter(|&b| b == b'\0').count() {
-                0 => fail_if(
+                0 => fail_with_status_if(
                     strictness != ParseStrictness::Permissive,
-                    "The HandlerBox 'name' field shall be null-terminated \
-                     per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2",
+                    Status::HdlrNameNoNul,
                 )?,
                 1 => (),
                 n =>
                 // See https://github.com/MPEGGroup/FileFormat/issues/35
                 {
                     error!("Found {} nul bytes in {:x?}", n, name);
-                    fail_if(
+                    fail_with_status_if(
                         strictness == ParseStrictness::Strict,
-                        "The HandlerBox 'name' field shall have a NUL byte \
-                         only in the final position \
-                         per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2",
+                        Status::HdlrNameMultipleNul,
                     )?
                 }
             }
         }
-        Err(_) => fail_if(
+        Err(_) => fail_with_status_if(
             strictness != ParseStrictness::Permissive,
-            "The HandlerBox 'name' field shall be valid utf8 \
-             per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2",
+            Status::HdlrNameNotUtf8,
         )?,
     }
 
@@ -5233,7 +5591,7 @@ fn read_video_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
                     && name != BoxType::ProtectedVisualSampleEntry)
                     || codec_specific.is_some()
                 {
-                    return Err(Error::InvalidData("malformed video sample entry"));
+                    return Status::StsdBadVideoSampleEntry.into();
                 }
                 let avcc_size = b
                     .head
@@ -5247,7 +5605,7 @@ fn read_video_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
             }
             BoxType::H263SpecificBox => {
                 if (name != BoxType::H263SampleEntry) || codec_specific.is_some() {
-                    return Err(Error::InvalidData("malformed video sample entry"));
+                    return Status::StsdBadVideoSampleEntry.into();
                 }
                 let h263_dec_spec_struc_size = b
                     .head
@@ -5266,21 +5624,21 @@ fn read_video_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
                     && name != BoxType::ProtectedVisualSampleEntry)
                     || codec_specific.is_some()
                 {
-                    return Err(Error::InvalidData("malformed video sample entry"));
+                    return Status::StsdBadVideoSampleEntry.into();
                 }
                 let vpcc = read_vpcc(&mut b)?;
                 codec_specific = Some(VideoCodecSpecific::VPxConfig(vpcc));
             }
             BoxType::AV1CodecConfigurationBox => {
                 if name != BoxType::AV1SampleEntry && name != BoxType::ProtectedVisualSampleEntry {
-                    return Err(Error::InvalidData("malformed video sample entry"));
+                    return Status::StsdBadVideoSampleEntry.into();
                 }
                 let av1c = read_av1c(&mut b)?;
                 codec_specific = Some(VideoCodecSpecific::AV1Config(av1c));
             }
             BoxType::ESDBox => {
                 if name != BoxType::MP4VideoSampleEntry || codec_specific.is_some() {
-                    return Err(Error::InvalidData("malformed video sample entry"));
+                    return Status::StsdBadVideoSampleEntry.into();
                 }
                 #[cfg(not(feature = "mp4v"))]
                 {
@@ -5298,7 +5656,7 @@ fn read_video_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
                 #[cfg(feature = "mp4v")]
                 {
                     // Read ES_Descriptor inside an esds box.
-                    // See ISOBMFF (ISO 14496-1:2010 §7.2.6.5)
+                    // See ISOBMFF (ISO 14496-1:2010) § 7.2.6.5
                     let esds = read_esds(&mut b)?;
                     codec_specific =
                         Some(VideoCodecSpecific::ESDSConfig(esds.decoder_specific_data));
@@ -5306,7 +5664,7 @@ fn read_video_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
             }
             BoxType::ProtectionSchemeInfoBox => {
                 if name != BoxType::ProtectedVisualSampleEntry {
-                    return Err(Error::InvalidData("malformed video sample entry"));
+                    return Status::StsdBadVideoSampleEntry.into();
                 }
                 let sinf = read_sinf(&mut b)?;
                 debug!("{:?} (sinf)", sinf);
@@ -5347,7 +5705,7 @@ fn read_qt_wave_atom<T: Read>(src: &mut BMFFBox<T>) -> Result<ES_Descriptor> {
         }
     }
 
-    codec_specific.ok_or(Error::InvalidData("malformed audio sample entry"))
+    codec_specific.ok_or_else(|| Error::from(Status::EsdsBadAudioSampleEntry))
 }
 
 /// Parse an audio description inside an stsd box.
@@ -5424,7 +5782,7 @@ fn read_audio_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
                     && name != BoxType::ProtectedAudioSampleEntry)
                     || codec_specific.is_some()
                 {
-                    return Err(Error::InvalidData("malformed audio sample entry"));
+                    return Status::StsdBadAudioSampleEntry.into();
                 }
                 let esds = read_esds(&mut b)?;
                 codec_type = esds.audio_codec;
@@ -5434,7 +5792,7 @@ fn read_audio_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
                 if (name != BoxType::FLACSampleEntry && name != BoxType::ProtectedAudioSampleEntry)
                     || codec_specific.is_some()
                 {
-                    return Err(Error::InvalidData("malformed audio sample entry"));
+                    return Status::StsdBadAudioSampleEntry.into();
                 }
                 let dfla = read_dfla(&mut b)?;
                 codec_type = CodecType::FLAC;
@@ -5444,7 +5802,7 @@ fn read_audio_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
                 if (name != BoxType::OpusSampleEntry && name != BoxType::ProtectedAudioSampleEntry)
                     || codec_specific.is_some()
                 {
-                    return Err(Error::InvalidData("malformed audio sample entry"));
+                    return Status::StsdBadAudioSampleEntry.into();
                 }
                 let dops = read_dops(&mut b)?;
                 codec_type = CodecType::Opus;
@@ -5452,7 +5810,7 @@ fn read_audio_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
             }
             BoxType::ALACSpecificBox => {
                 if name != BoxType::ALACSpecificBox || codec_specific.is_some() {
-                    return Err(Error::InvalidData("malformed audio sample entry"));
+                    return Status::StsdBadAudioSampleEntry.into();
                 }
                 let alac = read_alac(&mut b)?;
                 codec_type = CodecType::ALAC;
@@ -5465,7 +5823,7 @@ fn read_audio_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
             }
             BoxType::ProtectionSchemeInfoBox => {
                 if name != BoxType::ProtectedAudioSampleEntry {
-                    return Err(Error::InvalidData("malformed audio sample entry"));
+                    return Status::StsdBadAudioSampleEntry.into();
                 }
                 let sinf = read_sinf(&mut b)?;
                 debug!("{:?} (sinf)", sinf);
@@ -5475,7 +5833,7 @@ fn read_audio_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
             #[cfg(feature = "3gpp")]
             BoxType::AMRSpecificBox => {
                 if codec_type != CodecType::AMRNB && codec_type != CodecType::AMRWB {
-                    return Err(Error::InvalidData("malformed audio sample entry"));
+                    return Status::StsdBadAudioSampleEntry.into();
                 }
                 let amr_dec_spec_struc_size = b
                     .head
@@ -5513,16 +5871,25 @@ fn read_audio_sample_entry<T: Read>(src: &mut BMFFBox<T>) -> Result<SampleEntry>
 /// See ISOBMFF (ISO 14496-12:2020) § 8.5.2
 /// See MP4 (ISO 14496-14:2020) § 6.7.2
 fn read_stsd<T: Read>(src: &mut BMFFBox<T>, track: &mut Track) -> Result<SampleDescriptionBox> {
-    let (_, _) = read_fullbox_extra(src)?;
+    let (_, flags) = read_fullbox_extra(src)?;
 
-    let description_count = be_u32(src)?;
-    let mut descriptions = TryVec::new();
+    if flags != 0 {
+        warn!(
+            "Unexpected `flags` value for SampleDescriptionBox (stsd): {}",
+            flags
+        );
+    }
 
-    {
-        let mut iter = src.box_iter();
-        while let Some(mut b) = iter.next_box()? {
+    let description_count = be_u32(src)?.to_usize();
+    let mut descriptions = TryVec::with_capacity(description_count)?;
+
+    let mut iter = src.box_iter();
+    while descriptions.len() < description_count {
+        if let Some(mut b) = iter.next_box()? {
             let description = match track.track_type {
                 TrackType::Video => read_video_sample_entry(&mut b),
+                TrackType::Picture => read_video_sample_entry(&mut b),
+                TrackType::AuxiliaryVideo => read_video_sample_entry(&mut b),
                 TrackType::Audio => read_audio_sample_entry(&mut b),
                 TrackType::Metadata => Err(Error::Unsupported("metadata track")),
                 TrackType::Unknown => Err(Error::Unsupported("unknown track type")),
@@ -5541,9 +5908,8 @@ fn read_stsd<T: Read>(src: &mut BMFFBox<T>, track: &mut Track) -> Result<SampleD
             };
             descriptions.push(description)?;
             check_parser_state!(b.content);
-            if descriptions.len() == description_count.to_usize() {
-                break;
-            }
+        } else {
+            break;
         }
     }
 
@@ -5584,9 +5950,7 @@ fn read_schi<T: Read>(src: &mut BMFFBox<T>) -> Result<Option<TrackEncryptionBox>
         match b.head.name {
             BoxType::TrackEncryptionBox => {
                 if tenc.is_some() {
-                    return Err(Error::InvalidData(
-                        "tenc box should be only one at most in sinf box",
-                    ));
+                    return Status::SchiQuantity.into();
                 }
                 tenc = Some(read_tenc(&mut b)?);
             }
@@ -5777,7 +6141,7 @@ fn read_ilst<T: Read>(src: &mut BMFFBox<T>, meta: &mut MetadataBox) -> Result<()
             BoxType::CompilationEntry => meta.compilation = read_ilst_bool_data(&mut b)?,
             BoxType::AdvisoryEntry => {
                 meta.advisory = read_ilst_u8_data(&mut b)?.and_then(|rtng| {
-                    Some(match rtng.get(0)? {
+                    Some(match rtng.first()? {
                         2 => AdvisoryRating::Clean,
                         0 => AdvisoryRating::Inoffensive,
                         r => AdvisoryRating::Explicit(*r),
@@ -5786,7 +6150,7 @@ fn read_ilst<T: Read>(src: &mut BMFFBox<T>, meta: &mut MetadataBox) -> Result<()
             }
             BoxType::MediaTypeEntry => {
                 meta.media_type = read_ilst_u8_data(&mut b)?.and_then(|stik| {
-                    Some(match stik.get(0)? {
+                    Some(match stik.first()? {
                         0 => MediaType::Movie,
                         1 => MediaType::Normal,
                         2 => MediaType::AudioBook,
@@ -5817,7 +6181,7 @@ fn read_ilst<T: Read>(src: &mut BMFFBox<T>, meta: &mut MetadataBox) -> Result<()
 }
 
 fn read_ilst_bool_data<T: Read>(src: &mut BMFFBox<T>) -> Result<Option<bool>> {
-    Ok(read_ilst_u8_data(src)?.and_then(|d| Some(d.get(0)? == &1)))
+    Ok(read_ilst_u8_data(src)?.and_then(|d| Some(d.first()? == &1)))
 }
 
 fn read_ilst_string_data<T: Read>(src: &mut BMFFBox<T>) -> Result<Option<TryString>> {
@@ -5861,7 +6225,7 @@ fn skip<T: Read>(src: &mut T, bytes: u64) -> Result<()> {
 fn read_buf<T: Read>(src: &mut T, size: u64) -> Result<TryVec<u8>> {
     let buf = src.take(size).read_into_try_vec()?;
     if buf.len().to_u64() != size {
-        return Err(Error::InvalidData("failed buffer read"));
+        return Status::ReadBufErr.into();
     }
 
     Ok(buf)
diff --git a/third_party/rust/mp4parse/src/macros.rs b/third_party/rust/mp4parse/src/macros.rs
index a893f7e1ac9a..15244a316fb8 100644
--- a/third_party/rust/mp4parse/src/macros.rs
+++ b/third_party/rust/mp4parse/src/macros.rs
@@ -6,7 +6,7 @@ macro_rules! check_parser_state {
     ( $src:expr ) => {
         if $src.limit() > 0 {
             debug!("bad parser state: {} content bytes left", $src.limit());
-            return Err(Error::InvalidData("unread box content or bad parser sync"));
+            return Status::CheckParserStateErr.into();
         }
     };
 }
diff --git a/third_party/rust/mp4parse/src/tests.rs b/third_party/rust/mp4parse/src/tests.rs
index 0f2276002019..fa8d69e3e104 100644
--- a/third_party/rust/mp4parse/src/tests.rs
+++ b/third_party/rust/mp4parse/src/tests.rs
@@ -6,17 +6,16 @@
 // file, You can obtain one at https://mozilla.org/MPL/2.0/.
 
 use super::read_mp4;
-use super::Error;
 use super::ParseStrictness;
+use super::{Error, Status};
 use fallible_collections::TryRead as _;
 
 use std::convert::TryInto as _;
 use std::io::Cursor;
 use std::io::Read as _;
-extern crate test_assembler;
-use self::test_assembler::*;
+use test_assembler::*;
 
-use boxes::BoxType;
+use crate::boxes::BoxType;
 
 enum BoxSize {
     Short(u32),
@@ -122,7 +121,7 @@ fn read_box_header_short_unknown_size() {
 fn read_box_header_short_invalid_size() {
     let mut stream = make_box(BoxSize::UncheckedShort(2), b"test", |s| s);
     match super::read_box_header(&mut stream) {
-        Err(Error::InvalidData(s)) => assert_eq!(s, "malformed size"),
+        Err(Error::InvalidData(s)) => assert_eq!(s, Status::BoxBadSize),
         _ => panic!("unexpected result reading box with invalid size"),
     };
 }
@@ -131,7 +130,7 @@ fn read_box_header_short_invalid_size() {
 fn read_box_header_long_invalid_size() {
     let mut stream = make_box(BoxSize::UncheckedLong(2), b"test", |s| s);
     match super::read_box_header(&mut stream) {
-        Err(Error::InvalidData(s)) => assert_eq!(s, "malformed wide size"),
+        Err(Error::InvalidData(s)) => assert_eq!(s, Status::BoxBadWideSize),
         _ => panic!("unexpected result reading box with invalid size"),
     };
 }
@@ -490,7 +489,10 @@ fn read_hdlr_multiple_nul_in_name() {
     let mut stream = iter.next_box().unwrap().unwrap();
     assert_eq!(stream.head.name, BoxType::HandlerBox);
     assert_eq!(stream.head.size, 45);
-    assert!(super::read_hdlr(&mut stream, ParseStrictness::Strict).is_err());
+    assert_eq!(
+        super::Status::from(super::read_hdlr(&mut stream, ParseStrictness::Strict)),
+        super::Status::HdlrNameMultipleNul,
+    );
 }
 
 #[test]
@@ -515,13 +517,10 @@ fn read_hdlr_unsupported_version() {
     let mut stream = iter.next_box().unwrap().unwrap();
     assert_eq!(stream.head.name, BoxType::HandlerBox);
     assert_eq!(stream.head.size, 32);
-    match super::read_hdlr(&mut stream, ParseStrictness::Normal) {
-        Err(Error::Unsupported(msg)) => assert_eq!("hdlr version", msg),
-        result => {
-            eprintln!("{:?}", result);
-            panic!("expected Error::Unsupported")
-        }
-    }
+    assert_eq!(
+        super::Status::from(super::read_hdlr(&mut stream, ParseStrictness::Normal)),
+        super::Status::HdlrUnsupportedVersion,
+    );
 }
 
 #[test]
@@ -533,17 +532,10 @@ fn read_hdlr_invalid_pre_defined_field() {
     let mut stream = iter.next_box().unwrap().unwrap();
     assert_eq!(stream.head.name, BoxType::HandlerBox);
     assert_eq!(stream.head.size, 32);
-    match super::read_hdlr(&mut stream, ParseStrictness::Strict) {
-        Err(Error::InvalidData(msg)) => assert_eq!(
-            "The HandlerBox 'pre_defined' field shall be 0 \
-             per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2",
-            msg
-        ),
-        result => {
-            eprintln!("{:?}", result);
-            panic!("expected Error::InvalidData")
-        }
-    }
+    assert_eq!(
+        super::Status::from(super::read_hdlr(&mut stream, ParseStrictness::Strict)),
+        super::Status::HdlrPredefinedNonzero,
+    );
 }
 
 #[test]
@@ -555,17 +547,10 @@ fn read_hdlr_invalid_reserved_field() {
     let mut stream = iter.next_box().unwrap().unwrap();
     assert_eq!(stream.head.name, BoxType::HandlerBox);
     assert_eq!(stream.head.size, 32);
-    match super::read_hdlr(&mut stream, ParseStrictness::Strict) {
-        Err(Error::InvalidData(msg)) => assert_eq!(
-            "The HandlerBox 'reserved' fields shall be 0 \
-             per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2",
-            msg
-        ),
-        result => {
-            eprintln!("{:?}", result);
-            panic!("expected Error::InvalidData")
-        }
-    }
+    assert_eq!(
+        super::Status::from(super::read_hdlr(&mut stream, ParseStrictness::Strict)),
+        super::Status::HdlrReservedNonzero,
+    );
 }
 
 #[test]
@@ -577,17 +562,10 @@ fn read_hdlr_zero_length_name() {
     let mut stream = iter.next_box().unwrap().unwrap();
     assert_eq!(stream.head.name, BoxType::HandlerBox);
     assert_eq!(stream.head.size, 32);
-    match super::read_hdlr(&mut stream, ParseStrictness::Normal) {
-        Err(Error::InvalidData(msg)) => assert_eq!(
-            "The HandlerBox 'name' field shall be null-terminated \
-             per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2",
-            msg
-        ),
-        result => {
-            eprintln!("{:?}", result);
-            panic!("expected Error::InvalidData")
-        }
-    }
+    assert_eq!(
+        super::Status::from(super::read_hdlr(&mut stream, ParseStrictness::Normal)),
+        super::Status::HdlrNameNoNul,
+    );
 }
 
 #[test]
@@ -1278,7 +1256,7 @@ fn read_esds_invalid_descriptor() {
     let mut stream = iter.next_box().unwrap().unwrap();
 
     match super::read_esds(&mut stream) {
-        Err(Error::InvalidData(s)) => assert_eq!(s, "Invalid descriptor."),
+        Err(Error::InvalidData(s)) => assert_eq!(s, Status::EsdsBadDescriptor),
         _ => panic!("unexpected result with invalid descriptor"),
     }
 }
diff --git a/third_party/rust/mp4parse/src/unstable.rs b/third_party/rust/mp4parse/src/unstable.rs
index eeb16f8ed80f..da9d479366bc 100644
--- a/third_party/rust/mp4parse/src/unstable.rs
+++ b/third_party/rust/mp4parse/src/unstable.rs
@@ -106,7 +106,7 @@ impl<T: std::cmp::PartialEq> PartialEq<T> for CheckedInteger<T> {
 /// sample data offset (start and end), composition time in microseconds
 /// (start and end) and whether it is a sync sample
 #[repr(C)]
-#[derive(Default, Debug, PartialEq)]
+#[derive(Default, Debug, PartialEq, Eq)]
 pub struct Indice {
     /// The byte offset in the file where the indexed sample begins.
     pub start_offset: CheckedInteger<u64>,
@@ -489,7 +489,7 @@ where
     })
 }
 
-#[derive(Debug, PartialEq)]
+#[derive(Debug, PartialEq, Eq)]
 pub struct Microseconds<T>(pub T);
 
 /// Convert `time` in media's global (mvhd) timescale to microseconds,
diff --git a/third_party/rust/mp4parse/tests/corrupt/invalid-transformation-order.avif b/third_party/rust/mp4parse/tests/corrupt/invalid-transformation-order.avif
new file mode 100644
index 000000000000..d02ef72424fc
Binary files /dev/null and b/third_party/rust/mp4parse/tests/corrupt/invalid-transformation-order.avif differ
diff --git a/third_party/rust/mp4parse/tests/corrupt/no-alpha-ispe.avif b/third_party/rust/mp4parse/tests/corrupt/no-alpha-ispe.avif
new file mode 100644
index 000000000000..0183a6083146
Binary files /dev/null and b/third_party/rust/mp4parse/tests/corrupt/no-alpha-ispe.avif differ
diff --git a/third_party/rust/mp4parse/tests/corrupt/transformation-before-ispe.avif b/third_party/rust/mp4parse/tests/corrupt/transformation-before-ispe.avif
new file mode 100644
index 000000000000..4ff865273451
Binary files /dev/null and b/third_party/rust/mp4parse/tests/corrupt/transformation-before-ispe.avif differ
diff --git a/third_party/rust/mp4parse/tests/imir-missing-essential.avif b/third_party/rust/mp4parse/tests/imir-missing-essential.avif
index 6baa293ab688..760a7b9390be 100644
Binary files a/third_party/rust/mp4parse/tests/imir-missing-essential.avif and b/third_party/rust/mp4parse/tests/imir-missing-essential.avif differ
diff --git a/third_party/rust/mp4parse/tests/irot-missing-essential.avif b/third_party/rust/mp4parse/tests/irot-missing-essential.avif
index 8c62e55ecc8c..07c32e3604c3 100644
Binary files a/third_party/rust/mp4parse/tests/irot-missing-essential.avif and b/third_party/rust/mp4parse/tests/irot-missing-essential.avif differ
diff --git a/third_party/rust/mp4parse/tests/public.rs b/third_party/rust/mp4parse/tests/public.rs
index a35cef666649..28ef1ba1e33b 100644
--- a/third_party/rust/mp4parse/tests/public.rs
+++ b/third_party/rust/mp4parse/tests/public.rs
@@ -2,9 +2,9 @@
 // This Source Code Form is subject to the terms of the Mozilla Public
 // License, v. 2.0. If a copy of the MPL was not distributed with this
 // file, You can obtain one at https://mozilla.org/MPL/2.0/.
-extern crate mp4parse as mp4;
+use mp4parse as mp4;
 
-use mp4::{Error, ParseStrictness, Status};
+use crate::mp4::{ParseStrictness, Status};
 use std::convert::TryInto;
 use std::fs::File;
 use std::io::{Cursor, Read, Seek, SeekFrom};
@@ -53,6 +53,9 @@ static IMAGE_AVIF_NO_PITM: &str = "tests/corrupt/no-pitm.avif";
 static IMAGE_AVIF_NO_PIXI: &str = "tests/corrupt/no-pixi.avif";
 static IMAGE_AVIF_NO_AV1C: &str = "tests/corrupt/no-av1C.avif";
 static IMAGE_AVIF_NO_ISPE: &str = "tests/corrupt/no-ispe.avif";
+static IMAGE_AVIF_NO_ALPHA_ISPE: &str = "tests/corrupt/no-alpha-ispe.avif";
+static IMAGE_AVIF_TRANSFORM_ORDER: &str = "tests/corrupt/invalid-transformation-order.avif";
+static IMAGE_AVIF_TRANSFORM_BEFORE_ISPE: &str = "tests/corrupt/transformation-before-ispe.avif";
 static IMAGE_AVIF_NO_ALPHA_AV1C: &str = "tests/corrupt/no-alpha-av1C.avif";
 static IMAGE_AVIF_NO_ALPHA_PIXI: &str = "tests/corrupt/no-pixi-for-alpha.avif";
 static IMAGE_AVIF_AV1C_MISSING_ESSENTIAL: &str = "tests/av1C-missing-essential.avif";
@@ -92,8 +95,6 @@ static AVIF_UNSUPPORTED_IMAGES: &[&str] = &[
     AVIF_GRID,
     AVIF_GRID_A1LX,
     AVIF_LSEL,
-    AVIF_AVIS_MAJOR_NO_PITM,
-    AVIF_AVIS_MAJOR_WITH_PITM_AND_ALPHA,
     "av1-avif/testFiles/Apple/multilayer_examples/animals_00_multilayer_a1lx.avif",
     "av1-avif/testFiles/Apple/multilayer_examples/animals_00_multilayer_a1op.avif",
     "av1-avif/testFiles/Apple/multilayer_examples/animals_00_multilayer_a1op_lsel.avif",
@@ -104,7 +105,6 @@ static AVIF_UNSUPPORTED_IMAGES: &[&str] = &[
     "av1-avif/testFiles/Microsoft/Chimera_10bit_cropped_to_1920x1008.avif",
     "av1-avif/testFiles/Microsoft/Chimera_10bit_cropped_to_1920x1008_with_HDR_metadata.avif",
     "av1-avif/testFiles/Microsoft/Chimera_8bit_cropped_480x256.avif",
-    "av1-avif/testFiles/Netflix/avis/alpha_video.avif",
     "av1-avif/testFiles/Xiph/abandoned_filmgrain.avif",
     "av1-avif/testFiles/Xiph/fruits_2layer_thumbsize.avif",
     "av1-avif/testFiles/Xiph/quebec_3layer_op2.avif",
@@ -112,18 +112,27 @@ static AVIF_UNSUPPORTED_IMAGES: &[&str] = &[
     "av1-avif/testFiles/Xiph/tiger_3layer_3res.avif",
     "link-u-avif-sample-images/kimono.crop.avif",
     "link-u-avif-sample-images/kimono.mirror-vertical.rotate270.crop.avif",
-    "link-u-avif-sample-images/star-10bpc-with-alpha.avifs",
-    "link-u-avif-sample-images/star-10bpc.avifs",
-    "link-u-avif-sample-images/star-12bpc-with-alpha.avifs",
-    "link-u-avif-sample-images/star-12bpc.avifs",
-    "link-u-avif-sample-images/star-8bpc-with-alpha.avifs",
-    "link-u-avif-sample-images/star-8bpc.avifs",
 ];
 /// See https://github.com/AOMediaCodec/av1-avif/issues/150
 ///     https://github.com/AOMediaCodec/av1-avif/issues/174
-/// and https://github.com/AOMediaCodec/av1-avif/issues/177
+///     https://github.com/AOMediaCodec/av1-avif/issues/177
+/// and https://github.com/AOMediaCodec/av1-avif/issues/178
 // TODO: make this into a map of expected errors?
 static AV1_AVIF_CORRUPT_IMAGES: &[&str] = &[
+    "av1-avif/testFiles/Link-U/kimono.crop.avif",
+    "av1-avif/testFiles/Link-U/kimono.mirror-horizontal.avif",
+    "av1-avif/testFiles/Link-U/kimono.mirror-vertical.avif",
+    "av1-avif/testFiles/Link-U/kimono.mirror-vertical.rotate270.avif",
+    "av1-avif/testFiles/Link-U/kimono.mirror-vertical.rotate270.crop.avif",
+    "av1-avif/testFiles/Link-U/kimono.rotate90.avif",
+    "av1-avif/testFiles/Link-U/kimono.rotate270.avif",
+    "link-u-avif-sample-images/kimono.crop.avif",
+    "link-u-avif-sample-images/kimono.mirror-horizontal.avif",
+    "link-u-avif-sample-images/kimono.mirror-vertical.avif",
+    "link-u-avif-sample-images/kimono.mirror-vertical.rotate270.avif",
+    "link-u-avif-sample-images/kimono.mirror-vertical.rotate270.crop.avif",
+    "link-u-avif-sample-images/kimono.rotate90.avif",
+    "link-u-avif-sample-images/kimono.rotate270.avif",
     "link-u-avif-sample-images/plum-blossom-large.profile0.10bpc.yuv420.alpha-full.avif",
     "link-u-avif-sample-images/plum-blossom-large.profile0.10bpc.yuv420.alpha-full.monochrome.avif",
     "link-u-avif-sample-images/plum-blossom-large.profile0.10bpc.yuv420.alpha-limited.avif",
@@ -328,7 +337,7 @@ fn public_api() {
                 assert!(a.samplesize > 0);
                 assert!(a.samplerate > 0.0);
             }
-            mp4::TrackType::Metadata | mp4::TrackType::Unknown => {}
+            _ => {}
         }
     }
 }
@@ -849,7 +858,7 @@ fn public_mp4_bug_1185230() {
 fn public_mp4_ctts_overflow() {
     let input = &mut File::open("tests/clusterfuzz-testcase-minimized-mp4-6093954524250112")
         .expect("Unknown file");
-    assert_invalid_data(mp4::read_mp4(input), "insufficient data in 'ctts' box");
+    assert_eq!(Status::from(mp4::read_mp4(input)), Status::CttsBadSize);
 }
 
 #[test]
@@ -911,22 +920,6 @@ fn public_avif_bug_1661347() {
     assert!(mp4::read_avif(input, ParseStrictness::Normal).is_err());
 }
 
-fn assert_invalid_data<T: std::fmt::Debug>(result: mp4::Result<T>, expected_msg: &str) {
-    match result {
-        Err(Error::InvalidData(msg)) if msg == expected_msg => {}
-        Err(Error::InvalidData(msg)) if msg != expected_msg => {
-            panic!(
-                "Error message mismatch\nExpected: {}\nFound:    {}",
-                expected_msg, msg
-            );
-        }
-        r => panic!(
-            "Expected Err(Error::InvalidData({:?}), found {:?}",
-            expected_msg, r
-        ),
-    }
-}
-
 fn for_strictness_result(
     path: &str,
     check: impl Fn(ParseStrictness, mp4::Result<mp4::AvifContext>),
@@ -944,18 +937,7 @@ fn for_strictness_result(
 }
 
 /// Check that input generates the expected error only in strict parsing mode
-fn assert_avif_should(path: &str, expected_msg: &str) {
-    let input = &mut File::open(path).expect("Unknown file");
-    assert_invalid_data(mp4::read_avif(input, ParseStrictness::Strict), expected_msg);
-    input.seek(SeekFrom::Start(0)).expect("rewind failed");
-    mp4::read_avif(input, ParseStrictness::Normal).expect("ParseStrictness::Normal failed");
-    input.seek(SeekFrom::Start(0)).expect("rewind failed");
-    mp4::read_avif(input, ParseStrictness::Permissive).expect("ParseStrictness::Permissive failed");
-}
-
-/// Check that input generates the expected error only in strict parsing mode
-// TODO: replace assert_avif_should
-fn assert_avif_should2(path: &str, expected: Status) {
+fn assert_avif_should(path: &str, expected: Status) {
     for_strictness_result(path, |strictness, result| {
         if strictness == ParseStrictness::Strict {
             assert_eq!(expected, Status::from(result));
@@ -966,17 +948,7 @@ fn assert_avif_should2(path: &str, expected: Status) {
 }
 
 /// Check that input generates the expected error unless in permissive parsing mode
-fn assert_avif_shall(path: &str, expected_msg: &str) {
-    let input = &mut File::open(path).expect("Unknown file");
-    assert_invalid_data(mp4::read_avif(input, ParseStrictness::Strict), expected_msg);
-    input.seek(SeekFrom::Start(0)).expect("rewind failed");
-    assert_invalid_data(mp4::read_avif(input, ParseStrictness::Normal), expected_msg);
-    input.seek(SeekFrom::Start(0)).expect("rewind failed");
-    mp4::read_avif(input, ParseStrictness::Permissive).expect("ParseStrictness::Permissive failed");
-}
-
-// TODO: replace assert_avif_shall
-fn assert_avif_shall2(path: &str, expected: Status) {
+fn assert_avif_shall(path: &str, expected: Status) {
     for_strictness_result(path, |strictness, result| {
         if strictness == ParseStrictness::Permissive {
             assert!(result.is_ok());
@@ -992,7 +964,7 @@ fn assert_avif_shall2(path: &str, expected: Status) {
 
 #[test]
 fn public_avif_av1c_missing_essential() {
-    assert_avif_should2(IMAGE_AVIF_AV1C_MISSING_ESSENTIAL, Status::TxformNoEssential);
+    assert_avif_should(IMAGE_AVIF_AV1C_MISSING_ESSENTIAL, Status::TxformNoEssential);
 }
 
 #[test]
@@ -1008,36 +980,30 @@ fn public_avif_clap_missing_essential() {
 
 #[test]
 fn public_avif_imir_missing_essential() {
-    assert_avif_should2(IMAGE_AVIF_IMIR_MISSING_ESSENTIAL, Status::TxformNoEssential);
+    assert_avif_should(IMAGE_AVIF_IMIR_MISSING_ESSENTIAL, Status::TxformNoEssential);
 }
 
 #[test]
 fn public_avif_irot_missing_essential() {
-    assert_avif_should2(IMAGE_AVIF_IROT_MISSING_ESSENTIAL, Status::TxformNoEssential);
+    assert_avif_should(IMAGE_AVIF_IROT_MISSING_ESSENTIAL, Status::TxformNoEssential);
 }
 
 #[test]
 fn public_avif_ipma_bad_version() {
-    let expected_msg = "The ipma version 0 should be used unless 32-bit \
-                        item_ID values are needed \
-                        per ISOBMFF (ISO 14496-12:2020 § 8.11.14.1";
-    assert_avif_should(IMAGE_AVIF_IPMA_BAD_VERSION, expected_msg);
+    assert_avif_should(IMAGE_AVIF_IPMA_BAD_VERSION, Status::IpmaBadVersion);
 }
 
 #[test]
 fn public_avif_ipma_bad_flags() {
-    let expected_msg = "Unless there are more than 127 properties in the \
-                        ItemPropertyContainerBox, flags should be equal to 0 \
-                        per ISOBMFF (ISO 14496-12:2020 § 8.11.14.1";
-    assert_avif_should(IMAGE_AVIF_IPMA_BAD_FLAGS, expected_msg);
+    assert_avif_should(IMAGE_AVIF_IPMA_BAD_FLAGS, Status::IpmaFlagsNonzero);
 }
 
 #[test]
 fn public_avif_ipma_duplicate_version_and_flags() {
-    let expected_msg = "There shall be at most one ItemPropertyAssociationbox \
-                        with a given pair of values of version and flags \
-                        per ISOBMFF (ISO 14496-12:2020 § 8.11.14.1";
-    assert_avif_shall(IMAGE_AVIF_IPMA_DUPLICATE_VERSION_AND_FLAGS, expected_msg);
+    assert_avif_shall(
+        IMAGE_AVIF_IPMA_DUPLICATE_VERSION_AND_FLAGS,
+        Status::IpmaBadQuantity,
+    );
 }
 
 #[test]
@@ -1046,101 +1012,90 @@ fn public_avif_ipma_duplicate_version_and_flags() {
 // which is kind of annoying to make pass the "should" requirements on flags and version
 // as well as the "shall" requirement on duplicate version and flags
 fn public_avif_ipma_duplicate_item_id() {
-    let expected_msg = "There shall be at most one occurrence of a given item_ID, \
-                        in the set of ItemPropertyAssociationBox boxes \
-                        per ISOBMFF (ISO 14496-12:2020) § 8.11.14.1";
     let input = &mut File::open(IMAGE_AVIF_IPMA_DUPLICATE_ITEM_ID).expect("Unknown file");
-    assert_invalid_data(
-        mp4::read_avif(input, ParseStrictness::Permissive),
-        expected_msg,
+    assert_eq!(
+        Status::from(mp4::read_avif(input, ParseStrictness::Permissive)),
+        Status::IpmaDuplicateItemId
     )
 }
 
 #[test]
 fn public_avif_ipma_invalid_property_index() {
-    let expected_msg = "Invalid property index in ipma";
-    assert_avif_shall(IMAGE_AVIF_IPMA_INVALID_PROPERTY_INDEX, expected_msg);
+    assert_avif_shall(IMAGE_AVIF_IPMA_INVALID_PROPERTY_INDEX, Status::IpmaBadIndex);
 }
 
 #[test]
 fn public_avif_hdlr_first_in_meta() {
-    let expected_msg = "The HandlerBox shall be the first contained box within \
-                        the MetaBox \
-                        per MIAF (ISO 23000-22:2019) § 7.2.1.5";
-    assert_avif_shall(IMAGE_AVIF_NO_HDLR, expected_msg);
-    assert_avif_shall(IMAGE_AVIF_HDLR_NOT_FIRST, expected_msg);
+    assert_avif_shall(IMAGE_AVIF_NO_HDLR, Status::HdlrNotFirst);
+    assert_avif_shall(IMAGE_AVIF_HDLR_NOT_FIRST, Status::HdlrNotFirst);
 }
 
 #[test]
 fn public_avif_hdlr_is_pict() {
-    let expected_msg = "The HandlerBox handler_type must be 'pict' \
-                        per MIAF (ISO 23000-22:2019) § 7.2.1.5";
-    assert_avif_shall(IMAGE_AVIF_HDLR_NOT_PICT, expected_msg);
+    assert_avif_shall(IMAGE_AVIF_HDLR_NOT_PICT, Status::HdlrTypeNotPict);
 }
 
 #[test]
 fn public_avif_hdlr_nonzero_reserved() {
-    let expected_msg = "The HandlerBox 'reserved' fields shall be 0 \
-                        per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2";
     // This is a "should" despite the spec indicating a (somewhat ambiguous)
     // requirement that this field is set to zero.
     // See comments in read_hdlr
-    assert_avif_should(IMAGE_AVIF_HDLR_NONZERO_RESERVED, expected_msg);
+    assert_avif_should(
+        IMAGE_AVIF_HDLR_NONZERO_RESERVED,
+        Status::HdlrReservedNonzero,
+    );
 }
 
 #[test]
 fn public_avif_hdlr_multiple_nul() {
-    let expected_msg = "The HandlerBox 'name' field shall have a NUL byte \
-                        only in the final position \
-                        per ISOBMFF (ISO 14496-12:2020) § 8.4.3.2";
-
     // This is a "should" despite the spec indicating a (somewhat ambiguous)
     // requirement about extra data in boxes
     // See comments in read_hdlr
-    assert_avif_should(IMAGE_AVIF_HDLR_MULTIPLE_NUL, expected_msg);
+    assert_avif_should(IMAGE_AVIF_HDLR_MULTIPLE_NUL, Status::HdlrNameMultipleNul);
 }
 
 #[test]
 fn public_avif_no_mif1() {
-    let expected_msg = "The FileTypeBox should contain 'mif1' in the compatible_brands list \
-                        per MIAF (ISO 23000-22:2019) § 7.2.1.2";
-    assert_avif_should(IMAGE_AVIF_NO_MIF1, expected_msg);
+    assert_avif_should(IMAGE_AVIF_NO_MIF1, Status::MissingMif1Brand);
 }
 
 #[test]
 fn public_avif_no_pitm() {
-    assert_avif_shall2(IMAGE_AVIF_NO_PITM, Status::NoPrimaryItem);
+    assert_avif_shall(IMAGE_AVIF_NO_PITM, Status::PitmMissing);
 }
 
 #[test]
 fn public_avif_pixi_present_for_displayable_images() {
-    let expected_msg = "The pixel information property shall be associated with every image \
-                        that is displayable (not hidden) \
-                        per MIAF (ISO/IEC 23000-22:2019) specification § 7.3.6.6";
     let pixi_test = if cfg!(feature = "missing-pixi-permitted") {
         assert_avif_should
     } else {
         assert_avif_shall
     };
 
-    pixi_test(IMAGE_AVIF_NO_PIXI, expected_msg);
-    pixi_test(IMAGE_AVIF_NO_ALPHA_PIXI, expected_msg);
+    pixi_test(IMAGE_AVIF_NO_PIXI, Status::PixiMissing);
+    pixi_test(IMAGE_AVIF_NO_ALPHA_PIXI, Status::PixiMissing);
 }
 
 #[test]
 fn public_avif_av1c_present_for_av01() {
-    let expected_msg = "One AV1 Item Configuration Property (av1C) \
-                        is mandatory for an image item of type 'av01' \
-                        per AVIF specification § 2.2.1";
-    assert_avif_shall(IMAGE_AVIF_NO_AV1C, expected_msg);
-    assert_avif_shall(IMAGE_AVIF_NO_ALPHA_AV1C, expected_msg);
+    assert_avif_shall(IMAGE_AVIF_NO_AV1C, Status::Av1cMissing);
+    assert_avif_shall(IMAGE_AVIF_NO_ALPHA_AV1C, Status::Av1cMissing);
 }
 
 #[test]
 fn public_avif_ispe_present() {
-    let expected_msg = "Missing 'ispe' property for primary item, required \
-                        per HEIF (ISO/IEC 23008-12:2017) § 6.5.3.1";
-    assert_avif_shall(IMAGE_AVIF_NO_ISPE, expected_msg);
+    assert_avif_shall(IMAGE_AVIF_NO_ISPE, Status::IspeMissing);
+    assert_avif_shall(IMAGE_AVIF_NO_ALPHA_ISPE, Status::IspeMissing);
+}
+
+#[test]
+fn public_avif_transform_before_ispe() {
+    assert_avif_shall(IMAGE_AVIF_TRANSFORM_BEFORE_ISPE, Status::TxformBeforeIspe);
+}
+
+#[test]
+fn public_avif_transform_order() {
+    assert_avif_shall(IMAGE_AVIF_TRANSFORM_ORDER, Status::TxformOrder);
 }
 
 fn assert_unsupported_nonfatal(result: &mp4::Result<mp4::AvifContext>, feature: mp4::Feature) {
@@ -1192,7 +1147,7 @@ fn public_avif_a1lx() {
 
 #[test]
 fn public_avif_a1lx_marked_essential() {
-    assert_avif_shall2(IMAGE_AVIF_A1LX_MARKED_ESSENTIAL, Status::A1lxEssential);
+    assert_avif_shall(IMAGE_AVIF_A1LX_MARKED_ESSENTIAL, Status::A1lxEssential);
 }
 
 #[test]
@@ -1202,7 +1157,7 @@ fn public_avif_a1op() {
 
 #[test]
 fn public_avif_a1op_missing_essential() {
-    assert_avif_shall2(IMAGE_AVIF_A1OP_MISSING_ESSENTIAL, Status::A1opNoEssential);
+    assert_avif_shall(IMAGE_AVIF_A1OP_MISSING_ESSENTIAL, Status::A1opNoEssential);
 }
 
 #[test]
@@ -1212,7 +1167,7 @@ fn public_avif_lsel() {
 
 #[test]
 fn public_avif_lsel_missing_essential() {
-    assert_avif_shall2(IMAGE_AVIF_LSEL_MISSING_ESSENTIAL, Status::LselNoEssential);
+    assert_avif_shall(IMAGE_AVIF_LSEL_MISSING_ESSENTIAL, Status::LselNoEssential);
 }
 
 #[test]
@@ -1237,8 +1192,8 @@ fn public_avis_major_no_pitm() {
     match mp4::read_avif(input, ParseStrictness::Normal) {
         Ok(context) => {
             assert_eq!(context.major_brand, mp4::AVIS_BRAND);
-            assert!(context.unsupported_features.contains(mp4::Feature::Avis));
             assert!(context.primary_item_coded_data().is_none());
+            assert!(context.sequence.is_some());
         }
         Err(e) => panic!("Expected Ok(_), found {:?}", e),
     }
@@ -1250,9 +1205,9 @@ fn public_avis_major_with_pitm_and_alpha() {
     match mp4::read_avif(input, ParseStrictness::Normal) {
         Ok(context) => {
             assert_eq!(context.major_brand, mp4::AVIS_BRAND);
-            assert!(context.unsupported_features.contains(mp4::Feature::Avis));
             assert!(context.primary_item_coded_data().is_some());
             assert!(context.alpha_item_coded_data().is_some());
+            assert!(context.sequence.is_some());
         }
         Err(e) => panic!("Expected Ok(_), found {:?}", e),
     }
@@ -1260,7 +1215,7 @@ fn public_avis_major_with_pitm_and_alpha() {
 
 #[test]
 fn public_avif_avis_major_no_moov() {
-    assert_avif_shall2(AVIF_AVIS_MAJOR_NO_MOOV, Status::NoMoov);
+    assert_avif_shall(AVIF_AVIS_MAJOR_NO_MOOV, Status::MoovMissing);
 }
 
 #[test]
diff --git a/third_party/rust/mp4parse_capi/.cargo-checksum.json b/third_party/rust/mp4parse_capi/.cargo-checksum.json
index e6f11e0f5863..4a0342ad78d0 100644
--- a/third_party/rust/mp4parse_capi/.cargo-checksum.json
+++ b/third_party/rust/mp4parse_capi/.cargo-checksum.json
@@ -1 +1 @@
-{"files":{"Cargo.toml":"5074d01f075fd3c870f6e7f864e5a9b1ac7eb2af671110b58d9b1f3b830f72df","LICENSE":"fab3dd6bdab226f1c08630b1dd917e11fcb4ec5e1e020e2c16f83a0a13863e85","README.md":"f776ed4bbb7b58a5684402a9c5c28dfe1fa02b6b184139b2c2c49384cc1e3723","cbindgen.toml":"62066cd34285ab9e7f1cc5db8950a51e9e080f5a85bd55ad43d7022e4eae2758","examples/dump.rs":"a22630f5f1434d4832f9113dcb18161c0248465e8844d470da3c76bb9910677a","src/lib.rs":"21d0b024037be9ced0f4647925bde55ca5e3fd4272a89847a4431235244b2e34","tests/test_chunk_out_of_range.rs":"73ffb5b60e826f6136d22142c030d17d0f72b85c675ccbf1300c84f9deb73131","tests/test_encryption.rs":"196ba22efc3e693c940bcc1e45d29bec9cf290b81cf77a68c1d254f6b38e6ae3","tests/test_fragment.rs":"a4b275d7159c50b265db583a1cc8255bd0a141e3a44432355713b895a7970d37","tests/test_rotation.rs":"a5aa6cc88a327ec90d6898b2c4f5ac397667ce349d829deae1af46c230be9cb6","tests/test_sample_table.rs":"d191fe5836c58d4bdffd7390da029bb5371f8afb5b1a8d636e15ae0dd6b5f4c8","tests/test_workaround_stsc.rs":"85cd2546224b5c4891a60d86e2d302a56e0c0798c2636ad241603a00ebfa46b5"},"package":null}
\ No newline at end of file
+{"files":{},"package":null}
\ No newline at end of file
diff --git a/third_party/rust/mp4parse_capi/Cargo.toml b/third_party/rust/mp4parse_capi/Cargo.toml
index 57ae8fcfa12b..6b95a3ecb049 100644
--- a/third_party/rust/mp4parse_capi/Cargo.toml
+++ b/third_party/rust/mp4parse_capi/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "mp4parse_capi"
-version = "0.13.0"
+version = "0.16.0"
 authors = [
   "Ralph Giles <giles@mozilla.com>",
   "Matthew Gregan <kinetik@flim.org>",
@@ -12,7 +12,7 @@ authors = [
 description = "Parser for ISO base media file format (mp4)"
 documentation = "https://docs.rs/mp4parse_capi/"
 license = "MPL-2.0"
-
+edition = "2018"
 repository = "https://github.com/mozilla/mp4parse-rust"
 
 # Avoid complaints about trying to package test files.
@@ -27,11 +27,11 @@ travis-ci = { repository = "https://github.com/mozilla/mp4parse-rust" }
 byteorder = "1.2.1"
 fallible_collections = { version = "0.4", features = ["std_io"] }
 log = "0.4"
-mp4parse = { version = "0.13.0", path = "../mp4parse", features = ["unstable-api"] }
+mp4parse = { version = "0.16.0", path = "../mp4parse", features = ["unstable-api"] }
 num-traits = "0.2.14"
 
 [dev-dependencies]
-env_logger = "0.8"
+env_logger = "0.9"
 
 [features]
 missing-pixi-permitted = ["mp4parse/missing-pixi-permitted"]
diff --git a/third_party/rust/mp4parse_capi/examples/dump.rs b/third_party/rust/mp4parse_capi/examples/dump.rs
index 1392b304f80b..f61693b9f9ec 100644
--- a/third_party/rust/mp4parse_capi/examples/dump.rs
+++ b/third_party/rust/mp4parse_capi/examples/dump.rs
@@ -1,11 +1,4 @@
-extern crate mp4parse;
-extern crate mp4parse_capi;
-
-#[macro_use]
-extern crate log;
-
-extern crate env_logger;
-
+use log::info;
 use mp4parse::ParseStrictness;
 use mp4parse_capi::*;
 use std::env;
@@ -119,7 +112,9 @@ fn dump_file(filename: &str, strictness: ParseStrictness) {
                         }
                     }
                 }
-                Mp4parseTrackType::Video => {
+                Mp4parseTrackType::Video
+                | Mp4parseTrackType::Picture
+                | Mp4parseTrackType::AuxiliaryVideo => {
                     let mut video_info = Mp4parseTrackVideoInfo::default();
                     match mp4parse_get_track_video_info(parser, i, &mut video_info) {
                         Mp4parseStatus::Ok => {
diff --git a/third_party/rust/mp4parse_capi/src/lib.rs b/third_party/rust/mp4parse_capi/src/lib.rs
index 627015e69f88..90a71e939d36 100644
--- a/third_party/rust/mp4parse_capi/src/lib.rs
+++ b/third_party/rust/mp4parse_capi/src/lib.rs
@@ -5,7 +5,6 @@
 //! # Examples
 //!
 //! ```rust
-//! extern crate mp4parse_capi;
 //! use std::io::Read;
 //!
 //! extern fn buf_read(buf: *mut u8, size: usize, userdata: *mut std::os::raw::c_void) -> isize {
@@ -35,11 +34,6 @@
 // License, v. 2.0. If a copy of the MPL was not distributed with this
 // file, You can obtain one at https://mozilla.org/MPL/2.0/.
 
-extern crate byteorder;
-extern crate log;
-extern crate mp4parse;
-extern crate num_traits;
-
 use byteorder::WriteBytesExt;
 use std::convert::TryFrom;
 use std::convert::TryInto;
@@ -51,6 +45,7 @@ use mp4parse::serialize_opus_header;
 use mp4parse::unstable::{
     create_sample_table, media_time_to_us, track_time_to_us, CheckedInteger, Indice, Microseconds,
 };
+use mp4parse::AV1ConfigBox;
 use mp4parse::AudioCodecSpecific;
 use mp4parse::AvifContext;
 use mp4parse::CodecType;
@@ -59,6 +54,7 @@ use mp4parse::MediaContext;
 pub use mp4parse::ParseStrictness;
 use mp4parse::SampleEntry;
 pub use mp4parse::Status as Mp4parseStatus;
+use mp4parse::Track;
 use mp4parse::TrackType;
 use mp4parse::TryBox;
 use mp4parse::TryHashMap;
@@ -76,11 +72,13 @@ struct HashMap;
 struct String;
 
 #[repr(C)]
-#[derive(PartialEq, Debug)]
+#[derive(PartialEq, Eq, Debug)]
 pub enum Mp4parseTrackType {
     Video = 0,
-    Audio = 1,
-    Metadata = 2,
+    Picture = 1,
+    AuxiliaryVideo = 2,
+    Audio = 3,
+    Metadata = 4,
 }
 
 impl Default for Mp4parseTrackType {
@@ -91,7 +89,7 @@ impl Default for Mp4parseTrackType {
 
 #[allow(non_camel_case_types, clippy::upper_case_acronyms)]
 #[repr(C)]
-#[derive(PartialEq, Debug)]
+#[derive(PartialEq, Eq, Debug)]
 pub enum Mp4parseCodec {
     Unknown,
     Aac,
@@ -120,7 +118,7 @@ impl Default for Mp4parseCodec {
 }
 
 #[repr(C)]
-#[derive(PartialEq, Debug)]
+#[derive(PartialEq, Eq, Debug)]
 pub enum Mp4ParseEncryptionSchemeType {
     None,
     Cenc,
@@ -202,7 +200,7 @@ pub struct Mp4parsePsshInfo {
 }
 
 #[repr(u8)]
-#[derive(Debug, PartialEq)]
+#[derive(Debug, PartialEq, Eq)]
 pub enum OptionalFourCc {
     None,
     Some([u8; 4]),
@@ -316,15 +314,10 @@ pub struct Mp4parseParser {
 
 #[repr(C)]
 #[derive(Debug)]
-pub struct Mp4parseAvifImageItem {
-    pub coded_data: Mp4parseByteData,
-    pub bits_per_channel: Mp4parseByteData,
-}
-
-#[repr(C)]
-#[derive(Debug)]
-pub struct Mp4parseAvifImage {
-    pub primary_image: Mp4parseAvifImageItem,
+pub struct Mp4parseAvifInfo {
+    pub premultiplied_alpha: bool,
+    pub major_brand: [u8; 4],
+    pub unsupported_features_bitfield: u32,
     /// The size of the image; should never be null unless using permissive parsing
     pub spatial_extents: *const mp4parse::ImageSpatialExtentsProperty,
     pub nclx_colour_information: *const mp4parse::NclxColourInformation,
@@ -332,12 +325,33 @@ pub struct Mp4parseAvifImage {
     pub image_rotation: mp4parse::ImageRotation,
     pub image_mirror: *const mp4parse::ImageMirror,
     pub pixel_aspect_ratio: *const mp4parse::PixelAspectRatio,
-    /// If no alpha item exists, members' `.length` will be 0 and `.data` will be null
-    pub alpha_image: Mp4parseAvifImageItem,
-    pub premultiplied_alpha: bool,
-    pub major_brand: [u8; 4],
+
+    /// Whether there is a `pitm` reference to the color image present.
+    pub has_primary_item: bool,
+    /// Bit depth for the item referenced by `pitm`, or 0 if values are inconsistent.
+    pub primary_item_bit_depth: u8,
+    /// Whether there is an `auxl` reference to the `pitm`-accompanying
+    /// alpha image present.
+    pub has_alpha_item: bool,
+    /// Bit depth for the alpha item used by the `pitm`, or 0 if values are inconsistent.
+    pub alpha_item_bit_depth: u8,
+
+    /// Whether there is a sequence. Can be true with no primary image.
     pub has_sequence: bool,
-    pub unsupported_features_bitfield: u32,
+    /// The color track's ID, which must be valid if has_sequence is true.
+    pub color_track_id: u32,
+    pub color_track_bit_depth: u8,
+    /// The track ID of the alpha track, will be 0 if no alpha track is present.
+    pub alpha_track_id: u32,
+    pub alpha_track_bit_depth: u8,
+}
+
+#[repr(C)]
+#[derive(Debug)]
+pub struct Mp4parseAvifImage {
+    pub primary_image: Mp4parseByteData,
+    /// If no alpha item exists, members' `.length` will be 0 and `.data` will be null
+    pub alpha_image: Mp4parseByteData,
 }
 
 /// A unified interface for the parsers which have different contexts, but
@@ -381,8 +395,10 @@ impl ContextParser for Mp4parseParser {
     }
 }
 
+#[derive(Default)]
 pub struct Mp4parseAvifParser {
     context: AvifContext,
+    sample_table: TryHashMap<u32, TryVec<Indice>>,
 }
 
 impl Mp4parseAvifParser {
@@ -395,7 +411,10 @@ impl ContextParser for Mp4parseAvifParser {
     type Context = AvifContext;
 
     fn with_context(context: Self::Context) -> Self {
-        Self { context }
+        Self {
+            context,
+            ..Default::default()
+        }
     }
 
     fn read<T: Read>(io: &mut T, strictness: ParseStrictness) -> mp4parse::Result<Self::Context> {
@@ -601,6 +620,8 @@ pub unsafe extern "C" fn mp4parse_get_track_info(
 
     info.track_type = match context.tracks[track_index].track_type {
         TrackType::Video => Mp4parseTrackType::Video,
+        TrackType::Picture => Mp4parseTrackType::Picture,
+        TrackType::AuxiliaryVideo => Mp4parseTrackType::AuxiliaryVideo,
         TrackType::Audio => Mp4parseTrackType::Audio,
         TrackType::Metadata => Mp4parseTrackType::Metadata,
         TrackType::Unknown => return Mp4parseStatus::Unsupported,
@@ -1024,6 +1045,158 @@ fn mp4parse_get_track_video_info_safe(
     Ok(())
 }
 
+/// Return a struct containing meta information read by previous
+/// `mp4parse_avif_new()` call.
+///
+/// `color_track_id`and `alpha_track_id` will be 0 if has_sequence is false.
+/// `alpha_track_id` will be 0 if no alpha aux track is present.
+///
+/// # Safety
+///
+/// This function is unsafe because it dereferences both the parser and
+/// avif_info raw pointers passed into it. Callers should ensure the parser
+/// pointer points to a valid `Mp4parseAvifParser`, and that the avif_info
+/// pointer points to a valid `Mp4parseAvifInfo`.
+#[no_mangle]
+pub unsafe extern "C" fn mp4parse_avif_get_info(
+    parser: *const Mp4parseAvifParser,
+    avif_info: *mut Mp4parseAvifInfo,
+) -> Mp4parseStatus {
+    if parser.is_null() || avif_info.is_null() {
+        return Mp4parseStatus::BadArg;
+    }
+
+    if let Ok(info) = mp4parse_avif_get_info_safe((*parser).context()) {
+        *avif_info = info;
+        Mp4parseStatus::Ok
+    } else {
+        Mp4parseStatus::Invalid
+    }
+}
+
+fn mp4parse_avif_get_info_safe(context: &AvifContext) -> mp4parse::Result<Mp4parseAvifInfo> {
+    let info = Mp4parseAvifInfo {
+        premultiplied_alpha: context.premultiplied_alpha,
+        major_brand: context.major_brand.value,
+        unsupported_features_bitfield: context.unsupported_features.into_bitfield(),
+        spatial_extents: context.spatial_extents_ptr()?,
+        nclx_colour_information: context
+            .nclx_colour_information_ptr()
+            .unwrap_or(Ok(std::ptr::null()))?,
+        icc_colour_information: Mp4parseByteData::with_data(
+            context.icc_colour_information().unwrap_or(Ok(&[]))?,
+        ),
+        image_rotation: context.image_rotation()?,
+        image_mirror: context.image_mirror_ptr()?,
+        pixel_aspect_ratio: context.pixel_aspect_ratio_ptr()?,
+
+        has_primary_item: context.primary_item_is_present(),
+        primary_item_bit_depth: 0,
+        has_alpha_item: context.alpha_item_is_present(),
+        alpha_item_bit_depth: 0,
+
+        has_sequence: false,
+        color_track_id: 0,
+        color_track_bit_depth: 0,
+        alpha_track_id: 0,
+        alpha_track_bit_depth: 0,
+    };
+
+    fn get_bit_depth(data: &[u8]) -> u8 {
+        if !data.is_empty() && data.iter().all(|v| *v == data[0]) {
+            data[0]
+        } else {
+            0
+        }
+    }
+    let primary_item_bit_depth =
+        get_bit_depth(context.primary_item_bits_per_channel().unwrap_or(Ok(&[]))?);
+    let alpha_item_bit_depth =
+        get_bit_depth(context.primary_item_bits_per_channel().unwrap_or(Ok(&[]))?);
+
+    if let Some(sequence) = &context.sequence {
+        // Tracks must have track_id and samples
+        fn get_track<T>(tracks: &TryVec<Track>, pred: T) -> Option<&Track>
+        where
+            T: Fn(&Track) -> bool,
+        {
+            tracks.iter().find(|track| {
+                if track.track_id.is_none() {
+                    return false;
+                }
+                match &track.stsc {
+                    Some(stsc) => {
+                        if stsc.samples.is_empty() {
+                            return false;
+                        }
+                        if !pred(track) {
+                            return false;
+                        }
+                        stsc.samples.iter().any(|chunk| chunk.samples_per_chunk > 0)
+                    }
+                    _ => false,
+                }
+            })
+        }
+
+        // Color track will be the first track found
+        let color_track = match get_track(&sequence.tracks, |_| true) {
+            Some(v) => v,
+            _ => return Ok(info),
+        };
+
+        // Alpha track will be the first track found with auxl.aux_for_track_id set to color_track's id
+        let alpha_track = get_track(&sequence.tracks, |track| match &track.tref {
+            Some(tref) => tref.has_auxl_reference(color_track.track_id.unwrap()),
+            _ => false,
+        });
+
+        fn get_av1c(track: &Track) -> Option<&AV1ConfigBox> {
+            if let Some(stsd) = &track.stsd {
+                for entry in &stsd.descriptions {
+                    if let SampleEntry::Video(video_entry) = entry {
+                        if let VideoCodecSpecific::AV1Config(av1c) = &video_entry.codec_specific {
+                            return Some(av1c);
+                        }
+                    }
+                }
+            }
+
+            None
+        }
+
+        let color_track_id = color_track.track_id.unwrap();
+        let color_track_bit_depth = match get_av1c(color_track) {
+            Some(av1c) => av1c.bit_depth,
+            _ => return Ok(info),
+        };
+
+        let (alpha_track_id, alpha_track_bit_depth) = match alpha_track {
+            Some(track) => (
+                track.track_id.unwrap(),
+                match get_av1c(track) {
+                    Some(av1c) => av1c.bit_depth,
+                    _ => return Ok(info),
+                },
+            ),
+            _ => (0, 0),
+        };
+
+        return Ok(Mp4parseAvifInfo {
+            primary_item_bit_depth,
+            alpha_item_bit_depth,
+            has_sequence: true,
+            color_track_id,
+            color_track_bit_depth,
+            alpha_track_id,
+            alpha_track_bit_depth,
+            ..info
+        });
+    }
+
+    Ok(info)
+}
+
 /// Return a pointer to the primary item parsed by previous `mp4parse_avif_new()` call.
 ///
 /// # Safety
@@ -1057,39 +1230,11 @@ pub fn mp4parse_avif_get_image_safe(
     parser: &Mp4parseAvifParser,
 ) -> mp4parse::Result<Mp4parseAvifImage> {
     let context = parser.context();
-
-    let primary_image = Mp4parseAvifImageItem {
-        coded_data: Mp4parseByteData::with_data(context.primary_item_coded_data().unwrap_or(&[])),
-        bits_per_channel: Mp4parseByteData::with_data(
-            context.primary_item_bits_per_channel().unwrap_or(Ok(&[]))?,
-        ),
-    };
-
-    // If there is no alpha present, all the `Mp4parseByteData`s will be zero length
-    let alpha_image = Mp4parseAvifImageItem {
-        coded_data: Mp4parseByteData::with_data(context.alpha_item_coded_data().unwrap_or(&[])),
-        bits_per_channel: Mp4parseByteData::with_data(
-            context.alpha_item_bits_per_channel().unwrap_or(Ok(&[]))?,
-        ),
-    };
-
     Ok(Mp4parseAvifImage {
-        primary_image,
-        spatial_extents: context.spatial_extents_ptr()?,
-        nclx_colour_information: context
-            .nclx_colour_information_ptr()
-            .unwrap_or(Ok(std::ptr::null()))?,
-        icc_colour_information: Mp4parseByteData::with_data(
-            context.icc_colour_information().unwrap_or(Ok(&[]))?,
+        primary_image: Mp4parseByteData::with_data(
+            context.primary_item_coded_data().unwrap_or(&[]),
         ),
-        image_rotation: context.image_rotation()?,
-        image_mirror: context.image_mirror_ptr()?,
-        pixel_aspect_ratio: context.pixel_aspect_ratio_ptr()?,
-        alpha_image,
-        premultiplied_alpha: context.premultiplied_alpha,
-        major_brand: context.major_brand.value,
-        has_sequence: context.has_sequence,
-        unsupported_features_bitfield: context.unsupported_features.into_bitfield(),
+        alpha_image: Mp4parseByteData::with_data(context.alpha_item_coded_data().unwrap_or(&[])),
     })
 }
 
@@ -1114,26 +1259,66 @@ pub unsafe extern "C" fn mp4parse_get_indice_table(
     // Initialize fields to default values to ensure all fields are always valid.
     *indices = Default::default();
 
-    get_indice_table(&mut *parser, track_id, &mut *indices).into()
+    get_indice_table(
+        &(*parser).context,
+        &mut (*parser).sample_table,
+        track_id,
+        &mut *indices,
+    )
+    .into()
+}
+
+/// Fill the supplied `Mp4parseByteData` with index information from `track`.
+///
+/// # Safety
+///
+/// This function is unsafe because it dereferences both the parser and
+/// indices raw pointers passed to it. Callers should ensure the parser
+/// points to a valid `Mp4parseAvifParser` and indices points to a valid
+/// `Mp4parseByteData`.
+#[no_mangle]
+pub unsafe extern "C" fn mp4parse_avif_get_indice_table(
+    parser: *mut Mp4parseAvifParser,
+    track_id: u32,
+    indices: *mut Mp4parseByteData,
+) -> Mp4parseStatus {
+    if parser.is_null() {
+        return Mp4parseStatus::BadArg;
+    }
+
+    if indices.is_null() {
+        return Mp4parseStatus::BadArg;
+    }
+
+    // Initialize fields to default values to ensure all fields are always valid.
+    *indices = Default::default();
+
+    if let Some(sequence) = &(*parser).context.sequence {
+        return get_indice_table(
+            sequence,
+            &mut (*parser).sample_table,
+            track_id,
+            &mut *indices,
+        )
+        .into();
+    }
+
+    Mp4parseStatus::BadArg
 }
 
 fn get_indice_table(
-    parser: &mut Mp4parseParser,
+    context: &MediaContext,
+    sample_table_cache: &mut TryHashMap<u32, TryVec<Indice>>,
     track_id: u32,
     indices: &mut Mp4parseByteData,
 ) -> Result<(), Mp4parseStatus> {
-    let Mp4parseParser {
-        context,
-        sample_table: index_table,
-        ..
-    } = parser;
     let tracks = &context.tracks;
     let track = match tracks.iter().find(|track| track.track_id == Some(track_id)) {
         Some(t) => t,
         _ => return Err(Mp4parseStatus::Invalid),
     };
 
-    if let Some(v) = index_table.get(&track_id) {
+    if let Some(v) = sample_table_cache.get(&track_id) {
         indices.set_indices(v);
         return Ok(());
     }
@@ -1165,7 +1350,7 @@ fn get_indice_table(
 
     if let Some(v) = create_sample_table(track, offset_time) {
         indices.set_indices(&v);
-        index_table.insert(track_id, v)?;
+        sample_table_cache.insert(track_id, v)?;
         return Ok(());
     }
 
diff --git a/third_party/rust/mp4parse_capi/tests/test_chunk_out_of_range.rs b/third_party/rust/mp4parse_capi/tests/test_chunk_out_of_range.rs
index b3a9543b4092..26c2f506e17a 100644
--- a/third_party/rust/mp4parse_capi/tests/test_chunk_out_of_range.rs
+++ b/third_party/rust/mp4parse_capi/tests/test_chunk_out_of_range.rs
@@ -1,4 +1,3 @@
-extern crate mp4parse_capi;
 use mp4parse_capi::*;
 use std::io::Read;
 
diff --git a/third_party/rust/mp4parse_capi/tests/test_encryption.rs b/third_party/rust/mp4parse_capi/tests/test_encryption.rs
index 1a47e329fcd5..03f59630445d 100644
--- a/third_party/rust/mp4parse_capi/tests/test_encryption.rs
+++ b/third_party/rust/mp4parse_capi/tests/test_encryption.rs
@@ -1,4 +1,3 @@
-extern crate mp4parse_capi;
 use mp4parse_capi::*;
 use std::io::Read;
 
diff --git a/third_party/rust/mp4parse_capi/tests/test_fragment.rs b/third_party/rust/mp4parse_capi/tests/test_fragment.rs
index d6ebe1f177d5..e4a018bc2a8c 100644
--- a/third_party/rust/mp4parse_capi/tests/test_fragment.rs
+++ b/third_party/rust/mp4parse_capi/tests/test_fragment.rs
@@ -1,4 +1,3 @@
-extern crate mp4parse_capi;
 use mp4parse_capi::*;
 use std::io::Read;
 
diff --git a/third_party/rust/mp4parse_capi/tests/test_rotation.rs b/third_party/rust/mp4parse_capi/tests/test_rotation.rs
index 918c9fbeaea7..2ea47a5d52aa 100644
--- a/third_party/rust/mp4parse_capi/tests/test_rotation.rs
+++ b/third_party/rust/mp4parse_capi/tests/test_rotation.rs
@@ -1,4 +1,3 @@
-extern crate mp4parse_capi;
 use mp4parse_capi::*;
 use std::io::Read;
 
diff --git a/third_party/rust/mp4parse_capi/tests/test_sample_table.rs b/third_party/rust/mp4parse_capi/tests/test_sample_table.rs
index ad030a94c545..ab42a12a6ba1 100644
--- a/third_party/rust/mp4parse_capi/tests/test_sample_table.rs
+++ b/third_party/rust/mp4parse_capi/tests/test_sample_table.rs
@@ -1,5 +1,3 @@
-extern crate mp4parse;
-extern crate mp4parse_capi;
 use mp4parse::unstable::Indice;
 use mp4parse_capi::*;
 use std::io::Read;
diff --git a/third_party/rust/mp4parse_capi/tests/test_workaround_stsc.rs b/third_party/rust/mp4parse_capi/tests/test_workaround_stsc.rs
index 99c92a7fef99..197024086f40 100644
--- a/third_party/rust/mp4parse_capi/tests/test_workaround_stsc.rs
+++ b/third_party/rust/mp4parse_capi/tests/test_workaround_stsc.rs
@@ -1,4 +1,3 @@
-extern crate mp4parse_capi;
 use mp4parse_capi::*;
 use std::io::Read;
 
diff --git a/toolkit/components/telemetry/Histograms.json b/toolkit/components/telemetry/Histograms.json
index 6e5cdd2141e1..62393f49de9f 100644
--- a/toolkit/components/telemetry/Histograms.json
+++ b/toolkit/components/telemetry/Histograms.json
@@ -1791,6 +1791,7 @@
       "alpha_y_bpc_mismatch",
       "ispe_mismatch",
       "invalid_cicp",
+      "no_samples",
       "invalid_parse_status",
       "missing_brand",
       "ftyp_not_first",
@@ -1805,7 +1806,8 @@
       "item_type_missing",
       "construction_method",
       "item_loc_not_found",
-      "no_item_data_box"
+      "no_item_data_box",
+      "uncategorized"
     ],
     "description": "Decode result of AVIF image",
     "bug_numbers": [1670827]
diff --git a/toolkit/library/rust/shared/Cargo.toml b/toolkit/library/rust/shared/Cargo.toml
index aa9c330605fb..63af83e2f94e 100644
--- a/toolkit/library/rust/shared/Cargo.toml
+++ b/toolkit/library/rust/shared/Cargo.toml
@@ -12,7 +12,7 @@ mozglue-static = { path = "../../../../mozglue/static/rust" }
 geckoservo = { path = "../../../../servo/ports/geckolib" }
 kvstore = { path = "../../../components/kvstore" }
 lmdb-rkv-sys = { version = "0.11", features = ["mdb_idl_logn_9"] }
-mp4parse_capi = { git = "https://github.com/mozilla/mp4parse-rust", rev = "3bfc47d9a571d0842676043ba60716318e946c06", features = ["missing-pixi-permitted"] }
+mp4parse_capi = { git = "https://github.com/mozilla/mp4parse-rust", rev = "eb0b625bd7e888d05ebcfc7685e2501b34c3b374", features = ["missing-pixi-permitted"] }
 nserror = { path = "../../../../xpcom/rust/nserror" }
 nsstring = { path = "../../../../xpcom/rust/nsstring" }
 netwerk_helper = { path = "../../../../netwerk/base/rust-helper" }
